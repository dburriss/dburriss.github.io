<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devon Burriss' Blog</title>
  <link href="https://devonburriss.me/"/>
  <link type="application/atom+xml" rel="self" href="https://devonburriss.me/atom.xml"/>
  <updated>2021-12-24T15:38:55.811248+00:00</updated>
  <id>https://devonburriss.me/</id>
  <author>
    <name>Devon Burriss</name>
    <email></email>
  </author>

  
  <entry>
    <id>https://devonburriss.me/useful-fp-language-features/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/useful-fp-language-features/"/>
    <title>Useful FP language features</title>
    <updated>2021-12-23T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/useful-fp-language-features/</uri>
    </author>
    <summary type="html">&lt;p&gt;In a &lt;a href=&quot;/what-is-fp&quot;&gt;previous post&lt;/a&gt; we looked at the big ideas of functional programming. In this post we will look at some features that are often associated with functional programming but that I do not think are core to it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Some of these are conflated with functional programming but it turns out that the only language feature needed for functional programming is support for higher-order functions.&lt;/p&gt;
&lt;h2&gt;Immutable data&lt;/h2&gt;
&lt;p&gt;To work with pure functions, you need to be careful not to change the underlying state of you application. This includes the input to your functions. It is useful if your language can enforce this.&lt;/p&gt;
&lt;p&gt;I was presenting to a group of Javascript and C# developers a few weeks ago and I showed the following C# snippet of code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// what does this return?
var two = 1 + 1;
return two++;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now maybe this is a bit unfair but I think it highlights the problem of reasoning about mutable state as statements are executed. When I polled the audience on this it seemed about a 50/50 split between answers of 2 and answers of 3. If anything, more answers of 3. If you are not sure, it turns out the number 2 is returned. Any subsequent references to &lt;code&gt;two&lt;/code&gt; would reference the value 3.&lt;/p&gt;
&lt;p&gt;Now granted, the &lt;code&gt;++&lt;/code&gt; operator is not the most intuitive and you need to know the behaviour expected depending on what side of the variable it is place. It is useful in illustrating how state can change in ways we might not anticipate.&lt;/p&gt;
&lt;p&gt;In the F# example below, you see that a value is immutable. Once it&apos;s value is set, it cannot be changed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let two = 1 + 1
//let two = 3 // will not compile
//let two &amp;lt;- 3 // will not compile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have immutable values, it is important to have an easy way to create new values from old ones. An often overlooked area here is having good tools for working with immutable collections.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let stock = [ (&amp;quot;chicken&amp;quot;, 20);(&amp;quot;grain&amp;quot;, 50);(&amp;quot;potatoes&amp;quot;, 30) ] |&amp;gt; Map.ofList
// create a new map from an existing one
let newStock = stock |&amp;gt; Map.change &amp;quot;chicken&amp;quot; (fun vOpt -&amp;gt; vOpt |&amp;gt; Option.map (fun v -&amp;gt; v - 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above we see that rather than changing the value in the map, a new map is returned with the changed value.&lt;/p&gt;
&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Easier to reason about&lt;/li&gt;
&lt;li&gt;Fewer bugs due to unexpected state changes&lt;/li&gt;
&lt;li&gt;Easier parallel processing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Algebraic data types&lt;/h2&gt;
&lt;p&gt;Algebraic data types are comprised of &lt;strong&gt;product&lt;/strong&gt; types and &lt;strong&gt;sum&lt;/strong&gt; types.&lt;/p&gt;
&lt;p&gt;Sidebar: I am not the person to be trying to explain Type Theory. I am not even sure if there exists a formal definition of class and how it relates to a type (in a language agnostic way). If you are an OO programmer think of a type as a concrete class. So &lt;code&gt;Nullable&amp;lt;T&amp;gt;&lt;/code&gt; is a class, &lt;code&gt;Nullable&amp;lt;int&amp;gt;&lt;/code&gt; is a type and &lt;code&gt;Nullable&amp;lt;decimal&amp;gt;&lt;/code&gt; is another type. My current thinking of a class is as a parameterized factory for a type, if it is generic. If not they can be considered equivalent. Experts, let me know in the comments all the ways this is wrong :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Product types&lt;/strong&gt; are either records or tuples which in OO languages are common data structure types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type IntAndBool = {
    I : uint
    B : bool
}

let p = { I = 0u ; B = true }

// range of possible values
printfn &amp;quot;product %i&amp;quot; (((UInt32.MaxValue |&amp;gt; int64) + 1L) * (2L)) // range of uint * range of bool
// product 8589934592
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Giving as a total possible range of 8589934592 combinations, found by multiplying the possible number of states in each field.&lt;/p&gt;
&lt;p&gt;So I bet you can guess where &lt;strong&gt;sum types&lt;/strong&gt; get there name from now...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sum types&lt;/strong&gt; are known by many names and appear primarily in functional-first languages (tagged union, discriminated union, choice type, to name a few). The only OO leaning language I personally know that has something like &lt;strong&gt;sum types&lt;/strong&gt; is TypeScript&apos;s Union types.&lt;/p&gt;
&lt;p&gt;These types allow us to define types that can be something, or something else. An example will illustrate this best.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type IntOrBool = I of uint | B of bool

let s = B true

(((UInt32.MaxValue |&amp;gt; int64) + 1L) + 2L)
printfn &amp;quot;sum %i&amp;quot; (((UInt32.MaxValue |&amp;gt; int64) + 1L) + (2L)) // range of uint + range of bool
// sum 4294967298
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An instance of &lt;code&gt;IntOrBool&lt;/code&gt; can be either one type or the other. There is no need to constrain these to combining simple types though. We can model using more complex types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type PostalCode = string
type Address = { 
    HouseNumber : int
    HouseNumberOpt : char option
    StreetName : string
    City : string
    PostalCode : PostalCode
}
type EmailAddress = string
type PhoneNumber = string
type ContactMethod = Email of EmailAddress | Post of Address | Phone of PhoneNumber
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you see the &lt;code&gt;ContactMethod&lt;/code&gt; type can be &lt;code&gt;EmailAddress&lt;/code&gt; OR &lt;code&gt;Address&lt;/code&gt; OR &lt;code&gt;PhoneNumber&lt;/code&gt;. This gives a far more rich and intuitive way of modelling a domain.&lt;/p&gt;
&lt;p&gt;A language that supports &lt;strong&gt;sum types&lt;/strong&gt; typically provides elegant ways of dealing with 2 prickly issues in programming.&lt;br /&gt;
Too often the absence of something is represented by &lt;code&gt;null&lt;/code&gt;. &amp;quot; The billion dollar mistake yada yada...&amp;quot;.
In functional languages the approach is to use a sum type, usually called &lt;code&gt;Option&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let noValue = None
let someValueThatCouldBeNone = Some 42
printfn &amp;quot;is equal? %b&amp;quot; (noValue = someValueThatCouldBeNone)
// is equal? false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A similar approach can be taken to exceptions. Instead of throwing an exception that is hopefully handled somewhere, we return from the function that it was possible for an exception to have occurred.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let success = Ok 42
let error = Error &amp;quot;Something went wrong calculating the meaning of life&amp;quot;
printfn &amp;quot;is equal? %b&amp;quot; (noValue = someValueThatCouldBeNone)
// is equal? false
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This could be the point where some might be wondering where I am going to start throwing the word Monad. This article will not. Monad, monoid, etc. are patterns as far as I am concerned. Their origins may be far more formal than the observational origins of OOP patterns like Vistor, or Strategy, but they are patterns none the less (in my opinion). The are no more necessary for FP than patterns are for OOP. Using them well can improve your code. Using them poorly can make it overly complicated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;They should be immutable&lt;/li&gt;
&lt;li&gt;They should have value equality&lt;/li&gt;
&lt;li&gt;More powerful modelling options without resorting to inheritance&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pattern matching&lt;/h2&gt;
&lt;p&gt;The final language feature I will point out is pattern matching. This is making it&apos;s way into C# now but for me the combination of pattern matching with &lt;strong&gt;sum types&lt;/strong&gt; is what I miss most when working in a language that does not support algebraic types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let calculateMeaning() =
    if ((Random()).Next() % 2) = 0 then Ok 42
    else Error &amp;quot;Something went wrong calculating the meaning of life&amp;quot;

match calculateMeaning() with
| Ok nr -&amp;gt; printfn &amp;quot;The answer to life is %i&amp;quot; nr
| Error err -&amp;gt; printfn &amp;quot;%s&amp;quot; err
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When calculating the meaning of life, the returning result will be of type &lt;code&gt;Result&amp;lt;int,string&amp;gt;&lt;/code&gt;. We can &lt;code&gt;match&lt;/code&gt; on this where we handle each case that is possible. If you have a statically typed language the compiler can tell you when your match is not covering every case.&lt;/p&gt;
&lt;p&gt;If working with &lt;code&gt;Option&lt;/code&gt; or &lt;code&gt;Result&lt;/code&gt; sounds interesting to you, I suggest checking out &lt;a href=&quot;https://fsharpforfunandprofit.com/rop/&quot;&gt;Railway oriented programming&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Often results in easier to understand control flow&lt;/li&gt;
&lt;li&gt;In some languages, the compiler can tell you if all possibilities are matched against&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we covered a few language features that are nice to have for making you development experience using functional programming productive. These support the ideas of FP and make it faster to write code that is bug free. This post was mostly about addressing things that where not in the &lt;a href=&quot;/what-is-fp&quot;&gt;previous post&lt;/a&gt;. Finally, monads, etc. were not covered at all, since I consider them patterns. Although they are intimately connected with FP, I do not think they are strictly necessary to say you are writing code using the principles of FP.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/what-is-fp/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/what-is-fp/"/>
    <title>What is Functional Programming?</title>
    <updated>2021-12-22T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/what-is-fp/</uri>
    </author>
    <summary type="html">&lt;p&gt;A few weeks ago I was preparing a small introduction to functional programming. It turns out, for me at least, to be fairly difficult to define what functional programming is. I distilled it down to 3 things via process of elimination. In this post I dive into what these 3 things are and what benefits they bring.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Sidebar: As someone who has been doing OOP for 15+ years at this stage, I find OOP difficult to define too. This was not always the case. Learning functional programming ruined me, as it has ruined many before. As an OO programmer I was sure of my knowledge, my patterns, my design. Then I tried learning something that seemed to turn it all on it&apos;s head. Not just my knowledge but my self-assuredness in &amp;quot;right&amp;quot; and &amp;quot;wrong&amp;quot; ways to build software. Now with a little more experience in FP, I see many similarities in the problems and how they are solved. For me the benefit in FP is the number of &amp;quot;patterns and practices&amp;quot; that need to be understood to write better software. The point of this sidebar though is that words like abstraction and encapsulation are not claimed exclusively by OO. Except for inheritance... OO can have that if it wants it!&lt;/p&gt;
&lt;p&gt;In the following sections I discuss my 3 aspects of programming that should be followed to reap the benefits of FP.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The language should support higher-order functions&lt;/li&gt;
&lt;li&gt;More complex functions should be composed out of simpler functions&lt;/li&gt;
&lt;li&gt;The programmer should follow the discipline of making a distinction between pure and impure functions and try maximize the amount of pure functions&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;I find it interesting that there are 3 moving parts here. The language, how we build code, and how we architect code to interact with the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Higher-order functions&lt;/h2&gt;
&lt;p&gt;A higher-order function is a function that meets at least one of the following two criteria:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A function that takes another function as an input&lt;/li&gt;
&lt;li&gt;A function that returns a function as its output&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although most modern languages support this now days, functional-first languages tend to make this feel a lot more natural to use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let isEven x = (x % 2) = 0              // predicate function for determining an even number
let selectEven = List.filter isEven     // Use predicate to returns new function of that selects even numbers

let evenInts = selectEven [0..10]       // use the function
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Functions are values and so can be passed around&lt;/li&gt;
&lt;li&gt;Functions that take functions can be far more flexible as behaviour can be decided by the caller&lt;/li&gt;
&lt;li&gt;When returning a function from another function it can be evaluated later (or not at all)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Function composition&lt;/h2&gt;
&lt;p&gt;Function composition is the combination of simple functions into more complex ones. To compose functions, the output type of a function needs match the input type for the next function in the composition.&lt;/p&gt;
&lt;p&gt;This is probably easiest explained with examples since you have probably used it in both school mathematics and programming.&lt;/p&gt;
&lt;p&gt;Say we want to normalize some strings by trimming the whitespace off and making them lower-case. you could do this like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let trim (s : string) = s.Trim()
let lower (s : string) = s.ToLowerInvariant()
let normalize (s : string) = lower(trim(s))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is composition. In a functional-first language like F# we can build this up in a way that structurally matches the order the functions are called.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let normalize = trim &amp;gt;&amp;gt; lower
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a new function &lt;code&gt;normalize&lt;/code&gt; out of the 2 functions &lt;code&gt;trim&lt;/code&gt; and &lt;code&gt;lower&lt;/code&gt;. Remember that the output type of &lt;code&gt;trim&lt;/code&gt; needs to match the input type of &lt;code&gt;lower&lt;/code&gt;. In this case they are both &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Functions are small testable units&lt;/li&gt;
&lt;li&gt;Small and generic functions enable reusability&lt;/li&gt;
&lt;li&gt;We build more and more complex functions out of simpler functions helps in building in small steps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Maximize use of pure functions&lt;/h2&gt;
&lt;p&gt;This one is fairly uncontroversial. If you have heard people talking about FP then you have likely heard about pure functions.&lt;/p&gt;
&lt;p&gt;At this point talk of &lt;strong&gt;referential transparency&lt;/strong&gt; comes up. &lt;a href=&quot;https://stackoverflow.com/a/9859966/2613363&quot;&gt;Referential transparency seems to be a term borrowed from analytical philosophy&lt;/a&gt;. If something is referentially transparent it means it&apos;s value is not dependent on some context, like the time it is referenced. From a code perspective, this means that once something is assigned a value, that value does not change over the lifetime of the programs execution. Put more flippantly, &amp;quot;equals equals equals&amp;quot;.&lt;/p&gt;
&lt;p&gt;Ok. Cool, cool, cool. What does this mean?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At this point I need to issue a disclaimer: I am not a computer scientist. This is just my understanding on a topic where people tend to throw around terms like it is some kind of intellectual contest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The characteristic people are more often seeking with pure functions is &lt;em&gt;side-effect free&lt;/em&gt; functions. Side-effect free is much easier to understand than referential transparency. It means that nothing outside the scope of the function is mutated.&lt;/p&gt;
&lt;p&gt;So for a function to be &lt;strong&gt;pure&lt;/strong&gt;, it needs to satisfy 2 criteria:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The function must be referentially transparent&lt;/li&gt;
&lt;li&gt;The function must be side effect free&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that I said &lt;em&gt;maximize&lt;/em&gt; pure functions. We cannot build programs that interact with the outside world without having side effects. What we strive for in FP is increasing the amount of functions that are pure and pushing the side-effects to the boundary of our applications. We will dive into this in another post when discussing architecture.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// Referentially transparent:   Yes
// Side-effect free:  No
// Pure: No
let i_am_rt x =
    printfn &amp;quot;I am referentially transparent.&amp;quot;
    x

// Referentially transparent:   No
// Side-effect free:  No
// Pure: No
let i_am_not_rt x = (System.Console.ReadLine() |&amp;gt; int) + x

// Referentially transparent:   Yes
// Side-effect free:  Yes
// Pure: Yes
let i_am_pure x = x + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In practical terms, honouring referential transparency means you are not reading any data that is not in the input. Side-effect free is ensuring you are not changing input values (by reference) or mutating any state in the program or outside systems.
It is interesting to note that immutability comes along for the ride with pure functions, at least for where it really matters when programming with immutable values.&lt;/p&gt;
&lt;h3&gt;Benefits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Calls to a function are idempotent, so they can be repeated without fear of unexpected state updates&lt;/li&gt;
&lt;li&gt;If a function does not depend on the output of another function, the order does not matter&lt;/li&gt;
&lt;li&gt;Since pure functions depend only on their input, they can be called in parallel without fear of deadlock or data corruption&lt;/li&gt;
&lt;li&gt;Pure functions are easy to test because they depend on only the input and must have an output (to be useful)&lt;/li&gt;
&lt;li&gt;Since a pure function only depends on input, reasoning about it should be simpler&lt;/li&gt;
&lt;li&gt;If the value of a pure function is not used, it can be removed without altering the behaviour of a program&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I shouldn&apos;t have to say it, but I will. Functional programming is not about AVOIDING mutating state. It is not BAD at mutating state. It is just more opinionated about WHERE those mutations occur.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we looked at some of the core ideas of functional programming.&lt;/p&gt;
&lt;p&gt;My opinion then is that for code to claim to be functional:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The language it is written in should support higher-order functions&lt;/li&gt;
&lt;li&gt;More complex code should be built from composing simpler functions together&lt;/li&gt;
&lt;li&gt;The programmer should follow the discipline of keeping functions pure as much as possible and push impure functions to the boundaries of the application&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These ideas all have a long tradition in mathematics but hopefully from the benefits listed you can see that they might have some real practical benefits if adopted into how you design and implement applications. Depending on what languages you have been exposed to, you may have expected other topics here like immutability and algebraic data types. These language constructs being built into the language can really help, but I don&apos;t believe are necessary for programming in a functional way. In the &lt;a href=&quot;/useful-fp-language-features&quot;&gt;next post&lt;/a&gt; we will look at these to see what benefits they bring.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/reliable-apis-part-3/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/reliable-apis-part-3/"/>
    <title>Reliable APIs - Part 3</title>
    <updated>2021-08-29T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/reliable-apis-part-3/</uri>
    </author>
    <summary type="html">&lt;p&gt;The &lt;a href=&quot;/reliable-apis-part-2&quot;&gt;previous post&lt;/a&gt; showed how things can go wrong when not thinking through edge cases carefully, especially where concurrency comes into play. In this post we will look at a truly idempotent endpoint design as well as discuss some alternative designs.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Posts in this series:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/reliable-apis-part-1&quot;&gt;Exploring reties, retry implications, and the failure modes they are appropriate for&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/reliable-apis-part-2&quot;&gt;Using Idempotency-Key and a response cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The epic saga of client-side IDs and true idempotence&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once again we join our intrepid young developer as they try to implement a truly idempotent endpoint. They seek not idempotence for it&apos;s own sake but rather to finally claim that the endpoint is reliable.
As a reminder, this is the current design:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-22-10-38-55.png&quot; alt=&quot;Current design&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We have looked at all the different places this operation can fail in the two preceding posts. Currently, the DB calls are the only out-of-proc calls that have retry policies over them.&lt;/p&gt;
&lt;p&gt;Our friend has not been idle during our absence. They have been leveling up knowledge on concurrency, REST, and architecture. The result is a design that is simple but our developer worries the team will think it unorthodox.&lt;/p&gt;
&lt;h2&gt;A different perspective&lt;/h2&gt;
&lt;p&gt;After standup the team has a short sharing session on designs for the stories they are working on. You pitch the use of client generated IDs. Although not something the rest of the team has heard of, the name kind of gives it away, and the team balks at the idea.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;IDs should be generated on the server!&amp;quot;&lt;/em&gt; Why? We already use UUIDs generated in our code. Does it matter where this is generated?&lt;br /&gt;
&lt;em&gt;&amp;quot;It&apos;s a security risk!&amp;quot;&lt;/em&gt; Why? It is internal software in our network where we maintain the client and the server.&lt;br /&gt;
&lt;em&gt;&amp;quot;It seems weird!&amp;quot;&lt;/em&gt; Why? From a REST point of view, we are just telling the server to create a resource at a more specific URI.&lt;/p&gt;
&lt;p&gt;Let me explain further.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mermaid-js.github.io/mermaid-live-editor/edit/##eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQ2xpZW50LT4-K0FQSTogQ3JlYXRlIG9yZGVyIHJlcXVlc3Qgd2l0aCBJZFxuICAgIEFQSS0-PkRCIDogRmV0Y2ggc3VwcGxpZXIgaW5mb1xuICAgIEFQSS0-PkRCIDogUGVyc2lzdCByZWNvcmQgd2l0aCBJZCBhbmQgb3V0Ym94XG4gICAgQVBJLS0-Pi1DbGllbnQ6IE9yZGVyIGNyZWF0ZWQgcmVzcG9uc2VcbiAgICBXb3JrZXItPj5EQiA6IEZldGNoIG91dGJveFxuICAgIFdvcmtlci0-PlN1cHBsaWVyIEFQSSA6IFNlbmQgb3JkZXJcbiAgICBXb3JrZXItPj5EQiA6IFVwZGF0ZSBvdXRib3hcbiAgICBsb29wIFBvbGwgZW5kcG9pblxuICAgICAgICBDbGllbnQtPj5BUEk6IENoZWNrIGlmIG9yZGVyIGNyZWF0aW9uIGRvbmVcbiAgICBlbmQiLCJtZXJtYWlkIjoie1xuICBcInRoZW1lXCI6IFwiZGVmYXVsdFwiXG59IiwidXBkYXRlRWRpdG9yIjpmYWxzZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOmZhbHNlfQ&quot;&gt;&lt;img src=&quot;https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQ2xpZW50LT4-K0FQSTogQ3JlYXRlIG9yZGVyIHJlcXVlc3Qgd2l0aCBJZFxuICAgIEFQSS0-PkRCIDogRmV0Y2ggc3VwcGxpZXIgaW5mb1xuICAgIEFQSS0-PkRCIDogUGVyc2lzdCByZWNvcmQgd2l0aCBJZCBhbmQgb3V0Ym94XG4gICAgQVBJLS0-Pi1DbGllbnQ6IE9yZGVyIGNyZWF0ZWQgcmVzcG9uc2VcbiAgICBXb3JrZXItPj5EQiA6IEZldGNoIG91dGJveFxuICAgIFdvcmtlci0-PlN1cHBsaWVyIEFQSSA6IFNlbmQgb3JkZXJcbiAgICBXb3JrZXItPj5EQiA6IFVwZGF0ZSBvdXRib3hcbiAgICBsb29wIFBvbGwgZW5kcG9pbnRcbiAgICAgICAgQ2xpZW50LT4-QVBJOiBDaGVjayBpZiBvcmRlciBjcmVhdGlvbiBkb25lXG4gICAgZW5kIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOmZhbHNlfQ&quot; alt=&quot;Idempotent design&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client will generate a UUID as an identifier (ID) that will represent the Order to be created&lt;/li&gt;
&lt;li&gt;Instead of sending &lt;code&gt;Idempotency-Key&lt;/code&gt; we POST to a unique URI now eg. &lt;code&gt;/orders/1b2e680a-78ce-41f3-8296-63706432f844&lt;/code&gt;. Now we either have a order at a known resource, or we do not.&lt;/li&gt;
&lt;li&gt;When persisting this order, we use the ID sent as a unique identifier in the database. We can use the database to enforce uniqueness so any call to persist an order with the same ID will fail. If the persist was successful, we return &lt;code&gt;202 Accepted&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Have a &lt;code&gt;supplier_requests&lt;/code&gt; table that represent the &lt;a href=&quot;https://devonburriss.me/reliability-with-intents/&quot;&gt;intent&lt;/a&gt; to send the request to the supplier. This is the &lt;a href=&quot;https://microservices.io/patterns/data/transactional-outbox.html&quot;&gt;outbox pattern&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A worker is running in the background that picks up and sends the unsent records from &lt;code&gt;supplier_requests&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Once the worker has completed, it updates the database such that subsequent GET requests to &lt;code&gt;/orders/1b2e680a-78ce-41f3-8296-63706432f844&lt;/code&gt; will return &lt;code&gt;200 OK&lt;/code&gt; instead of &lt;code&gt;202 Accepted&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although the unorthodoxy of generating the ID on the client side seems to bother some people in the team still, they can&apos;t really say why. More importantly, everyone agrees that this design does indeed seem to have the guarantees for resilience that they were aiming at.&lt;/p&gt;
&lt;p&gt;Happy with the design and the buy-in, our developer pairs up with one of the more skeptical team members to implement the design. And finally, they can enable the client retry policies.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-29-11-48-28.png&quot; alt=&quot;Final design&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;As part of the analysis we will go into some implementation details, as well as some possible alternative designs.&lt;/p&gt;
&lt;h3&gt;Client-generated ID vs. Idempotency-Key&lt;/h3&gt;
&lt;p&gt;If a team is uncomfortable using the client-generated ID, continuing to use &lt;code&gt;Idempotency-Key&lt;/code&gt; is a perfectly good solution. In this case you could just insert &lt;code&gt;Idempotency-Key&lt;/code&gt; into another table in the same transaction as the order is inserted into the database. It is important that this is in the same transaction, or you lose the idempotency guarantee. You just need to make sure the column has a uniqueness constraint on it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A note on the primary key: When using client-generated ID you need not use it as the primary key for the Order. By indexing it and placing a uniqueness constraint on it we can use it as a public lookup. We can then use a database incrementing numeric key for the primary key to do joins on. This way your primary key is never exposed. This gives location independence if you needed to make major changes to your database to cope with scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Outbox states&lt;/h3&gt;
&lt;p&gt;I wanted to make a few suggestions for your &lt;code&gt;supplier_requests&lt;/code&gt; implementation. In my &lt;a href=&quot;https://devonburriss.me/reliability-with-intents/&quot;&gt;intents&lt;/a&gt; post I discuss a more generic outbox but I would not make that jump unless you have a lot of different systems you are interacting with in an application.&lt;/p&gt;
&lt;p&gt;Some data to consider keeping on the outbox:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;created_at&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_touch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completed_at&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try_count&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;order_id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few states to keep track of though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pending&lt;/code&gt;: Has not been picked up by a worker (message relay), Sets &lt;code&gt;created_at&lt;/code&gt; &amp;amp; &lt;code&gt;last_touch&lt;/code&gt; column to same value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in-progress&lt;/code&gt;: Has been picked up by a worked but not completed. Updates &lt;code&gt;last_touch&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;failed&lt;/code&gt;: Tried to post to the supplier but either failed with a reason that makes retying risky, or retry count was hit. Updates &lt;code&gt;try_count&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;completed_at&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;completed&lt;/code&gt;: Set if POST to supplier is successful. Updates &lt;code&gt;try_count&lt;/code&gt;, &lt;code&gt;completed_at&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This design assumes all data you need can be fetched from the linked order. The other option is to just keep a serialized payload in the outbox row as a column.&lt;/p&gt;
&lt;h3&gt;Workers&lt;/h3&gt;
&lt;p&gt;The workers that do the actual sending, known as &lt;em&gt;message relays&lt;/em&gt;, need to be singletons so they are not picking up the same outbox message concurrently. This does not mean you can have only one. You could use locking, or more preferable, partitioning where multiple workers process concurrently but over distinct partitions. As a single example you could have 2 workers, 1 processing the outbox for orders with even numbered row number while the other processes odd.&lt;/p&gt;
&lt;h3&gt;A word on cache back-channeling&lt;/h3&gt;
&lt;p&gt;For endpoints where multiple hits to either the POST (unlikely) or the GET (more likely) are going to cause significant load on the database, it can be a good idea to actively populate the cache. This is where the outbox represents the &lt;a href=&quot;https://devonburriss.me/reliability-with-intents/&quot;&gt;intent&lt;/a&gt; of steps in a saga rather than the mere passing on of a single message.&lt;/p&gt;
&lt;p&gt;If for example we expected a high load on &lt;code&gt;GET /orders/1b2e680a-78ce-41f3-8296-63706432f844&lt;/code&gt; our worker could:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;POST to supplier API&lt;/li&gt;
&lt;li&gt;Prepopulate a distributed cache with the order (or response, depending on cache type)&lt;/li&gt;
&lt;li&gt;The unhappy path would be to trigger some sort of rollback or user notification of a failure to complete&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Optimization warning&lt;/h3&gt;
&lt;p&gt;If it is imperative that the endpoint be responding as quickly as possible that the saga has completed, you may be tempted to TRY complete it with the initial request. This gets us back into the concurrency problem where you could have the worker and the API both trying to process the same outbox message. It is possible if you are doing some locking on the database but honestly it just doesn&apos;t seem worth it to me.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It took a while to get there, but our young developer finally got to a robust API design. In this series we looked at a few subtle ways that things can go wrong. These failure modes are often overlooked when developers are used to dealing with low volume loads, but can quickly become an issue if your load grows quickly. We also saw how sometimes business processes can mask system errors and so saw the importance of having good monitoring, metrics, and alerts fo not just the health, but proper operating of our systems.&lt;/p&gt;
&lt;p&gt;The solutions presented in this post assume certain properties from your persistent storage, so it is important to think about how you are handling idempotence when selecting your database technology.&lt;/p&gt;
&lt;p&gt;Finally, this design was really optimizing for resilience and eventual consistency of the system. Sometimes if speed of processing is more important, you may need to sacrifice some reliability. Unfortunately, when you are making those kinds of tradeoffs you are almost by definition dealing with high loads so... it depends.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Duplicate calls&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solutions:&lt;/strong&gt; idempotency via unique key in an atomic commit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequence:&lt;/strong&gt; The database enforces no duplicates&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.techyourchance.com/client-generated-ids-vs-server-generated-ids/&quot;&gt;A very basic discussion of client vs. server IDs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devonburriss.me/reliability-with-intents/&quot;&gt;Flexible design for outbox like saga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tech.trello.com/sync-two-id-problem/&quot;&gt;Interesting discussion of what happens when you can&apos;t use client side IDs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/reliable-apis-part-2/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/reliable-apis-part-2/"/>
    <title>Reliable APIs - Part 2</title>
    <updated>2021-08-23T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/reliable-apis-part-2/</uri>
    </author>
    <summary type="html">&lt;p&gt;In the &lt;a href=&quot;/reliable-apis-part-1&quot;&gt;previous post&lt;/a&gt; we saw how you can end up with duplicates if using a retry-policy on a call to a non-idempotent endpoint. In this post, we will look at correcting this and see a subtle way that this can go wrong.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Posts in this series:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/reliable-apis-part-1&quot;&gt;Exploring reties, retry implications, and the failure modes they are appropriate for&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using Idempotency-Key and a response cache&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/reliable-apis-part-3&quot;&gt;The epic saga of client-side IDs and true idempotence&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we last saw our young developer, they had learned a lesson about the indiscriminate use of retry policy. This led to some insightful telemetry to be able to monitor when the system landed in an inconsistent state.&lt;/p&gt;
&lt;p&gt;A good thing too! The e-commerce company our developer works at is expanding into another country and to cope with the increase in buying across 2 countries, they are automating the restocking. A sister team has been working with the data science team to develop an intelligent resupply service that will be making use of the supplier ordering API to automatically create orders. Currently, inconsistencies only happen once every week or two but with an increase in load, this will start getting even more annoying for both the development team and purchasers. Our young developer has raised that they want to have this fixed and stable before the automation kicks in.&lt;/p&gt;
&lt;p&gt;As a reminder, this is the current design:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-22-10-38-55.png&quot; alt=&quot;Current design&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Let&apos;s see how our young developer is getting along...&lt;/p&gt;
&lt;h2&gt;That idempotence thing&lt;/h2&gt;
&lt;p&gt;So you stopped using XML and SOAP and started sending JSON so you figured you had this REST stuff down. If the last few weeks has taught you anything though it is that there is way more to this API design than the getting started pages on web frameworks tell you. You do recall this idea of &lt;em&gt;idempotent&lt;/em&gt; calls though and this seems like what you are looking for. Searching for solutions, the internet seems to be a dumpster fire of people arguing about whether POST should be idempotent or not. Going to the source and reading the POST section of the &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.3&quot;&gt;RFC&lt;/a&gt; you decide on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Respond with &lt;code&gt;201 Created&lt;/code&gt; if the resource does not exist&lt;/li&gt;
&lt;li&gt;Respond with &lt;code&gt;303 See Other&lt;/code&gt; if the resource already exists&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So apparently a POST can be idempotent. Regardless of the spec, this just seems like a good idea.&lt;/p&gt;
&lt;p&gt;The more difficult question is, how to tell if a request is a duplicate? Apparently, the semantic way to handle this would be to use &lt;a href=&quot;https://tools.ietf.org/id/draft-idempotency-header-01.html&quot;&gt;Idempotency-Key&lt;/a&gt;.&lt;br /&gt;
The &lt;code&gt;Idemptency-Key&lt;/code&gt; is a header you place in a request that indicates a unique request. So for each create order request you send to your API, it will have a unique UUID. Now you can retry a request if it fails, you can retry the request with the same &lt;code&gt;Idemptency-Key&lt;/code&gt; as the failed request.&lt;/p&gt;
&lt;p&gt;For the API our young developer comes up with the following design. The whole team is really excited about adding Redis to their stack as a cache. Not only will it be used as the &lt;code&gt;Idemptency-Key&lt;/code&gt; cache but as a response cache in general.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-23-06-19-59.png&quot; alt=&quot;With cache&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Before servicing a request, the create order endpoint will check to see if the &lt;code&gt;Idemptency-Key&lt;/code&gt; is already in the cache and if it is, it will just return the cached response. If it is not in the cache, it will proceed with the rest of the call and at the end, place the response in the cache.&lt;/p&gt;
&lt;p&gt;Now that the endpoint is idempotent, you go ahead and re-enable that retry policy from the client-side.&lt;/p&gt;
&lt;h2&gt;Not again!&lt;/h2&gt;
&lt;p&gt;The day after deploying your new resiliency changes you get a call from one of the new stock purchasers, Leon. Leon is an older guy who wanted a change from warehousing, an area he had been working for decades. He mentions that he has noticed some inconsistencies but wants to check them with you since he does not know these new systems. You smile to yourself because Leon does not seem very comfortable on the computer. He double clicks everything and types with one finger. Leon brings up the application that shows the purchase orders created on our side. He also brings up the portal they use that shows them incoming deliveries from the supplier. It takes a while but eventually he puts these 2 screens next to each other. There are orders that have been created on our side and do not exist at the supplier. Not only that but duplicates are back!&lt;br /&gt;
Leon points out something else interesting. He noticed that his orders seem to be duplicated far more often than the other purchasers. He is worried he is doing something wrong since he knows he isn&apos;t great at this computer stuff.&lt;br /&gt;
You are pretty sure you know what is wrong and you can&apos;t believe you made this mistake again. You explain to Leon that he does not need to double click the button but assure him that the fault is not his but rather yours. Leon not only found a bug earlier than everyone else but because he had checked at the supplier, he was able to fix the orders before deliveries were sent. Thank you, Leon!&lt;/p&gt;
&lt;h2&gt;Quick fix&lt;/h2&gt;
&lt;p&gt;You are pretty sure you know what is going on. Leon&apos;s double-clicking meant that sometimes a second request was making it into the endpoint before the first call had been completed and was cached. Now that you are thinking through it, the current design hardly adds any value at all from a resilience point of view. You are shocked. Annoyed with yourself because the reason you had not looked at this more critically before was that this was the advice of countless posts and libraries on the internet. Maybe people just don&apos;t make POST requests idempotent? Or the people giving the advice don&apos;t work on distributed systems? Maybe they just don&apos;t have telemetry telling them how often this goes wrong? Looking at yours, it indeed confirms Leon&apos;s findings. Apparently, you need to invest in even better metrics and alerts.&lt;/p&gt;
&lt;p&gt;You implement some quick fixes. Firstly, you disable the retry policy. Again. Next, you add a quick change to the UI that disables the button until a response is received. That should take care of Leon&apos;s double-clicking.&lt;/p&gt;
&lt;p&gt;Back to the drawing board.&lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;So what went wrong with our friend&apos;s design this time? Basically, concurrency makes everything just a little bit more complex. When walking through a sequence of steps in our program it can be difficult to think about what this means for other executions happening at the same time. The kind of bugs that can arise from this can be rather subtle and confusing.&lt;/p&gt;
&lt;p&gt;Here is just one example of 2 requests hitting the endpoint before the cache has been updated.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mermaid-js.github.io/mermaid-live-editor/edit/##eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQ2xpZW50LT4-K0FQSTogQ3JlYXRlIG9yZGVyIHJlcXVlc3QgW29yaWddXG4gICAgQVBJLT4-K0NhY2hlIDogQ2hlY2sgZm9yIElkZW1wb3RlbmN5LUtleSBbb3JpZ11cbiAgICBDYWNoZS0-Pi1BUEkgOiBObyBrZXkgZm91bmQgW29yaWddXG4gICAgQ2xpZW50LT4-QVBJOiBEdXBsaWNhdGUgY3JlYXRlIG9yZGVyIHJlcXVlc3QgW2R1cF1cbiAgICBBUEktPj4rQ2FjaGUgOiBDaGVjayBmb3IgSWRlbXBvdGVuY3ktS2V5IFtkdXBdXG4gICAgQ2FjaGUtPj4tQVBJIDogTm8ga2V5IGZvdW5kIFtkdXBdXG4gICAgQVBJLT4-REIgOiBQZXJzaXN0IHJlY29yZCBbb3JpZ11cbiAgICBBUEktPj5TdXBwbGllciBBUEkgOiBTZW5kIG9yZGVyIFtvcmlnXVxuICAgIEFQSS0-PkRCIDogUGVyc2lzdCByZWNvcmQgW2R1cF1cbiAgICBBUEktPj5TdXBwbGllciBBUEkgOiBTZW5kIG9yZGVyIFtkdXBdXG4gICAgQVBJLT4-Q2FjaGUgOiBVcGRhdGUgY2FjaGUgW29yaWddXG4gICAgQVBJLT4-Q2FjaGUgIDogVXBkYXRlIGNhY2hlIFtkdXBdXG4gICAgQVBJLS0-PkNsaWVudDogT3JkZXIgY3JlYXRlZCByZXNwb25zZSBbb3JpZ11cbiAgICBBUEktLT4-LUNsaWVudDogT3JkZXIgY3JlYXRlZCByZXNwb25zZSBbZHVwXVxuICAgICIsIm1lcm1haWQiOiJ7XG4gIFwidGhlbWVcIjogXCJkZWZhdWx0XCJcbn0iLCJ1cGRhdGVFZGl0b3IiOmZhbHNlLCJhdXRvU3luYyI6dHJ1ZSwidXBkYXRlRGlhZ3JhbSI6ZmFsc2V9&quot;&gt;&lt;img src=&quot;https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQ2xpZW50LT4-K0FQSTogQ3JlYXRlIG9yZGVyIHJlcXVlc3QgW29yaWddXG4gICAgQVBJLT4-K0NhY2hlIDogQ2hlY2sgZm9yIElkZW1wb3RlbmN5LUtleSBbb3JpZ11cbiAgICBDYWNoZS0-Pi1BUEkgOiBObyBrZXkgZm91bmQgW29yaWddXG4gICAgQ2xpZW50LT4-QVBJOiBEdXBsaWNhdGUgY3JlYXRlIG9yZGVyIHJlcXVlc3QgW2R1cF1cbiAgICBBUEktPj4rQ2FjaGUgOiBDaGVjayBmb3IgSWRlbXBvdGVuY3ktS2V5IFtkdXBdXG4gICAgQ2FjaGUtPj4tQVBJIDogTm8ga2V5IGZvdW5kIFtkdXBdXG4gICAgQVBJLT4-REIgOiBQZXJzaXN0IHJlY29yZCBbb3JpZ11cbiAgICBBUEktPj5TdXBwbGllciBBUEkgOiBTZW5kIG9yZGVyIFtvcmlnXVxuICAgIEFQSS0-PkRCIDogUGVyc2lzdCByZWNvcmQgW2R1cF1cbiAgICBBUEktPj5TdXBwbGllciBBUEkgOiBTZW5kIG9yZGVyIFtkdXBdXG4gICAgQVBJLT4-Q2FjaGUgOiBVcGRhdGUgY2FjaGUgW29yaWddXG4gICAgQVBJLT4-Q2FjaGUgOiBVcGRhdGUgY2FjaGUgW2R1cF1cbiAgICBBUEktLT4-Q2xpZW50OiBPcmRlciBjcmVhdGVkIHJlc3BvbnNlIFtvcmlnXVxuICAgIEFQSS0tPj4tQ2xpZW50OiBPcmRlciBjcmVhdGVkIHJlc3BvbnNlIFtkdXBdXG4gICAgIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOmZhbHNlfQ&quot; alt=&quot;Concurrent requests to cache&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see in the sequence diagram, the first request comes in and then the second. The second check against the cache happens before the first request completes and updates the cache.&lt;/p&gt;
&lt;p&gt;We also still have the problem that a call to the supplier API failing would leave our database in an inconsistent state. Depending on what went wrong we could retry, but what if the process was terminated at that point? A duplicate call could come in again.&lt;br /&gt;
What if we updated the cache before the calls? Well then we could end up with either database or external API call failing and from the outside it seeming like it had succeeded.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This design of cache that is not transactional with state change within the service does not really move us closer to a resilient API design. In the next post, we will finally look at a design that does improve reliability.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Duplicate calls&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solutions:&lt;/strong&gt; idempotency via a response cache&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequence:&lt;/strong&gt; Duplicate calls because cache update is not atomic&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Concurrency is hard&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stripe.com/blog/idempotency&quot;&gt;Stripe blog on Idempotency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://repl.ca/what-is-the-idempotency-key-header/&quot;&gt;Intro to Idempotency-Key header&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/reliable-apis-part-1/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/reliable-apis-part-1/"/>
    <title>Reliable APIs - Part 1</title>
    <updated>2021-08-22T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/reliable-apis-part-1/</uri>
    </author>
    <summary type="html">&lt;p&gt;Resiliency is more than just slapping a retry policy on a client and hoping it can handle transient errors. It is building systems that handle operations that always end in a valid state across the whole system. This does not mean that all operations WILL BE successful. Just that they are always handled in an expected way, every time.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Posts in this series:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exploring reties, retry implications, and the failure modes they are appropriate for&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/reliable-apis-part-2&quot;&gt;Using Idempotency-Key and a response cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/reliable-apis-part-3&quot;&gt;The epic saga of client-side IDs and true idempotence&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To explore this, let&apos;s step into a young developer&apos;s shoes and consider a simple piece of functionality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A stock purchaser is using a system where they look at some analytics on a stock item and decide if they need to purchase more stock and how much. They indicate the quantity on the client application and click the &amp;quot;Order now&amp;quot; button. This sends a POST request to the backend to create an order with the supplier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The naive design&lt;/h2&gt;
&lt;p&gt;For this, you coded up the following. A simple call to a backend API that deserializes the request, checks against some predefined rules and looks up the best supplier, persists the order, and finally sends the purchase order off to the supplier API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-18-06-04-52.png&quot; alt=&quot;Starting design&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Everything seems to be working well. However, while getting some requirements for a new feature a stock purchaser mentions that sometimes ordering fails. They then click the button again and everything seems to work fine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-18-06-14-00.png&quot; alt=&quot;Network errors&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;The naive fix&lt;/h2&gt;
&lt;p&gt;Looking through some logs you notice some HTTP timeouts. You decide to add retry logic to the client in case that call fails. For good measure, you add retry policies to the database calls as well as the external supplier API call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-20-07-35-45.png&quot; alt=&quot;Naive implementation of retry policies&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After a few days, the stock purchasers report that they are indeed no longer getting the error that requires them to resubmit the order.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A few weeks later...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The purchaser contacts you in a panic. The warehouse has reported receiving multiple shipments of the same product, with exactly the same quantity, but as separate shipments. According to the warehouse, this happens now and again but recently the frequency has increased as well as the number of duplicate shipments, with as many as 5 duplicates. 5. Shi!t! that is the exact number as your retry policy!&lt;/p&gt;
&lt;h2&gt;Lesson learned&lt;/h2&gt;
&lt;p&gt;Feeling a bit bad about the trouble you caused for your stakeholder you take a step back and remove the retry policy from the client call and the external supplier API call. You reckon it is safe to leave on the query to get supplier data since that does not change state. The persist seems ok to since the database call succeeds or fails reliably.&lt;/p&gt;
&lt;p&gt;Sufficiently chastened by your mistake, you decide to add some metrics and tracing to the operations. On top of that, you add some alerting on top of failed calls to the supplier API. Lastly, you add some exception handling to failed supplier calls so that the entry in the database is removed. For now, you will just let your stakeholder know when this happens so they can reorder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-22-10-34-49.png&quot; alt=&quot;Retries only on DB&quot; /&gt;&lt;/p&gt;
&lt;p&gt;After a few weeks, it seems your changes are acceptable since this only happens occasionally.&lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;Our young developer learned some important lessons. Let&apos;s go over what happened.&lt;/p&gt;
&lt;p&gt;Firstly, our young developer fell for the first fallacy of distributed systems, ala &lt;em&gt;&amp;quot;The network is reliable&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In my experience, this is a common one for developers to fall into when they are dealing with low volume traffic. The time between failures is long, and if there is a user observing an intermittent failure, they will often just retry.&lt;/p&gt;
&lt;p&gt;Adding a retry policy was a good instinct but unfortunately, it requires your API to have particular characteristics. We will get to these characteristics in later posts but first, let&apos;s look at each step in the operation, and what effect a retry has.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mermaid-js.github.io/mermaid-live-editor/edit/##eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgbG9vcCAxLiBDbGllbnQgQVBJIGNhbGxcbiAgICAgICAgQ2xpZW50LT4-K0FQSTogQ3JlYXRlIG9yZGVyIHJlcXVlc3RcbiAgICAgICAgXG4gICAgICAgIGxvb3AgMi4gRmV0Y2ggZnJvbSBEQlxuICAgICAgICBBUEktPj5EYXRhYmFzZTogRmV0Y2ggc3VwcGxpZXIgZGF0YVxuICAgICAgICBlbmRcbiAgICAgICAgXG4gICAgICAgIGxvb3AgMy4gUGVyc2lzdCB0byBEXG4gICAgICAgIEFQSS0-PkRhdGFiYXNlOiBQZXJzaXN0IE9yZGVyXG4gICAgICAgIGVuZFxuICAgICAgICBcbiAgICAgICAgbG9vcCA0LiBFeHRlcm5hbCBBUEkgY2FsbFxuICAgICAgICBBUEktLT4-U3VwcGxpZXIgQVBJOiBDcmVhdGUgb3JkZXIgYXQgc3VwcGxpZXJcbiAgICAgICAgZW5kXG5cbiAgICAgICAgQVBJLS0-Pi1DbGllbnQ6IE9yZGVyIGNyZWF0ZWQgcmVzcGmplex9uc2VcbiAgICBlbmQiLCJtZXJtYWlkIjoie1xuICBcInRoZW1lXCI6IFwiZGVmYXVsdFwiXG59IiwidXBkYXRlRWRpdG9yIjpmYWxzZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOmZhbHNlfQ&quot;&gt;&lt;img src=&quot;https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgbG9vcCAxLiBDbGllbnQgQVBJIGNhbGxcbiAgICAgICAgQ2xpZW50LT4-K0FQSTogQ3JlYXRlIG9yZGVyIHJlcXVlc3RcbiAgICAgICAgXG4gICAgICAgIGxvb3AgMi4gRmV0Y2ggZnJvbSBEQlxuICAgICAgICBBUEktPj5EYXRhYmFzZTogRmV0Y2ggc3VwcGxpZXIgZGF0YVxuICAgICAgICBlbmRcbiAgICAgICAgXG4gICAgICAgIGxvb3AgMy4gUGVyc2lzdCB0byBEQlxuICAgICAgICBBUEktPj5EYXRhYmFzZTogUGVyc2lzdCBPcmRlclxuICAgICAgICBlbmRcbiAgICAgICAgXG4gICAgICAgIGxvb3AgNC4gRXh0ZXJuYWwgQVBJIGNhbGxcbiAgICAgICAgQVBJLS0-PlN1cHBsaWVyIEFQSTogQ3JlYXRlIG9yZGVyIGF0IHN1cHBsaWVyXG4gICAgICAgIGVuZFxuXG4gICAgICAgIEFQSS0tPj4tQ2xpZW50OiBPcmRlciBjcmVhdGVkIHJlc3BvbnNlXG4gICAgZW5kIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifSwidXBkYXRlRWRpdG9yIjpmYWxzZSwiYXV0b1N5bmMiOnRydWUsInVwZGF0ZURpYWdyYW0iOmZhbHNlfQ&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1. Client API call&lt;/h3&gt;
&lt;p&gt;Putting a retry around the entire operation is problematic because our developer friend was not being very specific about what went wrong. As we will see in the next few paragraphs, a retry may be appropriate or not. In part 2 of this series of posts, we will start to make our API endpoint idempotent. As we will see then, even that is more difficult than it seems at first glance.&lt;/p&gt;
&lt;p&gt;What are some of the failure modes the client can experience calling the API though?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The URI for the endpoint is wrong. Retries will not help here.&lt;/li&gt;
&lt;li&gt;The client sends a bad request. No amount of retries will help.&lt;/li&gt;
&lt;li&gt;The service is not up. Retries may help if it comes up in a timely fashion.&lt;/li&gt;
&lt;li&gt;The service takes too long to respond and the request times out. A retry may not be appropriate since we do not know if the request was processed. It also may exacerbate high load if that is why the service took too long.&lt;/li&gt;
&lt;li&gt;The service errors for an unknown reason. A retry may or may not be appropriate.&lt;/li&gt;
&lt;li&gt;The service dies mid-request. We don&apos;t know how far the processing of the request got, so a retry may not be appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s drill into the various steps that occur due to the API call and see what can go wrong.&lt;/p&gt;
&lt;h3&gt;2. Fetch from DB&lt;/h3&gt;
&lt;p&gt;The fetching of supplier data from the database is the easiest. If this fails we cannot continue.&lt;br /&gt;
A nuanced use of HTTP codes and &lt;code&gt;Retry-After&lt;/code&gt; header could allow you to easily indicate to the client that they could retry too.&lt;br /&gt;
Since this call changes no state, we could retry this query if it fails due to intermittent network availability.&lt;/p&gt;
&lt;h3&gt;3. Persist to DB&lt;/h3&gt;
&lt;p&gt;When just considering an atomic database call, we can be fairly confident that the call will succeed or fail in a reliable way.&lt;/p&gt;
&lt;p&gt;Something that is often not taken into account is the process prematurly terminating just before, during, or after a database call. From the outside, these are near impossible to distinguish. Your machine dying or restarting is something you should always try to cater for. Depending on how you are deploying, a deployment could kill a service that is servicing traffic. And given a high enough volume, it is guaranteed that a request will be in the state that a database call has succeeded but the external API call has not yet happened. Solving this problem will be covered later in this series but it is important to note that the client retrying will persist a new record, leaving the current one in an unfinished state where its order was never sent to the supplier.&lt;/p&gt;
&lt;h3&gt;4. External API call&lt;/h3&gt;
&lt;p&gt;The external API call is the most fraught since how it behaves is not under our control. There is almost no failure mode here that would warrant a retry unless the supplier API explicitly responded with a response that indicated we could, such as a &lt;code&gt;503 - Service Unavailable&lt;/code&gt; and the &lt;code&gt;Retry-After&lt;/code&gt; header set. An incorrect endpoint or other &lt;code&gt;4XX&lt;/code&gt; error is not going to be fixed by retrying. Any ambiguous &lt;code&gt;5XX&lt;/code&gt; error response leaves us uncertain about whether we are safe to retry, as retrying may create a duplicate order.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/2021-08-22-10-38-55.png&quot; alt=&quot;Final design&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this post, we looked at some of the ways that different calls can fail, and looked at whether retrying was appropriate. Our developer friend learned some important lessons. The most important improvement was the improved telemetry and alerting to get insight into when the system is ending up in an inconsistent state. Unfortunately, these kinds of failures are a lot more prevalent in systems than most think. The actual problem is that visibility into systems is usually so poor (or no one is looking) that no one is aware of how often these types of errors actually occur. In a lot of cases, other parts of the business just absorb the inconsistency by having mitigating processes.&lt;/p&gt;
&lt;p&gt;The network is not reliable but simply retrying often has unintended consequences. In the &lt;a href=&quot;/reliable-apis-part-2&quot;&gt;next post&lt;/a&gt;, we will start to improve our design so that we can retry with more confidence by trying to make the endpoint idempotent.&lt;/p&gt;
&lt;p&gt;I hope this discussion was insightful. If you think I missed anything important for a discussion at this level, please let me know in the comments.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Transient network errors&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solutions:&lt;/strong&gt; Retry policy on network calls&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Consequence:&lt;/strong&gt; Duplicate calls&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Only retry idempotent operations&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.3&quot;&gt;POST method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7231#section-6.6&quot;&gt;Error Codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/azfunc-prometheus-endpoint/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/azfunc-prometheus-endpoint/"/>
    <title>Capturing custom business metrics in Azure Functions</title>
    <updated>2021-02-01T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/azfunc-prometheus-endpoint/</uri>
    </author>
    <summary type="html">&lt;p&gt;For years now I have noticed a blind-spot when using serverless functions and observability platforms like Datadog. Custom metrics. Observability tools are constantly improving their integrations with cloud providers but are still not on par with having access to the OS like with VMs or containers. In this post I explore a little proof-of-concept I did to get custom metrics out of Azure Functions.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;How it started&lt;/h2&gt;
&lt;p&gt;A couple years back I explored solving this with a &lt;a href=&quot;https://github.com/dburriss/DatadogAzureFunctions&quot;&gt;custom binding&lt;/a&gt; to Datadog but it was a naive implementation that just called Datadog&apos;s HTTP API. About a year ago I had the idea of scraping these metrics using Prometheus but at the time I couldn&apos;t find a library that easily allowed me to &amp;quot;speak Promethean&amp;quot;. The .NET libraries I found didn&apos;t seem to allow you to create or parse Prometheus logs, instead handling things from end-to-end. Usually as middleware.&lt;/p&gt;
&lt;h2&gt;Clearing the path&lt;/h2&gt;
&lt;p&gt;So about 7 months back I created a small library called &lt;a href=&quot;https://github.com/dburriss/fennel&quot;&gt;Fennel&lt;/a&gt; which has a very simple purpose. Parse Prometheus text to objects, and turn these metric objects into valid Prometheus text. This gave me the building block I needed to easily try my experiment.&lt;/p&gt;
&lt;p&gt;You can find my &lt;a href=&quot;/prometheus-parser-fennel&quot;&gt;post on Fennel here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Taking the steps&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2020/azfunc_prom_setup.jpg&quot; alt=&quot;Design for scraping metrics from Azure Functions&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So my idea is fairly simple. In any function that needs to emit metrics, use a Azure Function binding to write them to some store. I chose an Azure Storage Queue for simplicity but I need to post a disclaimer at this point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is demo code hacked together in an evening and does not consider the following very important production quality points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Longer persistence of the metrics&lt;/li&gt;
&lt;li&gt;Multiple consumers of the metrics&lt;/li&gt;
&lt;li&gt;Enforcing ordering if more than 1 function instance is running&lt;/li&gt;
&lt;li&gt;Resilience and sending custom metrics only if state has changed&lt;/li&gt;
&lt;li&gt;This ignores a lot of the more complex things Prometheus exporters do&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code will be available on my &lt;a href=&quot;https://github.com/dburriss/Fennel.MetricsDemo&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a reminder, the Prometheus format is a text based format.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# This is a comment but the following 2 have meaning
# HELP http_requests_total The total number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{method=&amp;quot;post&amp;quot;,code=&amp;quot;200&amp;quot;} 1027 1395066363000
http_requests_total{method=&amp;quot;post&amp;quot;,code=&amp;quot;400&amp;quot;}    3 1395066363000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this demo I have a small function on a timer trigger to emit metrics.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// The builder ensures that a metric has HELP and TYPE information when written to a string
// For implementation: https://github.com/dburriss/Fennel.MetricsDemo/blob/master/Fennel.MetricsDemo/PrometheusLogBuilder.fs
let metricsBuilder = PrometheusLogBuilder()
                        .Define(&amp;quot;sale_count&amp;quot;, MetricType.Counter, &amp;quot;Number of sales that have occurred.&amp;quot;)

// Function for generating some simple metrics
[&amp;lt;FunctionName(&amp;quot;MetricsGenerator&amp;quot;)&amp;gt;]
let metricsGenerator([&amp;lt;TimerTrigger(&amp;quot;*/6 * * * * *&amp;quot;)&amp;gt;]myTimer: TimerInfo, [&amp;lt;Queue(&amp;quot;logs&amp;quot;)&amp;gt;] queue : ICollector&amp;lt;string&amp;gt;, log: ILogger) =
    let msg = sprintf &amp;quot;Generating sales at: %A&amp;quot; DateTime.Now
    log.LogInformation msg
    let sales = Random().Next(0, 50) |&amp;gt; float
    let metric = Line.metric (MetricName &amp;quot;demo_sale_count&amp;quot;) (MetricValue.FloatValue sales) [] (Some(Timestamp DateTimeOffset.UtcNow))

    queue.Add(Line.asString metric)
    log.LogInformation (sprintf &amp;quot;Sales : %f&amp;quot; sales)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It places a Prometheus text representation of a &lt;code&gt;demo_sale_count&lt;/code&gt; event on a queue called &lt;code&gt;logs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, I create a HTTP Azure Function to serve as the &lt;code&gt;/metrics&lt;/code&gt; endpoint to be scraped by Prometheus.  It pulls the messages off the &lt;code&gt;logs&lt;/code&gt; queue and builds up Prometheus text.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[&amp;lt;FunctionName(&amp;quot;metrics&amp;quot;)&amp;gt;]
let metrics ([&amp;lt;HttpTrigger(AuthorizationLevel.Anonymous, &amp;quot;get&amp;quot;, Route = null)&amp;gt;]req: HttpRequest) (log: ILogger) =
    async {
        log.LogInformation(&amp;quot;Fetching prometheus metrics...&amp;quot;)
        // setup queue client
        let queueName = &amp;quot;logs&amp;quot;
        let connectionString = Environment.GetEnvironmentVariable(&amp;quot;AzureWebJobsStorage&amp;quot;, EnvironmentVariableTarget.Process)
        let queueClient = QueueClient(connectionString, queueName)
        
        if queueClient.Exists().Value then
            // receive messages
            let messages = queueClient.ReceiveMessages(Nullable&amp;lt;int&amp;gt;(32), Nullable&amp;lt;TimeSpan&amp;gt;(TimeSpan.FromSeconds(20.))).Value
            log.LogInformation(sprintf &amp;quot;Received %i logs.&amp;quot; messages.Length)
            // return message as text
            let processMessage (msg : QueueMessage) =
                let txt = Encoding.UTF8.GetString(Convert.FromBase64String(msg.MessageText))
                queueClient.DeleteMessage(msg.MessageId, msg.PopReceipt) |&amp;gt; ignore
                txt
            let metrics = messages |&amp;gt; Array.map processMessage
            // build up Prometheus text
            let responseTxt = metricsBuilder.Build(metrics)
            
            // return as Prometheus HTTP content
            let response = ContentResult()
            response.Content &amp;lt;- responseTxt
            response.ContentType &amp;lt;- &amp;quot;text/plain; version=0.0.4&amp;quot;
            response.StatusCode &amp;lt;- Nullable&amp;lt;int&amp;gt;(200)
            return response :&amp;gt; IActionResult
        else return NoContentResult() :&amp;gt; IActionResult
        
    } |&amp;gt; Async.StartAsTask
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing too interesting here other than the &lt;code&gt;ContentType&lt;/code&gt; being &amp;quot;text/plain; version=0.0.4&amp;quot; as per Prometheus specification.&lt;/p&gt;
&lt;h2&gt;How it&apos;s going&lt;/h2&gt;
&lt;p&gt;Having the metrics endpoint up, all that is left is to &lt;a href=&quot;/local-prometheus-setup&quot;&gt;setup a local Prometheus instance&lt;/a&gt; to call our Azure Function.&lt;/p&gt;
&lt;p&gt;Looking at Prometheus&apos; UI at &lt;code&gt;http://localhost:9090/graph&lt;/code&gt; we can query for &lt;code&gt;sale_count&lt;/code&gt; and we can see the metrics are coming in:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2020/prometheus_sale_count.png&quot; alt=&quot;Prometheus graph&quot; /&gt;&lt;/p&gt;
&lt;p&gt;At work we use Datadog and it turns out the &lt;a href=&quot;https://www.datadoghq.com/blog/monitor-prometheus-metrics/&quot;&gt;Datadog agent has support for scraping a Prometheus endpoint&lt;/a&gt;. Once we have the &lt;a href=&quot;/prometheus-datadog-agent&quot;&gt;Datadog agent setup&lt;/a&gt; we can see the metrics flowing into Datadog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/azurefunctiongraph.png&quot; alt=&quot;Datadog metric from Prometheus&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a quick proof-of-concept of whether this approach was worth pursuing. I intend to take it further by running this in Azure and have a container with an agent reach out for metrics. It is unfortunate that the workarounds described here are necessary at this point but if we want a view on business metrics, we need to get creative. What I do like about this approach though is that it leverages Azure function bindings as well as Prometheus&apos; scraping model, so not much had to be re-invented here. I am sure in the future we will see better baked in solutions for this but for now we work with what we have.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@_ggleee?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Gleb Lukomets&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/flame?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/prometheus-datadog-agent/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/prometheus-datadog-agent/"/>
    <title>Prometheus Datadog Agent</title>
    <updated>2021-01-31T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/prometheus-datadog-agent/</uri>
    </author>
    <summary type="html">&lt;p&gt;In the &lt;a href=&quot;/local-prometheus-setup&quot;&gt;previous post&lt;/a&gt; we looked at setting up a local Prometheus container to scrape metrics to test the observability setup of an application locally. A lot of companies I have worked with in recent years are using hosted observability solutions like Datadog. Although Datadog is typically a push based collector, a little known feature is that the agent can scrape from a Prometheus endpoint. In this post we will look at a simple setup for this locally.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;To get started you need to have the &lt;a href=&quot;https://docs.datadoghq.com/agent/&quot;&gt;Datadog agent installed&lt;/a&gt;.&lt;br /&gt;
Once you have the agent installed, you will need to edit &lt;em&gt;openmetrics.d/conf.yaml&lt;/em&gt;. On my Mac this is found in &lt;em&gt;/opt/datadog-agent/etc/conf.d/openmetrics.d/conf.yaml&lt;/em&gt;.&lt;br /&gt;
Optionally, you can launch the agent&apos;s Web UI. On my install it is at &lt;a href=&quot;http://127.0.0.1:5002/&quot;&gt;http://127.0.0.1:5002/&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click &lt;strong&gt;Checks &amp;gt; Manage Check Checks&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If &lt;em&gt;openmetrics.d/conf.yaml&lt;/em&gt; is not available, select &lt;strong&gt;Add Check&lt;/strong&gt; from the select box (NOT &lt;em&gt;prometheus.d/conf.yaml&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Configure the yaml value shown below.
You can find the &lt;a href=&quot;https://docs.datadoghq.com/integrations/openmetrics/&quot;&gt;docs here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;init_config:
  ## Every instance is scheduled independent of the others.
  instances:

    ## @param prometheus_url - string - required
    ## The URL where your application metrics are exposed by Prometheus.
    #
  - prometheus_url: http://localhost:7071/api/metrics

    ## @param namespace - string - required
    ## The namespace to be prepended to all metrics.
    #
    namespace: azure.functions

    ## @param metrics - list of strings - required
    ## List of metrics to be fetched from the prometheus endpoint, if there&apos;s a
    ## value it&apos;ll be renamed. This list should contain at least one metric.
    #
    metrics:
      - demo_*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important that you specify which metrics you want to scrape. For this reason it is useful to prefix your metrics with an app name. In the example above I have updated my metrics to all start with &lt;em&gt;demo_&lt;/em&gt;.&lt;br /&gt;
Once done editing the &lt;em&gt;conf.yaml&lt;/em&gt;, restart your Datadog agent.&lt;/p&gt;
&lt;p&gt;Using the Web UI to check that metrics are flowing from your application is useful at this point. The most details can be seen by navigating to &lt;strong&gt;Status &amp;gt; Collector&lt;/strong&gt;. Scroll down until you see the Open Metrics section. Check that metrics sample is increasing (values do not update without a refresh).&lt;/p&gt;
&lt;p&gt;Once values are flowing to Datadog, you can go and view them in Datadog.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2021/azurefunctiongraph.png&quot; alt=&quot;sale demo graph&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Datadog allows you to have a mix of push and pull metrics if you have applications that were built with different strategies. This is a really nice touch rather than having different places where applications are monitored. In my next post I will be showing how you can use this to monitor custom events in Azure Functions from Datadog.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/local-prometheus-setup/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/local-prometheus-setup/"/>
    <title>Local Prometheus setup</title>
    <updated>2021-01-30T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/local-prometheus-setup/</uri>
    </author>
    <summary type="html">&lt;p&gt;It is useful to have a local Prometheus instance running to test the instrumentation of your application. If you are running the application on your machine, you need to make sure the Prometheus container can talk to the host machine. This is a short post detailing this setup.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Firstly, let&apos;s create a Prometheus configuration with the needed &lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config&quot;&gt;scrape config&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# A list of scrape configurations.
scrape_configs:
  # The job name assigned to scraped metrics by default.
  - job_name: &apos;fennel-metricsdemo&apos;

    # How frequently to scrape targets from this job.
    scrape_interval: 5s
    
    # The HTTP resource path on which to fetch metrics from targets.
    metrics_path: &amp;quot;/api/metrics&amp;quot;

    # List of labeled statically configured targets for this job.
    static_configs:
      # The targets specified by the static config.
      - targets: [&apos;host.docker.internal:7071&apos;]
        # Labels assigned to all metrics scraped from the targets.
        labels:
          app: &apos;demo-app&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we are running this locally, you need to target your local machine. With Docker on Mac I had to target &lt;code&gt;host.docker.internal&lt;/code&gt; and my application (an Azure Function) is running locally on port 7071.&lt;/p&gt;
&lt;p&gt;Now that we have our configuration, we can use this to start our Docker container, mounting the configuration as a volume.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -it -p 9090:9090 -v /path/to/your/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Prometheus should now be up and running and if your application is emitting metrics, you can go see them by navigating to http://localhost:9090/graph.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2020/prometheus_sale_count.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I will be making use of this in an upcoming post I plan to release soon. In my &lt;a href=&quot;/prometheus-datadog-agent&quot;&gt;next post&lt;/a&gt; though I will look at using Datadog instead of a Prometheus server. I hope you find this useful.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@_ggleee?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Gleb Lukomets&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/flame?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/meaning-of-meditation/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/meaning-of-meditation/"/>
    <title>The meaning of meditation</title>
    <updated>2021-01-09T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/meaning-of-meditation/</uri>
    </author>
    <summary type="html">&lt;h2&gt;Skills of meditation&lt;/h2&gt;
&lt;p&gt;Meditation. Often described as clearing your mind. Following your breath. Relaxing. Although the most common descriptions, they are the least interesting activities of meditation. They do not capture the rich depth of the techniques that can be found in the many contemplative traditions throughout history. During this weird time of a global pandemic, I believe these techniques can be especially helpful.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;A clarifying analogue for meditation is that of physical exercise. One way of comparing exercises is by their discipline. Weightlifting vs running, yoga vs cross-fit. If you are looking for what the benefits are from these exercises, the style is less important than the specific exercises you do within them. All of these styles can be good for you but doing the exercises from each that give the biggest boost to your physical fitness is the best way of approaching them.
Meditation is the same. When comparing the different styles of meditation, the common theme is living a good life. What exactly a good life is can differ between them but this just gives us a buffet of techniques to choose from while trying to improve our own lives.&lt;/p&gt;
&lt;p&gt;Let&apos;s look at some of the &amp;quot;mental muscles&amp;quot; you may want to target and how these techniques developed over thousands of years can help. At this point I want to say, I will be providing examples from meditation traditions I am more familiar with. This is not to say other traditions do no have techniques for cultivating your thoughts in similar ways. I prefer to stick to subjects I have personal experience with.&lt;/p&gt;
&lt;p&gt;I came to meditation in a rather round-about way. Around 2009 I was running 60+ km a week. I heard about some Tai Chi classes nearby and thought I would try it out as a kind of cross-training for my legs that didn&apos;t cause so much injury. Although the Taoist Tai Chi and Kung Fu school had its form of meditation, my teacher also taught mindfulness. She encouraged me to try it and was always willing to talk about my experience and give pointers. Mindfulness appealed to me as it made no esoteric claims about the universe like Taoism did.&lt;/p&gt;
&lt;p&gt;My formal meditation practice was an on-and-off affair for the next few years. I would have a good run for a few weeks or months, then get busy and stop. Then I would get stressed, and go back to it, seeking relief. And looking back at it I had a very different view on it than I do now. No matter the level of understanding though, meditation has something to offer.&lt;/p&gt;
&lt;p&gt;Then in 2014, I moved to a new city. I not only left my friends, family, and fiance behind; I left my faith. I had grown up in a religious home and had believed my whole life but years of asking questions had led me to an answer. I could no longer believe without sufficient evidence. As chance would have it, I decided to listen to a lecture series on meditation on the 9-hour drive to my new life. To live a good life without faith.&lt;/p&gt;
&lt;h3&gt;Reducing suffering&lt;/h3&gt;
&lt;p&gt;I think we can all agree that a good place to start with living a good life is by reducing suffering. The word suffering can be misleading because everyone has their understanding of it. Suffering can be the mental, emotional, or physical anguish that occurs from traumatic events in your life. It can be from well-known sources like stress. Another lesser-acknowledged source is from change. Everything changes and holding on to anything can be an exercise in futility, and a source of great suffering. In 2014 I learned how change can cause suffering. That too was impermanent though, for I finally cultivated the habit of meditation.&lt;/p&gt;
&lt;p&gt;One way that formal meditation helps alleviate suffering is by training you to recognise when you are lost in thought. We all know that feeling of remaining angry because you replay in your mind how someone wronged you. The technique often referred to as Mindfulness is the practice of observing a thought, and then bringing attention back to something like the breath. The breath is an easy object to focus on though because it is always with you. Once you are comfortable with the practice, anything can be an object of focus, even thoughts themselves.
A common misconception of meditation is that you are trying to keep your mind free of thought. The real benefit is that each time you recognise a thought, you get to do a &amp;quot;rep&amp;quot; and practice letting go of that thought. This is the practice. Notice the distraction and let it fade away. We cannot in-fact control our thoughts, we can only control where we place our attention.&lt;/p&gt;
&lt;p&gt;Epictetus, a well known Stoic philosopher, summarised the source of our suffering well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;What upsets people is not things themselves, but their judgements about these things&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea Epictetus is putting forth here is also a core theme in Buddhism. That we suffer because we cling to things. Both the Stoics and Buddhists are often maligned on this point. Accused of not caring. The key point here is that clinging to things, good or bad, will cause suffering because everything is impermanent and we are shaped by what we place our attention on.&lt;/p&gt;
&lt;p&gt;And these are the types of meditations of the Stoics. They do not sit and breathe but instead meditate on the wisdom passed down to them, and their thoughts. They visualise how they want to approach situations with wisdom and courage.
One example of a Stoic practice is described by Seneca:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Set aside a certain number of days during which you shall be content with the scantiest and cheapest fare, with a coarse and rough dress, saying to yourself the while, ‘Is this the condition that I feared?&amp;quot;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Many people fear losing everything, or not having every need met. By putting yourself in the situation and reflecting on it, the fear will often dissipate.
This brings me to one last example of a fear that many have. Fear of dying. There is a technique in some Buddhist traditions called Corpse meditation. Even back in South Africa, I could not find a corpse so I had to content myself with imagining myself dead and slowly decaying. Although it seems macabre, it familiarises you with death in a way that reduces the unknown, and so also the fear.
In my apartment in 2014, confronted really for the first time by my mortality, this practice was invaluable. I can attest to its effectiveness.
This practice has another benefit which I will touch on later.&lt;/p&gt;
&lt;p&gt;I will end this section with an amusing story.
A General of an army conquers a town and then hears about a Zen master who lives nearby. The General goes to the Zen master and on not being afforded the reverence he feels he deserves, his anger rises and he draws his sword. &lt;em&gt;&amp;quot;Do you not realise you stand before a man who could run you through with this sword without blinking an eye?&amp;quot;&lt;/em&gt; shouts the self-important General. Unperturbed, the Zen master responds, &lt;em&gt;&amp;quot;Do you not realise you are standing before a man who could be run through without blinking an eye?&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Being kind to others&lt;/h3&gt;
&lt;p&gt;A common theme of philosophies that are serious about how to live well is that of treating others well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Call to mind the doctrine that rational creatures have come into the world for the sake of one another, and that tolerance is a part of justice&amp;quot; - Marcus Aurelius&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In Buddhism, there is a technique for actively cultivating feelings of compassion for yourself and the world around you. It is the practice of Metta, otherwise known as loving-kindness. In this practice, you generate a feeling of compassion. You start with those you already have this feeling for and wish them happiness, freedom from suffering, and fulfilment in life. You then expand that to others. This may feel awkward initially but recall that our thoughts about people are just running through neural pathways. Reinforcing these pathways in positive ways can lead to new ways of thinking and feeling.&lt;/p&gt;
&lt;p&gt;While in lockdown, this can be an enriching technique to apply to keep your sense of connection with others and may inspire you to reach out to people you might otherwise not.&lt;/p&gt;
&lt;h3&gt;Finding meaning&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Meditate often on the interconnectedness and mutual interdependence of all things in the universe. For in a sense, all things are mutually woven together and therefore have an affinity for each other.&amp;quot; - Marcus Aurelius&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are social animals, even the more introverted ones like myself. The richness of experience is not only determined by our actions but who we share those actions with. This is easy to take for granted until you are thrust into isolation by the world being in the grip of a pandemic.&lt;/p&gt;
&lt;p&gt;If you can, get out into open spaces. Walk around and greet any stranger you can (from a distance). Be mindful during these times and be thankful for the things you can do, the people you see, and the occasional smile you get back. This simple practice has made a huge difference for me during this pandemic and I am grateful for the possibility to move around.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;All you need are these: certainty of judgment in the present moment; action for the common good in the present moment; and an attitude of gratitude in the present moment for anything that comes your way.&amp;quot; - Marcus Aurelius&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Developing a practice of being thankful daily for every little thing you can muster will provide a bulwark against the bad things that come your way.&lt;/p&gt;
&lt;p&gt;I said I would come back to the meditation on death. By considering that any day could be your last, it can bring into focus what is important and what your energy should be spent on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Let us prepare our minds as if we’d come to the very end of life. Let us postpone nothing. Let us balance life’s books each day. The one who puts the finishing touches on their life each day is never short of time.” - Seneca&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With our options of things to do drastically diminished these days, it is easy to fritter away our time on things of little substance. Instead of visiting friends and family, we scroll endlessly on social media. Rather than go to the gym, we binge-watch shows.
Not only can meditating on your own mortality make you more cognizant of what you are spending your time on, it can help you to appreciate the moment.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I hope I have convinced you that there is more to meditation than following the next breath. To be clear, this practice of Mindfulness is an important part of the whole. It provides the foundation of focus and awareness of distraction that is critical for many other techniques.&lt;/p&gt;
&lt;p&gt;Taking that foundation and layering other practices from other traditions can provide a holistic collection of techniques that add practical knowledge. This knowledge can be honed into practical skills.&lt;/p&gt;
&lt;p&gt;One last thing. Just like the fear of death can be lessened by analysis of it, so the journey toward happiness is an analysis of your mind. The more you observe how it works, the more you can steer it towards your goals.&lt;/p&gt;
&lt;p&gt;Once you have control, only then can you decide where to go.&lt;/p&gt;
&lt;h3&gt;Further reading&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://dailystoic.com/&quot;&gt;Daily Stoic&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://samharris.org/how-to-meditate/&quot;&gt;Waking Up&lt;/a&gt;&lt;br /&gt;
To get started easily there are many apps like Waking Up, Head Space, and 10 Percent Happier that will take you through guided meditations.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@fcornish?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Faye Cornish&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/wisdom?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/prometheus-parser-fennel/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/prometheus-parser-fennel/"/>
    <title>Creating a Prometheus parser: Fennel</title>
    <updated>2020-12-24T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/prometheus-parser-fennel/</uri>
    </author>
    <summary type="html">&lt;p&gt;A year back I ran into the need for a library that provided a model for creating valid Prometheus log lines. The libraries I looked at sent these metrics for export rather than giving me access to the model or allowing me to create the corresponding log string. I had been wanting to play around with FParsec for a while so this seemed like a perfect opportunity to give it a try.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;This post is part of &lt;a href=&quot;https://sergeytihon.com/2020/10/22/f-advent-calendar-in-english-2020/&quot;&gt;FsAdvent 2020&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The result was a library called &lt;a href=&quot;https://github.com/dburriss/fennel&quot;&gt;Fennel&lt;/a&gt;. It can parse Prometheus text to objects, and turn these metric objects into valid Prometheus text.&lt;/p&gt;
&lt;p&gt;This was my first time using a library to do a custom parser. In the past when I had needed to parse text I had used a state machine and consumed a character at a time. The idea here is that depending on the state, you expect certain characters to follow. See &lt;a href=&quot;https://stackoverflow.com/questions/50896567/fsharp-sequence-processing-with-state/50918243#50918243&quot;&gt;here&lt;/a&gt; for an example. It turns out this is not too different to how you use a library like FParsec.
Although there is a bit of a learning curve, and not many resources outside of the docs, using &lt;a href=&quot;http://www.quanttec.com/fparsec/&quot;&gt;FParsec&lt;/a&gt; was fun. I am sure there are 100 ways I could improve the parser (feedback welcome...preferably be polite) but I am happy with the end result.&lt;/p&gt;
&lt;h2&gt;FParsec&lt;/h2&gt;
&lt;p&gt;This post is not meant to be a tutorial on FParsec but in-case you have never used it, let&apos;s look at some of the things it allows you to do.&lt;/p&gt;
&lt;p&gt;FParsec gives you a boatload of parsers that can be combined to make a new parser. Parser factory functions like &lt;code&gt;satisfy&lt;/code&gt; will give you back a &lt;code&gt;Parser&amp;lt;&amp;gt;&lt;/code&gt; that satisfies the given predicate. The library also gives you some operators. Below &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; means try the first parser, if that fails, try the second.&lt;/p&gt;
&lt;p&gt;The example below also uses &lt;code&gt;manyChar2&lt;/code&gt; which uses the first parser for the first char and then the next for all following chars. In this case, because a Prometheus metric name must start with an ASCII letter or an underscore (not a number).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let underscoreOrColon = satisfy (fun c -&amp;gt; c = &apos;_&apos; || c = &apos;:&apos;)
let ascii_alpha_numeric = (asciiLetter &amp;lt;|&amp;gt; digit)
let pname = manyChars2 (asciiLetter &amp;lt;|&amp;gt; underscoreOrColon) (ascii_alpha_numeric &amp;lt;|&amp;gt; underscoreOrColon)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These parsers can then be combined in other ways. The code below combines the &lt;code&gt;pname&lt;/code&gt; parser with the &amp;quot;zero or more&amp;quot; whitespace parser but because the period is on the left of the &lt;code&gt;.&amp;gt;&amp;gt;&lt;/code&gt; operator it takes only the result of &lt;code&gt;pname&lt;/code&gt; (&lt;code&gt;.&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;.&amp;gt;&amp;gt;.&lt;/code&gt; are available). The &lt;code&gt;|&amp;gt;&amp;gt;&lt;/code&gt; operator returns a parser that takes the result of the parser to the left and applies the function to the right.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let private metric_name = pname.&amp;gt;&amp;gt; ws0 |&amp;gt;&amp;gt; MetricName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just a tiny taste of how you can build up a complex parser from simpler ones. Combining these you can start to build up a grammar for your parsers. Next we look at building this further with our Prometheus parser.&lt;/p&gt;
&lt;h2&gt;Prometheus parser&lt;/h2&gt;
&lt;p&gt;As a reminder, the Prometheus format is a text-based format.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;# This is a comment but the following 2 have meaning
# HELP http_requests_total The total number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{method=&amp;quot;post&amp;quot;,code=&amp;quot;200&amp;quot;} 1027 1395066363000
http_requests_total{method=&amp;quot;post&amp;quot;,code=&amp;quot;400&amp;quot;}    3 1395066363000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read up on the exposition format &lt;a href=&quot;https://prometheus.io/docs/instrumenting/exposition_formats/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The model looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// details and types excluded for brevity
type MetricLine = {
    Name : MetricName
    Labels : Label list
    Value : MetricValue
    Timestamp : Timestamp option
}

type Line =
    | Help of (MetricName*DocString)
    | Comment of string
    | Type of (MetricName*MetricType)
    | Metric of MetricLine
    | Blank
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the full model on &lt;a href=&quot;https://github.com/dburriss/fennel/blob/master/src/Fennel/Model.fs&quot;&gt;the GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any Prometheus log line can be &lt;em&gt;Help&lt;/em&gt; information, a normal &lt;em&gt;comment&lt;/em&gt;, &lt;em&gt;type information&lt;/em&gt;, a metric, or a blank line. From a parsing point of view, I categorize comments, TYPE line, and HELP line all as comments since the &lt;code&gt;#&lt;/code&gt; is a common first character. This is not reflected in the model.&lt;/p&gt;
&lt;p&gt;So let&apos;s break down the Prometheus text and how it relates to the model above.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A line in some Prometheus text can be &lt;em&gt;blank&lt;/em&gt; for a Prometheus log &lt;em&gt;line&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A Prometheus log line can be a &lt;em&gt;comment&lt;/em&gt; or a &lt;em&gt;metric&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A comment can be a just a normal &lt;em&gt;comment&lt;/em&gt;, &lt;em&gt;TYPE&lt;/em&gt; information, or &lt;em&gt;HELP&lt;/em&gt; information&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;metric&lt;/em&gt; requires a &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;value&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;A metric can optionally have &lt;em&gt;labels&lt;/em&gt; and a &lt;em&gt;timestamp&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&apos;s look at a few select parsers and see how they match with our description above. We will focus on the comment line of TYPE and how it fits in.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// TYPE from point 3
let typeLine = (``TYPE``&amp;gt;&amp;gt;.metric_name.&amp;gt;&amp;gt;.metric_type) |&amp;gt;&amp;gt; Line.Type
let comment = comment_prefix &amp;gt;&amp;gt;.ws0 &amp;gt;&amp;gt;.(typeLine &amp;lt;|&amp;gt; helpLine &amp;lt;|&amp;gt; commentLine)
// Point 2
let line = ws0 &amp;gt;&amp;gt;.(comment &amp;lt;|&amp;gt; metric)
// Point 1
ws0 &amp;gt;&amp;gt;.(line &amp;lt;|&amp;gt; emptyLine)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Fennel&lt;/h2&gt;
&lt;p&gt;So that was a little under the hood of Fennel. What does it look like from the outside?&lt;/p&gt;
&lt;p&gt;We can turn Prometheus log text into strongly typed models.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;open Fennel

let input = &amp;quot;&amp;quot;&amp;quot;
# Finally a summary, which has a complex representation, too:
# HELP rpc_duration_seconds A summary of the RPC duration in seconds.
# TYPE rpc_duration_seconds summary
rpc_duration_seconds{quantile=&amp;quot;0.01&amp;quot;} 3102
rpc_duration_seconds{quantile=&amp;quot;0.05&amp;quot;} 3272
rpc_duration_seconds{quantile=&amp;quot;0.5&amp;quot;} 4773
rpc_duration_seconds{quantile=&amp;quot;0.9&amp;quot;} 9001
rpc_duration_seconds{quantile=&amp;quot;0.99&amp;quot;} 76656
rpc_duration_seconds_sum 1.7560473e+07
rpc_duration_seconds_count 2693
&amp;quot;&amp;quot;&amp;quot;

let lines = Prometheus.parseText input
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each of these lines can match a specific line type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;match line with
| Help (name, doc) -&amp;gt; printfn &amp;quot;Help line %A&amp;quot; (name, doc)
| Comment txt -&amp;gt; printfn &amp;quot;Comment line %s&amp;quot; txt
| Type (name, t) -&amp;gt; printfn &amp;quot;Type line %A&amp;quot; (name, t)
| Metric m -&amp;gt; printfn &amp;quot;Metric line %A&amp;quot; m
| Blank -&amp;gt; printfn &amp;quot;Blank line&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can create an object that represents a Prometheus log line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;open Fennel

let prometheusString = Prometheus.metric &amp;quot;http_requests_total&amp;quot; 1027. [(&amp;quot;method&amp;quot;,&amp;quot;post&amp;quot;);(&amp;quot;code&amp;quot;,&amp;quot;200&amp;quot;)] DateTimeOffset.UtcNow
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that was a little peek into creating my first parser.
Have you used FParsec? If not, was this helpful?&lt;br /&gt;
Do you have plenty of experience with it? What can I improve?&lt;br /&gt;
Leave a comment or create an issue or PR on the repo.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Photo by &lt;a href=&quot;https://unsplash.com/@_ggleee?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Gleb Lukomets&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/flame?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/converting-fsharp-csharp/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/converting-fsharp-csharp/"/>
    <title>Converting between F# and C# types</title>
    <updated>2020-05-05T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/converting-fsharp-csharp/</uri>
    </author>
    <summary type="html">&lt;p&gt;Every now and again in F# you run into needing to convert a &lt;code&gt;Seq&lt;/code&gt; to something like &lt;code&gt;IList&amp;lt;&amp;gt;&lt;/code&gt;. Depending on how often you do this, and if you are like me, you will need to search for this or try different things for longer than you would care to admit. So if nothing else, here I am capturing for myself how to tackle some of these conversions.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;For the sake of this post being a reference post, I am going to post this class which captures a lot of the conversions. Here I try and capture the C# type as the type most closely related to an F# type, if that makes sense. In most cases, this is an &lt;code&gt;&apos;T array&lt;/code&gt;, since this is equivalent to a &lt;code&gt;&apos;T []&lt;/code&gt; array in C#. I do encourage you to read the rest of the article at least once, as I will try break down the types a bit so in the future it should be easier to figure out the conversions yourself.&lt;/p&gt;
&lt;p&gt;For many of these, you will need to convert to &lt;code&gt;seq&lt;/code&gt; and then to the F# type you want to work with. If that is not acceptable perhaps do it yourself with a loop.&lt;/p&gt;
&lt;!-- | From                 | To                 | Conversion                           |
| -------------------- | ------------------ | ------------------------------------ |
| `IEnumerable&lt;int&gt;`   | `int seq`          | alias for                            |
| `List&lt;int&gt;`          | `ResizeArray`      | alias for                            |
| `IEnumerable`        | `seq`              | `Seq.cast`                           |
| `IEnumerable`        | `int array`        | `Seq.cast \|&gt; Seq.toArray`           |
| `IEnumerable`        | `int list`         | `Seq.cast \|&gt; Seq.toList`            |
| `ICollection&lt;int&gt;`   | `int seq`          | `:&gt; seq&lt;_&gt;`                          |
| `IList&lt;int&gt;`         | `int seq`          | `:&gt; seq&lt;_&gt;`                          |
| `int []`             | `int array`        | alias for                            |
| `System.Array`       | `obj seq`          | `System.Linq.Enumerable.OfType&lt;obj&gt;` |
| `seq`/`array`/`list` | `ResizeArray`      | `ResizeArray` ctor                   |
| `int seq`            | `IEnumerable`      | `:&gt; IEnumerable`                     |
| `int array`          | `ICollection&lt;int&gt;` | `:&gt; ICollection&lt;int&gt;`                |
| `ResizeArray`        | `ICollection&lt;int&gt;` | `:&gt; ICollection&lt;int&gt;`                |
| `ResizeArray`        | `IList&lt;int&gt;`       | `:&gt; IList&lt;int&gt;`                      |
| `ResizeArray`        | `int seq`          | `:&gt; seq&lt;_&gt;`                          |
| `ResizeArray`        | `int array`        | `.ToArray()` instance method         |
| `f: unit -&gt; int`     | `Func&lt;int&gt;`        | `Func&lt;int&gt;(f)` ctor                  |
| `Func&lt;int&gt;`          | `unit -&gt; int`      | `fun () -&gt; f.Invoke()`               | --&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;From&lt;/th&gt;
&lt;th&gt;To&lt;/th&gt;
&lt;th&gt;Conversion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IEnumerable&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;alias for&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ResizeArray&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;alias for&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IEnumerable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Seq.cast&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IEnumerable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Seq.cast &amp;#124;&amp;gt; Seq.toArray&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IEnumerable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Seq.cast &amp;#124;&amp;gt; Seq.toList&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ICollection&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&amp;gt; seq&amp;lt;_&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IList&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&amp;gt; seq&amp;lt;_&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int []&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;alias for&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;System.Array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;obj seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;System.Linq.Enumerable.OfType&amp;lt;obj&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;seq&lt;/code&gt;/&lt;code&gt;array&lt;/code&gt;/&lt;code&gt;list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ResizeArray&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ResizeArray&lt;/code&gt; ctor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IEnumerable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&amp;gt; IEnumerable&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ICollection&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&amp;gt; ICollection&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ResizeArray&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ICollection&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&amp;gt; ICollection&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ResizeArray&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IList&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&amp;gt; IList&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ResizeArray&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int seq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:&amp;gt; seq&amp;lt;_&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ResizeArray&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.ToArray()&lt;/code&gt; instance method&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;f: unit -&amp;gt; int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Func&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Func&amp;lt;int&amp;gt;(f)&lt;/code&gt; ctor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Func&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unit -&amp;gt; int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;fun () -&amp;gt; f.Invoke()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;For those that can be cast with &lt;code&gt;:&amp;gt; seq&amp;lt;_&amp;gt;&lt;/code&gt; like &lt;code&gt;ICollection&amp;lt;&amp;gt;&lt;/code&gt; and &lt;code&gt;IList&amp;lt;&amp;gt;&lt;/code&gt; you can use directly with the &lt;code&gt;Seq&lt;/code&gt; module functions like &lt;code&gt;toList&lt;/code&gt;, since those interfaces implement &lt;code&gt;IEnumerable&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// This is for demonstration purposes only
type CSharpyType() =
    // seq&amp;lt;int&amp;gt;
    let mutable enumerableTProp = Seq.empty
    // seq&amp;lt;obj&amp;gt;
    let mutable enumerableProp = Seq.empty
    // int []
    let mutable arrayTProp = Array.empty
    // obj []
    let mutable arrayProp = Array.empty
    // int list
    let mutable listTProp = ResizeArray()
    // int []
    let mutable ilistTProp  = Array.empty
    // int []
    let mutable icollectionTProp = Array.empty
    // unit -&amp;gt; DateTimeOffset
    let mutable dtFun = fun () -&amp;gt; System.DateTimeOffset.UtcNow
    // Convert between expressions: http://www.fssnip.net/ts/title/F-lambda-to-C-LINQ-Expression
    
    member _.IEnumerableTProp 
        with get() : System.Collections.Generic.IEnumerable&amp;lt;int&amp;gt; = enumerableTProp
        and set(v : System.Collections.Generic.IEnumerable&amp;lt;int&amp;gt;) = enumerableTProp &amp;lt;- v 
    
    member _.IEnumerableProp 
        with get() : System.Collections.IEnumerable = enumerableProp :&amp;gt; System.Collections.IEnumerable
        and set(v : System.Collections.IEnumerable ) = enumerableProp &amp;lt;- v |&amp;gt; Seq.cast

    member _.ArrayTProp 
        with get() : int[] = arrayTProp
        and set(v  : int[]) = arrayTProp &amp;lt;- v 

    member _.ArrayProp   
        with get() : System.Array = arrayProp :&amp;gt; System.Array
        and set(v : System.Array) = arrayProp &amp;lt;- v |&amp;gt; System.Linq.Enumerable.OfType&amp;lt;obj&amp;gt; |&amp;gt; Seq.toArray

    member _.ListTProp 
        with get() : System.Collections.Generic.List&amp;lt;int&amp;gt; = listTProp
        and set(v : System.Collections.Generic.List&amp;lt;int&amp;gt;) = listTProp &amp;lt;- v

    member _.ICollectionTProp 
        with get() : System.Collections.Generic.ICollection&amp;lt;int&amp;gt; = icollectionTProp :&amp;gt; System.Collections.Generic.ICollection&amp;lt;int&amp;gt;
        and set(v : System.Collections.Generic.ICollection&amp;lt;int&amp;gt;) = icollectionTProp &amp;lt;- v |&amp;gt; Seq.toArray

    member _.IListTProp 
        with get() : System.Collections.Generic.IList&amp;lt;int&amp;gt; = ilistTProp :&amp;gt; System.Collections.Generic.IList&amp;lt;int&amp;gt;
        and set(v : System.Collections.Generic.IList&amp;lt;int&amp;gt;) = ilistTProp &amp;lt;- v |&amp;gt; Seq.toArray

    member _.FuncProp 
        with get() : System.Func&amp;lt;System.DateTimeOffset&amp;gt; = System.Func&amp;lt;System.DateTimeOffset&amp;gt;(dtFun)
        and set(f : System.Func&amp;lt;System.DateTimeOffset&amp;gt;) = dtFun &amp;lt;- fun () -&amp;gt; f.Invoke()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Breakdown&lt;/h2&gt;
&lt;p&gt;Well done for pushing past just copy pasting the code you need from above. We will go through the F# types and see what interfaces they implement, as well as if they have corresponding types in .NET BCL types.&lt;/p&gt;
&lt;h3&gt;System.Collections.Generic.IEnumerable&amp;lt;_&amp;gt;&lt;/h3&gt;
&lt;p&gt;So as a &lt;code&gt;type&lt;/code&gt;, &lt;a href=&quot;https://github.com/fsharp/fsharp/blob/3bc41f9e10f9abbdc1216e984a98e91aad351cff/src/fsharp/FSharp.Core/prim-types.fs#L3287&quot;&gt;&lt;code&gt;seq&amp;lt;&apos;T&amp;gt;&lt;/code&gt; is an alias for &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt; in FSharp.Core&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// FSharp.Core
type seq&amp;lt;&apos;T&amp;gt; = IEnumerable&amp;lt;&apos;T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are just getting started with F#, you may have noticed that it can be a lot more particular about it&apos;s types than C#. It can be easy to forget that this actually works. You can assign &lt;code&gt;&apos;a list&lt;/code&gt; or &lt;code&gt;&apos;a array&lt;/code&gt; to a &lt;code&gt;seq&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let mutable ss = seq { 1; 2 }
ss &amp;lt;- [1;2]
ss &amp;lt;- [|1;2|]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is because &lt;code&gt;seq&lt;/code&gt; is &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt; and &lt;code&gt;&apos;a list&lt;/code&gt; and &lt;code&gt;&apos;a array&lt;/code&gt; implement &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// FSharp.Core
type List&amp;lt;&apos;T&amp;gt; = 
       | ([])  :                  &apos;T list
       | (::)  : Head: &apos;T * Tail: &apos;T list -&amp;gt; &apos;T list
       interface System.Collections.Generic.IEnumerable&amp;lt;&apos;T&amp;gt;
       interface System.Collections.IEnumerable
       interface System.Collections.Generic.IReadOnlyCollection&amp;lt;&apos;T&amp;gt;
       interface System.Collections.Generic.IReadOnlyList&amp;lt;&apos;T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As it turns out, this gets us a very long way with interacting with C#, since &lt;code&gt;IEnumerable&lt;/code&gt; and &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt; are pretty ubiquitous.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let csharp = CSharpyType()
csharp.IEnumerableTProp &amp;lt;- seq { 0..10 }
csharp.IEnumerableTProp &amp;lt;- [0..10]
csharp.IEnumerableTProp &amp;lt;- [|0..10|]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, working with &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt; in F# is as simple as using &lt;code&gt;seq&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;System.Collections.IEnumerable&lt;/h3&gt;
&lt;p&gt;For working with &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable?view=netcore-3.1&quot;&gt;System.Collections.IEnumerable&lt;/a&gt; we can make use of a function on the &lt;code&gt;Seq&lt;/code&gt; module, &lt;code&gt;Seq.cast&lt;/code&gt;. This takes an &lt;code&gt;System.Collections.IEnumerable&lt;/code&gt; and turns it into a &lt;code&gt;seq&lt;/code&gt;. Now it is in a more natural form for working with in F#.&lt;br /&gt;
In terms of assigning, &lt;code&gt;&apos;a seq&lt;/code&gt;, &lt;code&gt;&apos;a list&lt;/code&gt;, and &lt;code&gt;&apos;a array&lt;/code&gt; can be assigned to it, since they all implement &lt;code&gt;IEnumerable&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let csharp = CSharpyType()
csharp.IEnumerableProp &amp;lt;- seq { 0..10 }
csharp.IEnumerableProp &amp;lt;- [0..10]
csharp.IEnumerableProp &amp;lt;- [|0..10|]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is worth noting we can also just use them in the usual constructs like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;for i in (csharp.IEnumerableProp) do 
    printfn &amp;quot;i: %A&amp;quot; i
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;int []&lt;/h3&gt;
&lt;p&gt;With a typed array, we can just use &lt;code&gt;&apos;T array&lt;/code&gt; &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/arrays&quot;&gt;since they are the same&lt;/a&gt; across F# and the .NET BCL.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let csharp = CSharpyType()
csharp.ArrayTProp &amp;lt;- [|0..10|]
//csharp.ArrayTProp &amp;lt;- seq {0..10} // Compile error: This expression was expected to have type &apos;int []&apos; but here has type &apos;seq&amp;lt;int&amp;gt;&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make use of whatever you need from the &lt;code&gt;Array&lt;/code&gt; module.&lt;/p&gt;
&lt;h3&gt;System.Array&lt;/h3&gt;
&lt;p&gt;The above is still true when using &lt;code&gt;System.Array&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let csharp = CSharpyType()
csharp.ArrayProp &amp;lt;- [|0..10|]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When trying to assign an instance of this type to an F# value you will need to give it a &lt;code&gt;Type&lt;/code&gt;. This can be done using a static method out of &lt;code&gt;Linq&lt;/code&gt; to get us an &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt; ie &lt;code&gt;seq&lt;/code&gt;, like so: &lt;code&gt;arr |&amp;gt; System.Linq.Enumerable.OfType&amp;lt;obj&amp;gt;&lt;/code&gt;. From there you can make use of the functions in the &lt;code&gt;Seq&lt;/code&gt; module.&lt;/p&gt;
&lt;h3&gt;System.Collections.Generic.List&amp;lt;_&amp;gt;&lt;/h3&gt;
&lt;p&gt;It can be confusing initially since &lt;code&gt;list&lt;/code&gt; in F# is not the same as &lt;code&gt;List&amp;lt;&amp;gt;&lt;/code&gt; in C#. The equivalent of a &lt;a href=&quot;https://github.com/fsharp/fsharp/blob/3bc41f9e10f9abbdc1216e984a98e91aad351cff/src/fsharp/FSharp.Core/prim-types.fs#L3129&quot;&gt;C# list in F# is &lt;code&gt;ResizeArray&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// FSharp.Core
type ResizeArray&amp;lt;&apos;T&amp;gt; = System.Collections.Generic.List&amp;lt;&apos;T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can convert F# types to a &lt;code&gt;ResizeArray&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;csharp.ListTProp &amp;lt;- [0..10] |&amp;gt; ResizeArray
csharp.ListTProp &amp;lt;- [|0..10|] |&amp;gt; ResizeArray
csharp.ListTProp &amp;lt;- seq { 0..10 } |&amp;gt; ResizeArray
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course remember that &lt;code&gt;List&amp;lt;&apos;T&amp;gt;&lt;/code&gt; implements &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt; and &lt;code&gt;ICollection&amp;lt;&apos;T&amp;gt;&lt;/code&gt;, which we will look at next.&lt;/p&gt;
&lt;h3&gt;System.Collections.Generic.ICollection&amp;lt;&lt;em&gt;&amp;gt; &amp;amp; IList&amp;lt;&lt;/em&gt;&amp;gt;&lt;/h3&gt;
&lt;p&gt;Remember that &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generics-and-arrays&quot;&gt;array&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netcore-3.1&quot;&gt;&lt;code&gt;List&amp;lt;&apos;T&amp;gt;&lt;/code&gt;&lt;/a&gt; aka &lt;code&gt;ResizeArray&lt;/code&gt; already implement &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ICollection&amp;lt;&apos;T&amp;gt;&lt;/code&gt;, and &lt;code&gt;IList&amp;lt;&apos;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;csharp.ICollectionTProp &amp;lt;- [|0..10|]
csharp.ICollectionTProp &amp;lt;- [|0..10|] |&amp;gt; ResizeArray

csharp.IListTProp &amp;lt;- [|0..10|]
csharp.IListTProp &amp;lt;- [|0..10|] |&amp;gt; ResizeArray
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;ResizeArray&lt;/h3&gt;
&lt;p&gt;One thing you might be left wondering is converting from a ResizeArray, back to more natural F# types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let resizeArr = [0..10] |&amp;gt; ResizeArray
let xs = resizeArr :&amp;gt; seq&amp;lt;_&amp;gt; // Implements IEnumerable&amp;lt;T&amp;gt; so we can just cast
let arr = resizeArr.ToArray() // ResizeArray / List&amp;lt;T&amp;gt; has a `ToArray` method. This is an O(n) activity.
let lst = xs |&amp;gt; Seq.toList // Once we have a seq, we can use Seq functions
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Bonus: System.Func&amp;lt;_&amp;gt;&lt;/h3&gt;
&lt;p&gt;Another kind of conversion I often find myself doing when working with C# APIs is with &lt;code&gt;Func&lt;/code&gt; and F# functions. Converting a F# function to a &lt;code&gt;Func&lt;/code&gt; is as simple as passing it into the &lt;code&gt;Func&lt;/code&gt; constructor if need be. We can often simply assign a F# function to a &lt;code&gt;Func&lt;/code&gt; and the compiler will handle that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;csharp.FuncProp &amp;lt;- (fun () -&amp;gt; System.DateTimeOffset.UnixEpoch)
let f = fun () -&amp;gt; csharp.FuncProp.Invoke()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that is my potted run through of converting between F# and C# types. This was meant to be more of a reference than a post that teaches or tells a story so I hope the lack of continuity was not too off-putting.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/reliability-with-intents/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/reliability-with-intents/"/>
    <title>Reliability with Intents</title>
    <updated>2019-12-05T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/reliability-with-intents/</uri>
    </author>
    <summary type="html">&lt;p&gt;If you are using any kind of messaging architecture to notify outside of your system of internal changes you may have noticed a reliability problem. Unless you are using distributed transactions to ensure atomic operations you may have noticed an ordering problem in updating state and notifying the rest of the world. In this post, I will look at this problem and a possible solution.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;This post is part of &lt;a href=&quot;https://sergeytihon.com/2019/11/05/f-advent-calendar-in-english-2019/&quot;&gt;#FsAdvent 2019&lt;/a&gt;. PS. THIS IS NOT PRODUCTION WORTHY CODE! FOR DEMO PURPOSES ONLY!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;UPDATE: Posting this on Twitter yielded that I had, as I expected, uncovered an existing pattern. With the example I show here it is basically the Transactional outbox. I will say that the pattern I show here can function more like a local orchestrator that forms part of an choreography-based saga.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The atomic problem&lt;/h2&gt;
&lt;p&gt;Oft times when doing an operation in an application, I see a call to put some kind of message on a queue (or topic) to notify other systems that this event occurred.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// save to database
// it could then fail
// put on queue
person
|&amp;gt; Data.createPerson dbConnection None
|&amp;gt; tap (fun _ -&amp;gt; failwith &amp;quot;Failed before sending message&amp;quot;) // &amp;lt;-- simulate application crash
|&amp;gt; Result.bind (Message.personCreated queue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What happens though if the application crashes right after saving some changes to the database? Your application has changed state but has not, and will not, notify the rest of the world about that change. What if other business processes rely on this?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2019/intents-1.png&quot; alt=&quot;persist state then send&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are thinking that the chances of this happening are vanishingly small, let me float this idea. A 99.99% uptime still means almost an hour of downtime a year. On a high load system in the cloud (chaos monkey as a service), systems can disappear more often than you think.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have seen businesses be unaware of this communication loss for months, where the result is customer service calls routed to teams dependent on that message. The problem here is both assume every message is sent, never considering the loss. Only once these numbers were monitored did the problem become apparent.&lt;/p&gt;
&lt;p&gt;So back to the problem. Of course, reversing the order does not help.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2019/intents-2.png&quot; alt=&quot;send then persist state&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now you are notifying the world about a change that never happened.&lt;/p&gt;
&lt;h2&gt;What is your intention?&lt;/h2&gt;
&lt;p&gt;I will mention a few more sophisticated variations in the conclusion but the solution is fairly simple. Separate the intention of sending the notification from the actual sending.&lt;/p&gt;
&lt;p&gt;F# discriminated unions give a nice way to define our intention, as it is a state machine.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// domain type
type Person = {
 id:string
 name:string
 email:string
}

// Here the type of case could be the entity, command, or the message to be sent. 
// Whatever makes the most sense.
type IntentOfPersonCreated = 
| Pending of Person
| Complete of Person
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then save the intention to send the message in a transaction with the state change that is prompting the notification.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// save to database with intent
// intent puts on queue
use transaction = dbConnection.BeginTransaction()
let txn = Some transaction

person 
|&amp;gt; Data.createPerson dbConnection txn
|&amp;gt; Result.map (fun p -&amp;gt; Data.createPersonIntent dbConnection txn (Pending p))

transaction.Commit()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&apos;t get too hung up on what this code is doing. The important part here is that &lt;code&gt;createPerson&lt;/code&gt; and &lt;code&gt;createPersonIntent&lt;/code&gt; are both called using the same transaction.&lt;/p&gt;
&lt;p&gt;Finally, you need to process all persisted intents.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let handleIntent connection queue (id,intent) =
    // handle each state of the intent
    match intent with
    | Pending person -&amp;gt; 
        Message.personCreated queue person |&amp;gt; ignore
        Data.markCreatePersonIntentDone connection id (Complete person) |&amp;gt; ignore
        printfn &amp;quot;%A intent sent&amp;quot; person
    | Complete _ -&amp;gt; failwith &amp;quot;These should not be queried&amp;quot;
 

let processIntents (dbConnection:DbConnection) queue =
    let intentsR = Data.getCreatePersonIntents dbConnection
    match intentsR with
    | Error ex -&amp;gt; raise ex
    | Ok intents -&amp;gt; intents |&amp;gt; Seq.iter (handleIntent dbConnection queue)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the state changes in &lt;code&gt;handleIntent&lt;/code&gt; where the message is sent and the new state of the &lt;strong&gt;intent&lt;/strong&gt; is persisted back. If you expanded the states that these can land in, you could potentially move through multiple states. This would allow for a kind of local orchestrator, in a choreography-based saga.&lt;/p&gt;
&lt;p&gt;Now as long as you have a process that is regularly running through and processing the &lt;strong&gt;intents&lt;/strong&gt;, you can guarantee that as soon as all infrastructure is healthy, all notifications will be sent at least once.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2019/intents-3.png&quot; alt=&quot;transactional persistence of state and intention&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Implementation ideas&lt;/h2&gt;
&lt;p&gt;All the DEMO code is &lt;a href=&quot;https://github.com/dburriss/intent-blog&quot;&gt;available on my GitHub&lt;/a&gt; but I wanted to talk about a few implementation details and what you may want to do differently.&lt;/p&gt;
&lt;p&gt;This is the table I am storing the &lt;strong&gt;intents&lt;/strong&gt; in.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE IF NOT EXISTS intents (
 id INTEGER PRIMARY KEY AUTOINCREMENT,
 iscomplete INTEGER NOT NULL DEFAULT 0,
 intenttype TEXT NOT NULL,
 intent BLOB NOT NULL
);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;I am using &lt;code&gt;iscomplete&lt;/code&gt; to filter out the &lt;strong&gt;intents&lt;/strong&gt; I no longer need to process.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intenttype&lt;/code&gt; allows me to use this table for multiple &lt;strong&gt;intents&lt;/strong&gt; and treat each differently.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intent&lt;/code&gt; is a JSON string of the serialized &lt;strong&gt;intent&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For production, you will likely want to add some indexes. Another thought I had was a partition key that could be used to process the intents from multiple consumers. This way you could scale out consumers even if the order was important for related &lt;strong&gt;intents&lt;/strong&gt;, with a consumer per partition key.&lt;/p&gt;
&lt;p&gt;You can check out the usage of this on the &lt;a href=&quot;https://github.com/dburriss/intent-blog&quot;&gt;GitHub&lt;/a&gt; repository, specifically &lt;code&gt;Data.fs&lt;/code&gt; but the following code should give a sufficient peek under the hood to get you going.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let createIntent (connection:#DbConnection) (transaction:#DbTransaction option) (intent:string) (type&apos;:string)=
    let data = [(&amp;quot;@intent&amp;quot;,box intent);(&amp;quot;@intenttype&amp;quot;,box type&apos;)] |&amp;gt; dict |&amp;gt; fun d -&amp;gt; DynamicParameters(d)
    let sql = &amp;quot;INSERT INTO intents (intent,intenttype) VALUES (@intent,@intenttype);&amp;quot;
    execute connection sql data transaction

let createPersonIntent (connection:#DbConnection) (transaction:#DbTransaction option) (intent:IntentOfPersonCreated) =
    let intent&apos; = intent |&amp;gt; JsonConvert.SerializeObject
    createIntent connection transaction intent&apos; &amp;quot;create-person&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Of course, increasing the reliability of your system comes at the cost of a bit of added complexity, as well as a latency penalty for the outgoing notifications. I will say that on top of the reliability increase, you also get a fairly good audit log without having moved to Event Sourcing (no I am not saying auditing alone is a good reason to do ES).&lt;/p&gt;
&lt;p&gt;Another useful design choice that is related here is collecting events as your code executes. If you are using a functional style of programming, always returning events is the way to go. If you are using a more imperative style using classic DDD techniques, an aggregate root is a good place to accumulate these events. Erik Heemskerk and myself worked together and he has a great &lt;a href=&quot;https://www.erikheemskerk.nl/ddd-persistence-recorded-event-driven-persistence/&quot;&gt;post describing this technique&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did want to acknowledge that the processing of the intents does have some challenges that I have not covered in this post. You want to try to avoid having multiple workers pulling the same kind of &lt;strong&gt;intents&lt;/strong&gt; or the number of duplicate messages will explode. Since EXACTLY ONCE message delivery using a push mechanism is a pipe dream, you need to cater for duplicate messages. Having a single instance processing means it can easily go down, so monitoring and restarts are important for the health of your system. A product like &lt;a href=&quot;https://www.hangfire.io/&quot;&gt;Hangfire&lt;/a&gt; may be useful here, or scheduled serverless functions. Your mileage may vary.&lt;/p&gt;
&lt;p&gt;Finally, I did want to also point out a &lt;a href=&quot;https://www.youtube.com/watch?v=FkDZw9HmwQY&amp;amp;list=FLtCKfk3-Xz9K1kCkvT_v6aQ&quot;&gt;great talk of Erik&apos;s&lt;/a&gt; where he talks about turning this around so consumers come get the events from you. If you want to send out notifications you can write the consumer of your event feed that then notifies... or just tell people to come and fetch and be done with all this headache.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://microservices.io/patterns/data/saga.html&quot;&gt;Saga pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://microservices.io/patterns/data/transactional-outbox.html&quot;&gt;Transactional Outbox&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Photo by Jens Lelie on &lt;a href=&quot;https://unsplash.com/photos/u0vgcIOQG08&quot;&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/canopy-from-fsx/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/canopy-from-fsx/"/>
    <title>Canopy from a FSX Script</title>
    <updated>2018-12-15T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/canopy-from-fsx/</uri>
    </author>
    <summary type="html">&lt;p&gt;Recently I found myself doing a very repetitive task that entailed copying values one at a time off a page, navigating to the next page, then repeat. I would spend 2 hours automating 1 hour of work if said work is sufficiently boring, even if I may never need the automation again. I enjoy coding, I do not enjoy copy-pasting. So I wondered if it was even possible to run Canopy in an F# FSX script file. It turns out it is.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;F# Scripting&lt;/h2&gt;
&lt;p&gt;In case you are new to F# let us briefly touch on what a FSX file is. F# code can be placed into &lt;code&gt;.fs&lt;/code&gt; files in a project and compiled to DLLs. This is how you would write a console application, Windows Service, or a Web Application. Another option that is great for experimenting is using &lt;code&gt;.fsx&lt;/code&gt; files (and nowadays C# as well with .csx). These are F# scripting file that allow you to run as a standalone script using &lt;strong&gt;FSI&lt;/strong&gt; (FSharp Interactive).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;fsi .\basic.fsx 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This requires &lt;code&gt;Fsi.exe&lt;/code&gt; be on your &lt;strong&gt;PATH&lt;/strong&gt;. For more information see &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/fsharp-interactive/&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Worth mentioning is &lt;a href=&quot;http://ionide.io/&quot;&gt;Ionide Project&apos;s&lt;/a&gt; great support for running script files, as well as working with &lt;a href=&quot;https://fsprojects.github.io/Paket/&quot;&gt;PAKET&lt;/a&gt; which we will not go into in detail.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;So the first thing you will need is a way to pull down the necessary Nuget packages. See my article on &lt;a href=&quot;/up-and-running-with-paket&quot;&gt;getting up and running with Paket fast&lt;/a&gt; if you need help setting up Paket.&lt;/p&gt;
&lt;p&gt;Here is the TL;DR version:&lt;/p&gt;
&lt;h3&gt;.NET Core 2.1 SDK and later versions&lt;/h3&gt;
&lt;p&gt;You can install it in a specific directory.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet tool install --tool-path &amp;quot;.paket&amp;quot; Paket --add-source https://api.nuget.org/v3/index.json&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;A basic script&lt;/h2&gt;
&lt;p&gt;First we use PAKET to pull down the Nuget package we need.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;source https://www.nuget.org/api/v2
nuget canopy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And run &lt;code&gt;.\.paket\paket.exe install&lt;/code&gt; to download the packages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;#r &amp;quot;packages/Selenium.WebDriver/lib/netstandard2.0/WebDriver.dll&amp;quot;
#r &amp;quot;packages/canopy/lib/netstandard2.0/canopy.dll&amp;quot;

open canopy.classic
open canopy.configuration
open canopy.types

chromeDir &amp;lt;- &amp;quot;C:\\tools\\selenium\\&amp;quot;//or wherever you place your Selenium
start chrome
pin FullScreen

url &amp;quot;https://google.com/&amp;quot;

&amp;quot;[name=q]&amp;quot; &amp;lt;&amp;lt; &amp;quot;Youtube: BGF Red and Blue&amp;quot;
press enter
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;One gotcha I did run across here is that the order of the &lt;code&gt;#r&lt;/code&gt; references here does matter. The &lt;em&gt;WebDriver.dll&lt;/em&gt; is required before &lt;em&gt;canopy.dll&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For more advanced examples see the &lt;a href=&quot;https://github.com/dburriss/CanopyFSX/&quot;&gt;related Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And that is how easy it is to start using Canopy from a FSX file. This is a great way of automating some repetitive web task where an API is not available or exploring interacting with some DOM elements via Canopy in preparation for a UI test. Hope you found this useful. If you have any other use-cases, I would love to hear about them in the comments below.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://lefthandedgoat.github.io/canopy/&quot;&gt;Canopy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/fsharp-interactive/&quot;&gt;FSI Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.seleniumhq.org/download/&quot;&gt;Selenium Download&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/review-fsharp-test-libs/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/review-fsharp-test-libs/"/>
    <title>Review: F# unit testing frameworks and libraries</title>
    <updated>2018-12-08T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/review-fsharp-test-libs/</uri>
    </author>
    <summary type="html">&lt;p&gt;In this post I go through a few of the available assertion libraries and 2 test runners. We will look at running options, assertion style, and the clarity of the error messages.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;This post is part of FsAdvent 2018.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Before we get into reviewing some different options, let me introduce the the libraries and frameworks up for review and the criteria I will be looking at. One criteria you may expect here is speed. I will make some small observations on this at the end but I didn&apos;t see enough difference that I think it should be a factor.&lt;/p&gt;
&lt;h3&gt;Frameworks&lt;/h3&gt;
&lt;p&gt;We will be looking at 2 frameworks: XUnit and Expecto. Some may disagree with me labeling them as frameworks. That is fine but it is useful to distinguish that both have components that allow you to write tests and hand that over to .NET tooling or Visual Studio to then run those tests. This is in contrast to the assertion libraries that are focused on the actual assertion of the outcome of a test.&lt;/p&gt;
&lt;h4&gt;XUnit&lt;/h4&gt;
&lt;p&gt;XUnit is a popular unit testing tool in the .NET space. It will be the baseline for a lot of the comparisons and is also necessary for the assertion libraries, as they are not test runners.&lt;/p&gt;
&lt;h4&gt;Expecto&lt;/h4&gt;
&lt;p&gt;Expecto is a F# testing framework that does a lot. It has an API for running tests, test adapters for runners, assertions, performance tests, and integration with FsCheck for property based testing. In this post we will only be looking at the basic features of setting up tests and the assertions.&lt;/p&gt;
&lt;h3&gt;Assertion libraries&lt;/h3&gt;
&lt;p&gt;Both &lt;strong&gt;XUnit&lt;/strong&gt; and &lt;strong&gt;Expecto&lt;/strong&gt; come with their own assertions. We will be looking at 2 other assertion libraries with different approaches. &lt;strong&gt;FsUnit&lt;/strong&gt; brings an fun style to assertions that many like and &lt;strong&gt;Unquote&lt;/strong&gt; makes use of a cool F# language feature to give detailed error messages.&lt;/p&gt;
&lt;h3&gt;Criteria&lt;/h3&gt;
&lt;p&gt;When reviewing or comparing anything it is useful to have a concrete list of attributes that are compared.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Setup:&lt;/strong&gt; what options there are in terms of getting up and running&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Style:&lt;/strong&gt; test setup style for the frameworks as well as the assertion style&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Messages:&lt;/strong&gt; format of the error messages and comment on ease of parsing as well as the amount of detail in the message&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Runners:&lt;/strong&gt; Running from Visual Studio and command line as well as filtering tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;So let&apos;s get into the comparison...&lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;p&gt;The project used to test out the examples is &lt;a href=&quot;https://github.com/dburriss/FsharpUnitTestFrameworks&quot;&gt;here on Github&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row hidden-xs hidden-sm&quot;&gt;
    &lt;div class=&quot;col-md-2&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-5&quot;&gt;&lt;h4&gt;XUnit&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-5&quot;&gt;&lt;h4&gt;Expecto&lt;/h4&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-2&quot;&gt;&lt;b&gt;Templates&lt;/b&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-5&quot;&gt;
      &lt;p&gt; 
        .NET Core templating comes standard with an xUnit template. Visual Studio also has built in templates for XUnit.&lt;br/&gt;
        &lt;code&gt;dotnet new xunit -lang F#&lt;/code&gt;
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5&quot;&gt;
      &lt;p&gt; 
        You can install the Expecto template&lt;br/&gt;
        &lt;code&gt;dotnet new -i Expecto.Template::*&lt;/code&gt;&lt;br/&gt;
        &lt;code&gt;dotnet new expecto -n PROJECT_NAME -o FOLDER_NAME&lt;/code&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-2&quot;&gt;&lt;b&gt;Nuget&lt;/b&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-5&quot;&gt;
      &lt;ul&gt; 
        &lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/xunit/&quot;&gt;xunit&lt;/a&gt;&lt;/li&gt;
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5&quot;&gt;
      &lt;ul&gt; 
        &lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/Expecto/&quot;&gt;Expecto&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-2&quot;&gt;&lt;b&gt;VS Adapter&lt;/b&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-5&quot;&gt;
      &lt;ul&gt; 
        &lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/Microsoft.NET.Test.Sdk/15.9.0&quot;&gt;Microsoft.NET.Test.Sdk&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/xunit.runner.visualstudio/&quot;&gt;xunit.runner.visualstudio&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-md-5&quot;&gt;
      &lt;ul&gt; 
        &lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/YoloDev.Expecto.TestSdk/&quot;&gt;YoloDev.Expecto.TestSdk&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The only issue I had was discovering I had to use &lt;em&gt;YoloDev.Expecto.TestSdk&lt;/em&gt; to get Visual Studio integration working instead of &lt;em&gt;Expecto.VisualStudio.TestAdapter&lt;/em&gt; (as suggested in the documentation). Easy enough to discover by generating an example project using the template. So not much between them here other than XUnit being available out the box.&lt;/p&gt;
&lt;h3&gt;Style&lt;/h3&gt;
&lt;p&gt;Let&apos;s look at how we setup a test in both XUnit and Expecto and then we will look at the assertion styles.&lt;/p&gt;
&lt;h4&gt;Test setup&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;XUnit&lt;/strong&gt; looks for the &lt;code&gt;[&amp;lt;Fact&amp;gt;]&lt;/code&gt; or &lt;code&gt;[&amp;lt;Theory&amp;gt;]&lt;/code&gt; attribute on a function and will run that as a test.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[&amp;lt;Fact&amp;gt;]
let ``toEmail with bob gives bob [at] acme [dot] com`` () =
    let name = &amp;quot;bob&amp;quot;
    let expected = &amp;quot;bob@acme.com&amp;quot;
    let actual = toEmail name
    Assert.Equal (expected, actual)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;F# allows us to use the double ` to name a function with some special characters in it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we have the &lt;code&gt;[&amp;lt;Fact&amp;gt;]&lt;/code&gt; attribute and a function with our test.&lt;/p&gt;
&lt;p&gt;Let&apos;s compare this to &lt;strong&gt;Expecto&lt;/strong&gt; setup.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[&amp;lt;Tests&amp;gt;]
let aTest =
  test &amp;quot;toEmail with bob gives bob [at] acme [dot] com&amp;quot; {
      let name = &amp;quot;bob&amp;quot;
      let expected = &amp;quot;bob@acme.com&amp;quot;
      let actual = toEmail name
      Expect.equal actual expected &amp;quot;emails did not match&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expecto uses the &lt;code&gt;[&amp;lt;Tests&amp;gt;]&lt;/code&gt; attribute to mark a value that contains tests, where the tests are defined in a F# computation expression called &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Although this might seem quite similar, it is in fact quite different. This becomes more apparent if we have multiple tests. Where XUnit is just more functions with the attribute on, Expecto treats the tests more like data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[&amp;lt;Tests&amp;gt;]
let emailtests = 
    testList &amp;quot;Email tests&amp;quot; [
            
        test &amp;quot;toEmail with null gives info [at] acme [dot] com&amp;quot; {
            let name = null
            let expected = &amp;quot;info@acme.com&amp;quot;
            let actual = toEmail name
            Expect.equal actual expected &amp;quot;emails did not match&amp;quot;
        }

        test &amp;quot;toEmail with bob gives bob [at] acme [dot] com&amp;quot; {
            let name = &amp;quot;bob&amp;quot;
            let expected = &amp;quot;bob@acme.com&amp;quot;
            let actual = toEmail name
            Expect.equal actual expected &amp;quot;emails did not match&amp;quot;
        }
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are defining our tests in a &lt;code&gt;List&lt;/code&gt; given to a &lt;code&gt;testList&lt;/code&gt;. Expecto &lt;a href=&quot;https://github.com/haf/expecto#writing-tests&quot;&gt;has an almost overwhelming number of ways to organize tests&lt;/a&gt;. XUnit is simple and straightforward but if you find yourself wanting to take more control of how tests are organized, Expecto might be just what you want. This becomes even more important if you are using it to do property-based testing, performance tests, etc.&lt;/p&gt;
&lt;h4&gt;Assertions&lt;/h4&gt;
&lt;p&gt;Next we will look at the style of the assertions used by each library.&lt;/p&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row hidden-xs hidden-sm&quot;&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;&lt;h4&gt;XUnit&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;&lt;h4&gt;FsUnit&lt;/h4&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;&lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;XUnit&lt;/b&gt;&lt;pre&gt;&lt;code class=&quot;fsharp&quot;&gt;Assert.Equal (expected, actual)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;&lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;FsUnit&lt;/b&gt;&lt;pre&gt;&lt;code class=&quot;fsharp&quot;&gt;actual |&gt; should equal expected&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/div&gt;
   &lt;div class=&quot;row hidden-xs hidden-sm&quot;&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;&lt;h4&gt;Unquote&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;&lt;h4&gt;Expecto&lt;/h4&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;&lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;Unquote&lt;/b&gt;&lt;pre&gt;&lt;code class=&quot;fsharp&quot;&gt;test &lt;@ actual = expected @&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-6&quot;&gt;&lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;Expecto&lt;/b&gt;&lt;pre&gt;&lt;code class=&quot;fsharp&quot;&gt;Expect.equal actual expected &quot;null should be None&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;XUnit&lt;/strong&gt; is pretty standard if you come from an OO background, and it&apos;s OO roots are really showing here. Other than that it is easy enough to understand. XUnit&apos;s &lt;code&gt;Assert&lt;/code&gt; static class contains a stack of useful assertion methods on it and since XUnit is very popular in the .NET space, it is easy finding answers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FsUnit&lt;/strong&gt; is for those that like a more fluent style (FP version) of defining assertions. If you are a C# developer and love the style of &lt;a href=&quot;https://fluentassertions.com/&quot;&gt;FluentAssertions&lt;/a&gt;, then you may want to try this out. Honestly, I am not a fan of FluentAssertions library for its assertion style, I am a fan for its helpful error messages. In OO I prefer the more succinct XUnit style but use FluentAssertions because of its error messages. So if this is a style that appeals to you, try it out!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unquote&lt;/strong&gt; is slightly different as it uses F# quoted expressions (using &lt;code&gt;&amp;lt;@ expression @&amp;gt;&lt;/code&gt;) to evaluate a plain statically typed F# expression and give detailed failure messages based on that evaluation. We will take at what this means for the error messages in the next section. There are some &lt;a href=&quot;https://github.com/SwensenSoftware/unquote/wiki/UserGuide#assertions&quot;&gt;assertion helpers&lt;/a&gt; but mostly you just write plain old F# expressions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expecto&lt;/strong&gt; has its own assertion module &lt;code&gt;Expect&lt;/code&gt; which has a bunch of functions available for asserting behavior. This is much akin to XUnit&apos;s &lt;code&gt;Assert&lt;/code&gt; class except it doesn&apos;t carry the same OO legacy and so is much more functional in feel.&lt;/p&gt;
&lt;h3&gt;Error message&lt;/h3&gt;
&lt;p&gt;Although a fan of TDD I prefer testing from the boundary of my application and only going as deep as needed. The less your clients (including your tests) know about the internals of your code, the more free you are to make changes without breaking any API contracts. So then error messages from your application become very important, and the more helpful your assertions are at surfacing this the better.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// XUnit / FsUnit / Unquote
[&amp;lt;Fact&amp;gt;]
let ``toEmail with bob gives bob [at] acme [dot] com`` () =
    let name = &amp;quot;bob&amp;quot;
    let expected = &amp;quot;bob@acme.com&amp;quot;
    let actual = toEmail name
    // XUnit
    Assert.Equal (expected, actual)
    // FsUnit
    actual |&amp;gt; should equal expected
    // Unquote
    test &amp;lt;@ actual = expected @&amp;gt;

// Expecto
test &amp;quot;toEmail with bob gives bob [at] acme [dot] com&amp;quot; {
    let name = &amp;quot;bob&amp;quot;
    let expected = &amp;quot;bob@acme.com&amp;quot;
    let actual = toEmail name
    Expect.equal actual expected &amp;quot;bob should be Some bob&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row hidden-xs hidden-sm&quot;&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;h4&gt;XUnit&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;h4&gt;FsUnit&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;h4&gt;Unquote&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;h4&gt;Expecto&lt;/h4&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;p&gt;
    &lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;XUnit&lt;/b&gt;
Message: Assert.Equal() Failure
          ↓ (pos 0)
Expected: bob@acme.com
Actual:   info@acme.com
          ↑ (pos 0)
    &lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;p&gt;
    &lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;FsUnit&lt;/b&gt;
Message: FsUnit.Xunit+MatchException : Exception of type &apos;FsUnit.Xunit+MatchException&apos; was thrown.
Expected: Equals &quot;bob@acme.com&quot;
Actual:   was &quot;info@acme.com&quot;
    &lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;p&gt;
    &lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;Unquote&lt;/b&gt;
&quot;info@acme.com&quot; = &quot;bob@acme.com&quot;
false
    &lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;p&gt;
    &lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;Expecto&lt;/b&gt;
Message: 
emails did not match.
Expected string to equal:
bob@acme.com
↑
The string differs at index 0.
info@acme.com
↑
String does not match at position 0. Expected char: &apos;b&apos;, but got &apos;i&apos;.
    &lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So far there is very little between them. &lt;strong&gt;Unquote&lt;/strong&gt; does stand out as different to the others. &lt;strong&gt;FsUnit&lt;/strong&gt; has a bit more noise before the important part and doesn&apos;t point out the index of where things go wrong. That little detail could be helpful in spotting a small &lt;em&gt;tpyo&lt;/em&gt; but other than that is not too significant.&lt;/p&gt;
&lt;p&gt;Let&apos;s look at something with a functional concept in like &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// XUnit / FsUnit / Unquote
[&amp;lt;Fact&amp;gt;]
let ``sanitize with bob gives Some bob`` () =
    let name = &amp;quot;bob&amp;quot;
    let expected = Some name
    let actual = Data.sanitize name
    // XUnit
    Assert.Equal (expected, actual)
    // FsUnit
    actual |&amp;gt; should equal expected
    // Unquote
    test &amp;lt;@ actual = expected @&amp;gt;

// Expecto
test &amp;quot;sanitize with bob gives Some bob&amp;quot; {
    let name = &amp;quot;bob&amp;quot;
    let expected = Some name
    let actual = Data.sanitize name
    Expect.equal actual expected &amp;quot;bob should be Some bob&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row hidden-xs hidden-sm&quot;&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;h4&gt;XUnit&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;h4&gt;FsUnit&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;h4&gt;Unquote&lt;/h4&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;h4&gt;Expecto&lt;/h4&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;p&gt;
    &lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;XUnit&lt;/b&gt;
Message: Assert.Equal() Failure
Expected: Some(bob)
Actual:   (null)
    &lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;p&gt;
    &lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;FsUnit&lt;/b&gt;
Message: FsUnit.Xunit+MatchException : Exception of type &apos;FsUnit.Xunit+MatchException&apos; was thrown.
Expected: Equals Some &quot;bob&quot;
Actual:   was null
    &lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;p&gt;
    &lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;Unquote&lt;/b&gt;
None = Some &quot;bob&quot;
false
    &lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col-md-3&quot;&gt;&lt;p&gt;
    &lt;b class=&quot;visible-xs-block visible-sm-block&quot;&gt;Expecto&lt;/b&gt;
Message: 
bob should be Some bob. Actual value was &amp;lt;null&amp;gt; but had expected it to be Some &quot;bob&quot;.
    &lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Again most are similar but &lt;strong&gt;Unquote&lt;/strong&gt; begins to shine. All the other libraries print &lt;code&gt;None&lt;/code&gt; as &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Runners&lt;/h3&gt;
&lt;p&gt;If you are using Visual Studio you probably want to run your tests from the Test Explorer in the IDE. This works fine for all the listed frameworks as you can see.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/test-explorer.jpg&quot; alt=&quot;Visual Studio Test Explorer&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If the command line is more your thing, &lt;code&gt;dotnet test&lt;/code&gt; works just fine. This example is a bit of a mess as it is running all the test libraries.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/console-tests.jpg&quot; alt=&quot;Visual Studio Test Explorer&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Filtering&lt;/h4&gt;
&lt;p&gt;Sometimes it is useful to filter to run only certain tests. &lt;strong&gt;XUnit&lt;/strong&gt; and &lt;code&gt;dotnet test&lt;/code&gt; support this. With the following example you can filter down to just tests marked with this category using &lt;code&gt;--filter&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[&amp;lt;Trait(&amp;quot;Category&amp;quot;, &amp;quot;Smoke&amp;quot;)&amp;gt;]
[&amp;lt;Fact&amp;gt;]
let ``get list of numbers`` () =
    let expected = [|1;2;3|]
    let actual = Data.list |&amp;gt; Seq.take 3 |&amp;gt; Seq.toArray
    Assert.Equal&amp;lt;IEnumerable&amp;lt;int&amp;gt;&amp;gt;(expected, actual)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dotnet test --filter Category=Smoke&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Filtering with &lt;strong&gt;Expecto&lt;/strong&gt; is a bit different. Remember how we assign a list of tests to a value? We could for example run our data tests like so by running them from a command line program.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// Program.fs

module Program = 
    
    open Expecto
    open TestFrameworks

    let [&amp;lt;EntryPoint&amp;gt;] main args = 
        runTestsWithArgs defaultConfig args ExpectoTests.datatests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And since this is just a normal console application, you can make it as simple or complex as needed. Now testing becomes a &lt;code&gt;dotnet watch run&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that is our review of a few of the testing libraries available in the F# ecosystem. This is by no means comprehensive in terms of all libraries nor a deep dive into any of these. I do hope that if you have not used some of these, you did glimpse what some of them might offer.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://xunit.github.io/&quot;&gt;xunit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsprojects.github.io/FsUnit/&quot;&gt;FsUnit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/SwensenSoftware/unquote&quot;&gt;Unquote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haf/expecto&quot;&gt;Expecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions&quot;&gt;Computation Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/code-quotations&quot;&gt;Quoted expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests#xunit&quot;&gt;Filtering tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fscheck.github.io/FsCheck/&quot;&gt;Property-based testing with FsCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fsprojects/Foq/wiki&quot;&gt;Foq for Mocking (personally I don&apos;t recommend using mock frameworks much)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-10/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-10/"/>
    <title>How to F# - Part 10</title>
    <updated>2018-11-24T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-10/</uri>
    </author>
    <summary type="html">&lt;p&gt;In this final post in the series we are going to create a fully functioning F# application. Along the way we will discuss the .NET SDK, SQLite, and how to organize your code. If you follow along (which I recommend you do), you will have a working F# console application that accepts input and communicates with a database.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;The code for this tutorial can be found at &lt;a href=&quot;https://github.com/dburriss/HowToFsharp&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;First let&apos;s discuss what we will be building. We will be creating a console application that accepts some contact information as user input and then persists those contacts to a database.&lt;/p&gt;
&lt;p&gt;The data we will be capturing will have the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First name&lt;/li&gt;
&lt;li&gt;Last name&lt;/li&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be doing the initial creation of the project from the command line so it doesn&apos;t matter if you are using VS Code, Visual Studio, Rider, or any other preferred editor on Windows, Linux, or Mac.&lt;/p&gt;
&lt;h2&gt;Project setup&lt;/h2&gt;
&lt;p&gt;The first thing we need to check is if we have the &lt;a href=&quot;https://www.microsoft.com/net/download&quot;&gt;.NET Core SDK installed&lt;/a&gt;. Go to &lt;a href=&quot;https://www.microsoft.com/net/download&quot;&gt;dot.net&lt;/a&gt; and download the .NET Core SDK.&lt;/p&gt;
&lt;p&gt;And although I hope you tried out some of the samples in previous posts, if any this would be the one to follow along with if you have never written a F# application before. To do that you will need an IDE.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://visualstudio.microsoft.com/downloads/&quot;&gt;Visual Studio with the F# workload installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://visualstudio.microsoft.com/downloads/&quot;&gt;Visual Studio Code&lt;/a&gt; with &lt;a href=&quot;http://ionide.io/&quot;&gt;Ionide extension installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/rider/&quot;&gt;Rider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once we have the .NET SDK installed, create a folder and navigate to that folder in your terminal (Prompt on Windows or Terminal on *nix).&lt;/p&gt;
&lt;p&gt;If you are unsure there is an awesome &lt;a href=&quot;https://www.youtube.com/playlist?list=PLlzAi3ycg2x0TScJb7czq7-4LrQoyTB0I&quot;&gt;video series by Compositional IT on YouTube now that will get you setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Windows using Powershell I did the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;cd C:\dev\personal\  
mkdir HowToFsharp  
cd .\HowToFsharp\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I am in a folder &lt;em&gt;C:\dev\personal\HowToFsharp&lt;/em&gt;. You can put the folder anywhere you prefer and call it what you like, it is not too important. Just be sure that you execute the following command in the folder you just created:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;dotnet new --list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/dotnet-list.jpg&quot; alt=&quot;dotnet new --list&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This prints out a list of all the templates you have installed on your machine. We will be creating a console application so we will use the first template on the list above.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;dotnet new console -lang F#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running this will generate 2 files and another folder called &lt;code&gt;obj&lt;/code&gt; which we won&apos;t be looking at. Let&apos;s look at the 2 files though.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HowToFsharp.fsproj&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp2.1&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Include=&amp;quot;Program.fs&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;*proj&lt;/code&gt; files like &lt;code&gt;csproj&lt;/code&gt; and &lt;code&gt;fsproj&lt;/code&gt; MSBuild XML files that specify how our project is built. The first thing to notice is it is specifying &lt;code&gt;Microsoft.NET.Sdk&lt;/code&gt; as an attribute in the root &lt;code&gt;Project&lt;/code&gt; element. This layers in tasks and targets automatically for us to work with .NET Core.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutputType&lt;/code&gt; is quite straight forward. The artefact of this program will be an executable that can be run.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;TargetFramework&lt;/code&gt; we indicate what framework we are targeting. &lt;code&gt;netcoreapp2.1&lt;/code&gt; is for runnable .NET Core applications. If we wanted to target .NET Fullframework we could specify something like &lt;code&gt;net461&lt;/code&gt;. That is not too important for this post though, just useful to keep in mind when developing your own applications.&lt;/p&gt;
&lt;p&gt;Finally we have an &lt;code&gt;ItemGroup&lt;/code&gt; with &lt;code&gt;&amp;lt;Compile Include=&amp;quot;Program.fs&amp;quot; /&amp;gt;&lt;/code&gt;. This is important as it includes our other file of interest that we will look at next to be compiled when compiling this project. In an F# project file this is important as this allows us to specify what is compiled and in what order. If you are used to C#, this is different as the order of files does not matter in C#. The important part to note here is that as we add more F# files, we will need to add them here so they are compiled as needed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Program.fs&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;open System

[&amp;lt;EntryPoint&amp;gt;]
let main argv =
    printfn &amp;quot;Hello World from F#!&amp;quot;
    0 // return an integer exit code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Program.fs&lt;/code&gt; becomes the entry point of our application (as is made explicit by the &lt;code&gt;[&amp;lt;EntryPoint&amp;gt;]&lt;/code&gt; attribute).&lt;/p&gt;
&lt;p&gt;On the command line if you are in the folder containing the &lt;code&gt;fsproj&lt;/code&gt; file you can run the command &lt;code&gt;dotnet run&lt;/code&gt; command to build and run this program.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dotnet run&lt;/code&gt;&lt;br /&gt;
Hello World from F#!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we get to writing our program, let&apos;s talk about organizing code.&lt;/p&gt;
&lt;h2&gt;Organizing Code&lt;/h2&gt;
&lt;p&gt;So far in this series we haven&apos;t talked about how to organize code. In your F# code you typically have 3 aspects to bring together to organise your code. Firstly, you have &lt;em&gt;files&lt;/em&gt;. These are files ending with &lt;code&gt;.fs&lt;/code&gt;. Pretty straight forward. As mentioned before &lt;code&gt;.fs&lt;/code&gt; files need to be compiled in the order they are used. So if You depend on functions or types in another file, that file must appear ahead in the compilation order of the file they are used in.&lt;/p&gt;
&lt;p&gt;The bread and butter of organizing F# code is &lt;code&gt;module&lt;/code&gt;s. A &lt;code&gt;module&lt;/code&gt; allows you to group values, types, and functions. This can be useful for thinking of the group as a single abstraction and avoiding naming conflicts. When interoping with other .NET languages, &lt;code&gt;module&lt;/code&gt;s show up as static classes.&lt;/p&gt;
&lt;p&gt;Lastly, there are &lt;em&gt;namespaces&lt;/em&gt;. These are an artefact of the interop with the rest of the .NET library although they can be useful for spanning multiple &lt;code&gt;module&lt;/code&gt;s. One important thing to note is that although we can define types in a &lt;code&gt;namespace&lt;/code&gt;, we cannot define values. This includes functions.&lt;/p&gt;
&lt;p&gt;We will be coding up the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/fsharpapp.jpg&quot; alt=&quot;Code&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As we discussed, &lt;code&gt;Program.fs&lt;/code&gt; represents our entry point. All other files contain &lt;code&gt;module&lt;/code&gt;s in the &lt;code&gt;Contacts&lt;/code&gt; &lt;code&gt;namespace&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Creating our model&lt;/h2&gt;
&lt;p&gt;We will start with creating our &lt;code&gt;Domain.fs&lt;/code&gt; file. There are multiple ways to organise code with or without namespaces but I am showing my preferred method. We have a &lt;code&gt;namespace&lt;/code&gt;, in this case &lt;code&gt;Contacts&lt;/code&gt; that all the code falls under. We create our types within that &lt;code&gt;namespace&lt;/code&gt;. Any domain logic we need enforced on our types, we place in a &lt;code&gt;module&lt;/code&gt; with the same name as the type.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Domains.fs&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;namespace Contacts

open System

type Contact = {
    Id:Guid
    Firstname:string
    Lastname:string
    Email:string
}

[&amp;lt;RequireQualifiedAccess&amp;gt;]
module Contact =
    // string -&amp;gt; bool
    let private isValidEmail (email:string) =
        try
            new System.Net.Mail.MailAddress(email) |&amp;gt; ignore
            true
        with 
        | _ -&amp;gt; false

    // Contact -&amp;gt; Result&amp;lt;Contact,seq&amp;lt;string&amp;gt;&amp;gt;
    let validate contact =
        let errors = seq {
            if(String.IsNullOrEmpty(contact.Firstname)) then yield &amp;quot;First name should not be empty&amp;quot;
            if(String.IsNullOrEmpty(contact.Lastname)) then yield &amp;quot;Last name should not be empty&amp;quot;
            if(String.IsNullOrEmpty(contact.Email)) then yield &amp;quot;Email should not be empty&amp;quot;
            if(isValidEmail contact.Email |&amp;gt; not) then yield &amp;quot;Not a valid email&amp;quot;
        }

        if(Seq.isEmpty errors) then Ok contact else Error errors

    // string -&amp;gt; string -&amp;gt; string -&amp;gt; Result&amp;lt;Contact,seq&amp;lt;string&amp;gt;&amp;gt;
    let create fname lname email =
        let c = { Id = Guid.NewGuid(); Firstname = fname; Lastname = lname; Email = email }
        validate c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above we have a type &lt;code&gt;Contact&lt;/code&gt; and a &lt;code&gt;module&lt;/code&gt; &lt;code&gt;Contact&lt;/code&gt;. Within the &lt;code&gt;module&lt;/code&gt; we have 2 public functions. &lt;code&gt;create&lt;/code&gt; creates a contact given the needed values, and uses &lt;code&gt;validate&lt;/code&gt; to ensure the contact is valid.&lt;/p&gt;
&lt;p&gt;I find this a nice structured way of finding the necessary behavior on a type that is similar to how behavior would be discovered using OO, is still functional, and matches how we work in F# with types like &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Option&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Getting input&lt;/h2&gt;
&lt;p&gt;Next, let&apos;s look at how we can get input from the user console. We will be catering for the following functionality.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Print a menu to the console&lt;/li&gt;
&lt;li&gt;List all existing saved contacts persisted to the database&lt;/li&gt;
&lt;li&gt;Capture new contacts to the database&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The menu will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;====================
MENU&amp;quot;
====================
1. Print Contacts&amp;quot;
2. Capture Contacts&amp;quot;
0. Quit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this bit of code, consider reading it from the bottom up. This way of reading code often makes the most sense as the upper functions are helper functions for those lower down.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;namespace Contacts

[&amp;lt;RequireQualifiedAccess&amp;gt;]
module Input = 

    open System
    
    // string -&amp;gt; string
    let private captureInput(label:string) = 
            printf &amp;quot;%s&amp;quot; label
            Console.ReadLine()

    // seq&amp;lt;string&amp;gt; -&amp;gt; unit
    let private printErrors errs =
        printfn &amp;quot;ERRORS&amp;quot;
        errs |&amp;gt; Seq.iter (printfn &amp;quot;%s&amp;quot;)

    // unit -&amp;gt; Contact
    let rec private captureContact() =
        printfn &amp;quot;CAPTURE CONTACT&amp;quot;
        Contact.create
            (captureInput &amp;quot;First name: &amp;quot;)
            (captureInput &amp;quot;Last name: &amp;quot;)
            (captureInput &amp;quot;Email: &amp;quot;)
        |&amp;gt; fun r -&amp;gt; match r with
                    | Ok c -&amp;gt; c
                    | Error err -&amp;gt; 
                        printErrors err
                        captureContact()

    // (Contact -&amp;gt; unit) -&amp;gt; Choice&amp;lt;unit,unit&amp;gt;
    let private captureContactChoice saveContact =
        let contact = captureContact()
        saveContact contact
        let another = captureInput &amp;quot;Continue (Y/N)?&amp;quot;
        match another.ToUpper() with
        | &amp;quot;Y&amp;quot; -&amp;gt; Choice1Of2 ()
        | _ -&amp;gt; Choice2Of2 ()

    // (Contact -&amp;gt; unit) -&amp;gt; unit
    let rec private captureContacts saveContact =
        match captureContactChoice saveContact with
        | Choice1Of2 _ -&amp;gt; 
            captureContacts saveContact
        | Choice2Of2 _ -&amp;gt; ()

    // unit -&amp;gt; unit
    let printMenu() =
        printfn &amp;quot;====================&amp;quot;
        printfn &amp;quot;MENU&amp;quot;
        printfn &amp;quot;====================&amp;quot;
        printfn &amp;quot;1. Print Contacts&amp;quot;
        printfn &amp;quot;2. Capture Contacts&amp;quot;
        printfn &amp;quot;0. Quit&amp;quot;

    // string -&amp;gt; (unit -&amp;gt; Contact list) -&amp;gt; (Contact -&amp;gt; unit) -&amp;gt; unit
    let routeMenuOption i getContacts saveContact =
        match i with
        | &amp;quot;1&amp;quot; -&amp;gt; 
            printfn &amp;quot;Contacts&amp;quot;
            getContacts() |&amp;gt; List.iter (fun c -&amp;gt; printfn &amp;quot;%s %s (%s)&amp;quot; c.Firstname c.Lastname c.Email)
        | &amp;quot;2&amp;quot; -&amp;gt; captureContacts saveContact
        | _ -&amp;gt; printMenu()

    // unit -&amp;gt; string
    let readKey() =
        let k = Console.ReadKey()
        Console.WriteLine()
        k.KeyChar |&amp;gt; string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing you may notice (if you did still start from the top) is the &lt;code&gt;RequireQualifiedAccess&lt;/code&gt; attribute. This enforces that calling the functions in the module is done using the fully qualified &lt;code&gt;module&lt;/code&gt; name. I often like this as it gives context to the function call names.&lt;/p&gt;
&lt;p&gt;Now that you have been found out for starting from the top, let&apos;s work our way up from the bottom.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;readKey&lt;/code&gt; is pretty uninteresting. It gets a key as input and returns that as a string. This will be used to get menu choices.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;routeMenuOption&lt;/code&gt; pattern &lt;code&gt;match&lt;/code&gt;es on the &lt;code&gt;i&lt;/code&gt;. &amp;quot;1&amp;quot; prints out each contact. To do that it calls the &lt;code&gt;getContacts&lt;/code&gt; function that is passed in as an argument. This means we are not directly tied to fetching our contacts from the database when using this &lt;code&gt;Input module&lt;/code&gt;, we need only supply a function with the signature &lt;code&gt;unit -&amp;gt; Contact list&lt;/code&gt;.&lt;br /&gt;
&amp;quot;2&amp;quot; is a little more interesting as we call a function &lt;code&gt;captureContacts&lt;/code&gt; which is in this &lt;code&gt;Input module&lt;/code&gt;. It takes as an argument the function &lt;code&gt;saveContact&lt;/code&gt; which has the signature &lt;code&gt;Contact -&amp;gt; unit&lt;/code&gt;. So again, the &lt;code&gt;Input module&lt;/code&gt; is not dependent on storing contacts in a database. All it requires is a function that will do something with the &lt;code&gt;Contact&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&apos;s drill into &lt;code&gt;captureContacts&lt;/code&gt; then. It has the signature &lt;code&gt;(Contact -&amp;gt; unit) -&amp;gt; unit&lt;/code&gt;, so its argument matches up with our &lt;code&gt;saveContact&lt;/code&gt; function. Another interesting part about &lt;code&gt;captureContacts&lt;/code&gt; is the &lt;code&gt;rec&lt;/code&gt; keyword. This means that the function is recursive. That is a fancy way of saying it calls itself. So what it does is make use of the &lt;code&gt;captureContact&lt;/code&gt; function which returns back a &lt;code&gt;Choice&lt;/code&gt; type. &lt;code&gt;Choice1Of2&lt;/code&gt; means we will capture another contact, &lt;code&gt;Choice2Of2&lt;/code&gt; means we will not capture any more contacts.&lt;/p&gt;
&lt;p&gt;The rest of the functions &lt;code&gt;printMenu&lt;/code&gt;, &lt;code&gt;printErrors&lt;/code&gt;, and &lt;code&gt;captureInput&lt;/code&gt; should be simple enough to reason about by now.&lt;/p&gt;
&lt;h2&gt;Persisting data&lt;/h2&gt;
&lt;p&gt;Next we need to setup our data access. I am not going to go over the code too much in this section as it is basically the same as what &lt;a href=&quot;https://devonburriss.me/how-to-fsharp-pt-9/&quot;&gt;we covered in Part 9&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Database creation&lt;/h3&gt;
&lt;p&gt;What is important is to be able to work with &lt;a href=&quot;https://www.sqlite.org/&quot;&gt;SQLite&lt;/a&gt;. To follow along here you can &lt;a href=&quot;https://www.sqlite.org/download.html&quot;&gt;download sqlite-tools&lt;/a&gt; for free for your platform. You will either need to put &lt;a href=&quot;https://www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt; on your &lt;em&gt;PATH&lt;/em&gt;&lt;/a&gt; or call it from where you downloaded it. You could also use a tool like &lt;a href=&quot;https://www.jetbrains.com/datagrip/&quot;&gt;Jetbrains Datagrip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once we have the &lt;code&gt;sqlite&lt;/code&gt; binary we can create a new database and connect to it using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sqlite3 contactsDB.sqlite
sqlite&amp;gt; CREATE TABLE IF NOT EXISTS contacts ( id TEXT PRIMARY KEY, firstname TEXT NOT NULL, lastname TEXT NOT NULL, email TEXT NOT NULL UNIQUE );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should look something like this, depending on your operating system and terminal of choice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/sqlite3.jpg&quot; alt=&quot;sqlite3 bash&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Install nuget packages&lt;/h3&gt;
&lt;p&gt;So now we have our database setup, we are going to start with the code to connect to it. First we will install the &lt;a href=&quot;https://github.com/StackExchange/Dapper&quot;&gt;Dapper&lt;/a&gt; package into our project.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would usually recommend dependency management &lt;a href=&quot;https://fsprojects.github.io/Paket/&quot;&gt;Paket&lt;/a&gt;. I have a post on &lt;a href=&quot;https://devonburriss.me/up-and-running-with-paket/&quot;&gt;getting up and running with Paket&lt;/a&gt; if you are interested.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet add package Dapper
dotnet add package System.Data.SQLite
dotnet restore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your &lt;em&gt;HowToFsharp.fsproj&lt;/em&gt; should now contain the following &lt;em&gt;ItemGroup&lt;/em&gt; element.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;ItemGroup&amp;gt;
  &amp;lt;PackageReference Include=&amp;quot;Dapper&amp;quot; Version=&amp;quot;1.50.5&amp;quot; /&amp;gt;
  &amp;lt;PackageReference Include=&amp;quot;System.Data.SQLite&amp;quot; Version=&amp;quot;1.0.109.2&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are going to add some code we saw in &lt;a href=&quot;https://devonburriss.me/how-to-fsharp-pt-9/&quot;&gt;Part 9&lt;/a&gt;. &lt;em&gt;Database.fs&lt;/em&gt; is a helper &lt;code&gt;module&lt;/code&gt; for using Dapper in a more functional way.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Database.fs&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;namespace Contacts

module Database =

    open Dapper
    open System.Data.Common
    open System.Collections.Generic

    // DbConnection -&amp;gt; string -&amp;gt; &apos;b -&amp;gt; Result&amp;lt;int,exn&amp;gt;
    let execute (connection:#DbConnection) (sql:string) (parameters:_) =
        try
            let result = connection.Execute(sql, parameters)
            Ok result
        with
        | ex -&amp;gt; Error ex

    // DbConnection -&amp;gt; string -&amp;gt; IDictionary&amp;lt;string,obj&amp;gt; -&amp;gt; Result&amp;lt;seq&amp;lt;&apos;T&amp;gt;,exn&amp;gt;
    let query (connection:#DbConnection) (sql:string) (parameters:IDictionary&amp;lt;string, obj&amp;gt; option) : Result&amp;lt;seq&amp;lt;&apos;T&amp;gt;,exn&amp;gt; =
        try
            let result =
                match parameters with
                | Some p -&amp;gt; connection.Query&amp;lt;&apos;T&amp;gt;(sql, p)
                | None -&amp;gt; connection.Query&amp;lt;&apos;T&amp;gt;(sql)
            Ok result
        with
        | ex -&amp;gt; Error ex

    // DbConnection -&amp;gt; string -&amp;gt; IDictionary&amp;lt;string,obj&amp;gt; -&amp;gt; Result&amp;lt;&apos;T,exn&amp;gt;
    let querySingle (connection:#DbConnection) (sql:string) (parameters:IDictionary&amp;lt;string, obj&amp;gt; option) =
        try
            let result =
                match parameters with
                | Some p -&amp;gt; connection.QuerySingleOrDefault&amp;lt;&apos;T&amp;gt;(sql, p)
                | None -&amp;gt; connection.QuerySingleOrDefault&amp;lt;&apos;T&amp;gt;(sql)
            
            if isNull (box result) then Ok None
            else Ok (Some result)

        with
        | ex -&amp;gt; Error ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we will use this file in a &lt;code&gt;module&lt;/code&gt; we will call &lt;code&gt;Data&lt;/code&gt; that will contain the code and queries for saving and listing the contacts in the database.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Data.fs&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;namespace Contacts

open Contacts
open System
open System.Data.SQLite

[&amp;lt;RequireQualifiedAccess&amp;gt;]
module Data =

    type ContactEntity = { id:string; firstname:string; lastname:string; email:string }

    // string -&amp;gt; SQLiteConnection
    let private conn (dbname:string) = 
        let c = new SQLiteConnection(sprintf &amp;quot;Data Source=%s.sqlite&amp;quot; dbname)
        c.Open()
        c

    let private dbname = &amp;quot;contactsDB&amp;quot;

    // unit -&amp;gt; Result&amp;lt;seq&amp;lt;Contact&amp;gt;,exn&amp;gt;
    let all() =
        let db = conn dbname
        Database.query db &amp;quot;SELECT id, firstname, lastname, email FROM contacts&amp;quot; None 
        |&amp;gt; Result.map
            (fun ss -&amp;gt; ss 
                    |&amp;gt; Seq.map (fun c -&amp;gt; {
                        Id = Guid.Parse(c.id); Firstname = c.firstname; Lastname = c.lastname; Email = c.email
                        }))

    // Contact -&amp;gt; Result&amp;lt;int,exn&amp;gt;
    let insert c =
        let db = conn dbname
        let entity = { id = c.Id.ToString(); firstname = c.Firstname; lastname = c.Lastname; email = c.Email }
        let sql = &amp;quot;INSERT INTO contacts (id, firstname, lastname, email) VALUES (@id, @firstname, @lastname, @email);&amp;quot;
        Database.execute db sql entity   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of note here is that we use a specific type here called &lt;code&gt;ContactEntity&lt;/code&gt; that we use to store and retrieve from the database. Here it was necessary as SQLite does not handle &lt;code&gt;Guid&lt;/code&gt; type that we are using for the &lt;code&gt;Id&lt;/code&gt;. Even if this was not necessary it is a good practice to separate the boandaries of your application like input and storage from your domain types.&lt;/p&gt;
&lt;h2&gt;Tying it all together&lt;/h2&gt;
&lt;p&gt;Remember we need to add the files to the &lt;em&gt;HowToFsharp.fsproj&lt;/em&gt; for them to be compiled.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netcoreapp2.1&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Include=&amp;quot;Database.fs&amp;quot; /&amp;gt;    
    &amp;lt;Compile Include=&amp;quot;Domain.fs&amp;quot; /&amp;gt;
    &amp;lt;Compile Include=&amp;quot;Data.fs&amp;quot; /&amp;gt;
    &amp;lt;Compile Include=&amp;quot;Input.fs&amp;quot; /&amp;gt;
    &amp;lt;Compile Include=&amp;quot;Program.fs&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Dapper&amp;quot; Version=&amp;quot;1.50.5&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;System.Data.SQLite&amp;quot; Version=&amp;quot;1.0.109.2&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have all the building blocks we need to tie our application together. Lets flesh out our entry point to use what we have created so far to get our contacts application working.&lt;/p&gt;
&lt;p&gt;When the application starts we want to print the menu and get an input. After completing each action we will print the menu again and get an input.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Program.fs&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;open Contacts

// unit -&amp;gt; Contact list
let getContacts() =
    Data.all()
    |&amp;gt; fun r -&amp;gt; match r with
                | Ok cs -&amp;gt; cs |&amp;gt; Seq.toList
                | Error e -&amp;gt; 
                        printfn &amp;quot;ERROR: %s&amp;quot; e.Message
                        List.empty

// Contact -&amp;gt; unit
let insertContact c =
    Data.insert c
    |&amp;gt; fun r -&amp;gt; match r with
                | Ok i -&amp;gt; printfn &amp;quot;%i records inserted&amp;quot; i
                | Error e -&amp;gt; printfn &amp;quot;ERROR: %s&amp;quot; e.Message

[&amp;lt;EntryPoint&amp;gt;]
let main argv =
    Input.printMenu()
    let mutable selection = Input.readKey()
    while(selection &amp;lt;&amp;gt; &amp;quot;0&amp;quot;) do
        Input.routeMenuOption selection getContacts insertContact 
        Input.printMenu()
        selection &amp;lt;- Input.readKey()
    0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we print the menu and get a menu option, then we go into a loop of doing that after executing each action with &lt;code&gt;Input.routeMenuOption&lt;/code&gt;.
Remember that &lt;code&gt;Input.routeMenuOption&lt;/code&gt; takes 2 functions as input to fetch all contacts and insert a contact.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;Data&lt;/code&gt; module we have 2 functions that almost fit the bill. &lt;code&gt;Data.all&lt;/code&gt; has a signature of &lt;code&gt;unit -&amp;gt; Result&amp;lt;seq&amp;lt;Contact&amp;gt;,exn&amp;gt;&lt;/code&gt; for fetching all contacts as a result, where the result may be an exception. &lt;code&gt;Data.insert&lt;/code&gt; has a signature of &lt;code&gt;Contact -&amp;gt; Result&amp;lt;int,exn&amp;gt;&lt;/code&gt; with the result of inserting a contact into the database.&lt;/p&gt;
&lt;p&gt;At the top of &lt;em&gt;Program.fs&lt;/em&gt; we have created 2 functions that wrap the &lt;code&gt;Data module&lt;/code&gt; functions, handling errors and then give us the signatures we need for using them in &lt;code&gt;Input.routeMenuOption&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This all just loops in the &lt;code&gt;while&lt;/code&gt; loop until the &lt;strong&gt;Quit&lt;/strong&gt; option is selected.&lt;/p&gt;
&lt;p&gt;To run our application we execute the &lt;code&gt;dotnet run&lt;/code&gt; command like we did near the beginning of this tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt; dotnet run
====================
MENU
====================
1. Print Contacts
2. Capture Contacts
0. Quit
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Congratulations for completing your first application! Hopefully you can see that functional programming and F# is not a scary thing and that it is quite possible to write any kind of application in it.&lt;/p&gt;
&lt;p&gt;Here are a few ways you could expand this application:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Move the connection string into a json or yaml configuration file&lt;/li&gt;
&lt;li&gt;Try use a different database&lt;/li&gt;
&lt;li&gt;Try use &lt;a href=&quot;https://fsprojects.github.io/SQLProvider/&quot;&gt;SQL Provider&lt;/a&gt; for the &lt;code&gt;Data&lt;/code&gt; layer&lt;/li&gt;
&lt;li&gt;Try import contacts from a &lt;a href=&quot;https://gist.github.com/dburriss/4fd75fb874efb3ee41d0c31b14387fdf&quot;&gt;CSV&lt;/a&gt; file&lt;/li&gt;
&lt;li&gt;Make this a web api using &lt;a href=&quot;https://github.com/giraffe-fsharp/Giraffe&quot;&gt;Giraffe&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Next steps&lt;/h3&gt;
&lt;p&gt;What are some ways of furthering your learnings in F#?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check out &lt;a href=&quot;https://exercism.io/&quot;&gt;Exercism&lt;/a&gt; is a great way to get some easy practice writing code&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/&quot;&gt;F# for fun and profit&lt;/a&gt; is a wealth of F# knowledge and I started out by just reading a little of that every day. I would encourage you to follow along with the &lt;a href=&quot;https://devonburriss.me/fsharp-scripting/&quot;&gt;script files&lt;/a&gt; rather than just read like I did. Nothing beats actually writing code for learning a new language.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/get-programming-with-f-sharp&quot;&gt;Get Programming with FSharp&lt;/a&gt; by Isaac Abraham is a great getting started book&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pragprog.com/book/swdddf/domain-modeling-made-functional&quot;&gt;Domain Modeling Made Functional&lt;/a&gt; is one of my favorite F# and DDD books, I highly recommend it once you are a little comfortable with F#.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk&quot;&gt;MSBuild project SDKs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/core/tools/csproj&quot;&gt;MSBuild for .NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-9/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-9/"/>
    <title>How to F# - Part 9</title>
    <updated>2018-11-04T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-9/</uri>
    </author>
    <summary type="html">&lt;p&gt;In almost any software system we want to store data at some point. For decades the bread and butter of persisting data has been databases, and in this post we look at ways of working with a database in F#.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;SQL databases are very common and have been for decades. In this post we will look at how to interact with a &lt;a href=&quot;https://www.sqlite.org/about.html&quot;&gt;SQLite database&lt;/a&gt; using the &lt;a href=&quot;https://github.com/StackExchange/Dapper&quot;&gt;Dapper&lt;/a&gt; library. Lets briefly go through the technologies we will be touching today that are not F#. If you already have experience with relational databases and are just here for the F#, you probably want to skip this introduction section.&lt;/p&gt;
&lt;h3&gt;Structured Query Language&lt;/h3&gt;
&lt;p&gt;Structured Query Language (SQL) is a domain specific language. What is a domain specific language? Well it is a language that is designed and used in a very specific domain. In this case, working with databases. I am not going to go into the mathematics as I did with functions because frankly the syntax is not nearly as similar, so it doesn&apos;t demonstrate much. Suffice to say it has its roots in relational algebra. It is a language that is easy to start using but hard to master.&lt;/p&gt;
&lt;p&gt;Imagine we want a table of data like this:&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt; &lt;tr&gt; 
    &lt;th&gt;id&lt;/th&gt; &lt;th&gt;name&lt;/th&gt;  &lt;th&gt;email&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;Sue&lt;/td&gt;   &lt;td&gt;sue@acme.com&lt;/td&gt;        &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;Bob&lt;/td&gt;   &lt;td&gt;khan@acme.com&lt;/td&gt;       &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;Neo&lt;/td&gt;   &lt;td&gt;neo@metacortex.com&lt;/td&gt;  &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;Fen&lt;/td&gt;   &lt;td&gt;fen@acme.com&lt;/td&gt;        &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;An Si&lt;/td&gt; &lt;td&gt;we@acme.com&lt;/td&gt;         &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;6&lt;/td&gt; &lt;td&gt;Jan&lt;/td&gt;   &lt;td&gt;lee@acme.com&lt;/td&gt;        &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h4&gt;Creating a table&lt;/h4&gt;
&lt;p&gt;So how would we create the structure for the table above? SQL is one of the more descriptive languages, because it is so specific. This is a good thing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE people (
                     id INTEGER PRIMARY KEY,
                     name TEXT NOT NULL,
                     email TEXT NOT NULL UNIQUE
                    );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Firstly we specify the name of the table to create, &lt;em&gt;people&lt;/em&gt;. Secondly, we specify the columns found in the table.&lt;br /&gt;
We have an &lt;code&gt;id&lt;/code&gt; that is an integer. We mark it as &lt;code&gt;PRIMARY KEY&lt;/code&gt; to indicate that it is the primary way to uniquely identify our record. The database will automatically insert an incrementing identifier for each record we insert.&lt;br /&gt;
Next we have &lt;code&gt;name&lt;/code&gt; which is a &lt;code&gt;TEXT&lt;/code&gt; field indicating we can store a &lt;code&gt;string&lt;/code&gt; value. &lt;code&gt;NOT NULL&lt;/code&gt; indicates we cannot leave this record out.
Finally, we have &lt;code&gt;email&lt;/code&gt; which is similar to &lt;code&gt;name&lt;/code&gt; except we have an extra constraint on it that it be &lt;code&gt;UNIQUE&lt;/code&gt;. The database will enforce these constraints of &lt;code&gt;NOT NULL&lt;/code&gt; and &lt;code&gt;UNIQUE&lt;/code&gt;, giving us some measure of protection from bad data.&lt;/p&gt;
&lt;h4&gt;Inserting a record&lt;/h4&gt;
&lt;p&gt;So we have our table but how do we get data in the database? Unsurprisingly we use &lt;code&gt;INSERT&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;INSERT INTO people (name,email) VALUES (&amp;quot;Bob&amp;quot;,&amp;quot;bob@acme.com&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We specify the table &lt;em&gt;people&lt;/em&gt; as the one we want to insert into and then the columns we will be supplying data for. Then we indicate the values to insert using &lt;code&gt;VALUES&lt;/code&gt; where the order of the values matches the order of the columns we specified.&lt;/p&gt;
&lt;h4&gt;Updating a record&lt;/h4&gt;
&lt;p&gt;What if some data changed since being inserted? Well of course SQL provides an &lt;code&gt;UPDATE&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;UPDATE people SET name=&apos;Bobby&apos;, email= &apos;bobby@acme.com&apos; WHERE id = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we indicate an &lt;code&gt;UPDATE&lt;/code&gt; on a specific table and then &lt;code&gt;SET&lt;/code&gt; whichever columns we want to change. You almost always want to specify a condition of which record to update. If you left off the &lt;code&gt;WHERE&lt;/code&gt; for this update it could set every &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; to &amp;quot;Bobby&amp;quot; and &amp;quot;bobby@acme.com&amp;quot;, except that we are protected by our &lt;code&gt;UNIQUE&lt;/code&gt; constraint on &lt;code&gt;email&lt;/code&gt;, so our constrain saves us from a potentially devastating loss of data.&lt;/p&gt;
&lt;h4&gt;Fetching records&lt;/h4&gt;
&lt;p&gt;How would we query data from it? We use a SQL &lt;code&gt;SELECT&lt;/code&gt; statement.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT id,name,email FROM people;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When selecting we start with &lt;code&gt;SELECT&lt;/code&gt; then specify the columns we want, then &lt;code&gt;FROM&lt;/code&gt; which table.&lt;/p&gt;
&lt;p&gt;When selecting data we can also use &lt;code&gt;WHERE&lt;/code&gt; to specify specific records.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT id,name,email FROM people WHERE id = 1;
SELECT id,name,email FROM people WHERE email LIKE &apos;%@acme.com&apos;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first query will return a single record since &lt;code&gt;id&lt;/code&gt; is always unique.&lt;br /&gt;
The second query will return all records where &lt;code&gt;email&lt;/code&gt; ends with &lt;em&gt;@acme.com&lt;/em&gt;, skipping only record number 3 in our example data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this tutorial we will only deal with data in a single table, we will not be going into relationships between tables. Relationships are a very powerful aspect of some databases and worth looking into further.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;SQLite&lt;/h3&gt;
&lt;p&gt;SQLite is a very popular database that has some unique characteristics that make it desireable for a tutorial like this. It requires no server so we interact directly with the file system from our process. This means it is very easy to get going with as it has zero setup.&lt;/p&gt;
&lt;p&gt;We will be using the &lt;a href=&quot;https://www.nuget.org/packages/System.Data.SQLite/&quot;&gt;System.Data.SQLite Nuget package&lt;/a&gt; to interact with a local &lt;a href=&quot;https://www.sqlite.org&quot;&gt;SQLite&lt;/a&gt; database. The database is created in our code when we use it for the first time.&lt;/p&gt;
&lt;h3&gt;Dapper&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/StackExchange/Dapper&quot;&gt;Dapper&lt;/a&gt; is a very popular mini-ORM. An ORM (Object Relational Mapper) is typically a library used in your code that maps relational data from a database to objects in your programming language of choice. While a full ORM will typically generate all queries, joins, and mappings for you, a mini-ORM will usually require you to still write some SQL and then it will do some mapping by convention for you. We will be visiting some Dapper code soon.&lt;/p&gt;
&lt;h2&gt;Now to the good part&lt;/h2&gt;
&lt;p&gt;Although Dapper is a great library for flexibly working with databases, it is written in and for C#. So the first thing we are going to do each time we use Dapper is wrap its functionality it in functions that surfaces Dapper in a more functional way.&lt;/p&gt;
&lt;h3&gt;Executing SQL&lt;/h3&gt;
&lt;p&gt;Dapper exposes the following C# function that we will be using a lot. It executes a SQL statement against a database connection and allows you to optionally pass an &lt;code&gt;object&lt;/code&gt; in for parameters for the SQL statement. Don&apos;t worry if this doesn&apos;t make complete sense now, it should make more sense when you see an example.&lt;/p&gt;
&lt;p&gt;It is known as an &lt;strong&gt;extension method&lt;/strong&gt; and is on an instance of &lt;code&gt;IDbConnection&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public static Task&amp;lt;int&amp;gt; Execute(this IDbConnection cnn, string sql, object param = null, SqlTransaction transaction = null)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what is the problem here? Well for one remember in &lt;a href=&quot;/how-to-fsharp-pt-8&quot;&gt;part 8&lt;/a&gt; we looked at how to handle exceptions more functionally? The above method will throw an exception if something goes wrong. Lets fix that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;open Dapper
open System.Data.Common

// DbConnection -&amp;gt; string -&amp;gt; &apos;b -&amp;gt; Result&amp;lt;int,exn&amp;gt;
let execute (connection:#DbConnection) (sql:string) (parameters:_) =
    try
        let result = connection.Execute(sql, parameters)
        Ok result
    with
    | ex -&amp;gt; Error ex
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: I am catching ALL errors here, contrary to my advice in the previous &lt;a href=&quot;/how-to-fsharp-pt-8&quot;&gt;post on error handling&lt;/a&gt;. This is to keep things simple and concentrate on executing SQL.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we have a function called &lt;code&gt;execute&lt;/code&gt; now with signature &lt;code&gt;DbConnection -&amp;gt; string -&amp;gt; &apos;b -&amp;gt; Result&amp;lt;int,exn&amp;gt;&lt;/code&gt;. It makes use of the Dapper extension method &lt;code&gt;Execute&lt;/code&gt; but we wrap it in a &lt;code&gt;try..with&lt;/code&gt; expression and return a type &lt;code&gt;Result&amp;lt;int,exn&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To use &lt;code&gt;execute&lt;/code&gt; we need an instance of a &lt;code&gt;DbConnection&lt;/code&gt;. Lets write a small function that will return us a database connection and open that connection to the database, ready to use.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// string -&amp;gt; SQLiteConnection
let conn (db:string) =
    let c = new SQLiteConnection(sprintf &amp;quot;Data Source=%s.sqlite&amp;quot; db)
    c.Open()
    c
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Creation&lt;/h4&gt;
&lt;p&gt;So we now have all the building blocks to execute a SQL statement. Lets create a &lt;em&gt;people&lt;/em&gt; table in a database called &lt;em&gt;test&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// DbConnection -&amp;gt; Result&amp;lt;int,exn&amp;gt;
let createPeopleTable (connection:DbConnection) =
    let sql = &amp;quot;CREATE TABLE IF NOT EXISTS people (
                 id INTEGER PRIMARY KEY,
                 name TEXT NOT NULL,
                 email text NOT NULL UNIQUE
                );&amp;quot;
    execute connection sql None

// create a connection and the table
let dbName = &amp;quot;test&amp;quot;
let connection = conn dbName
createPeopleTable connection
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Insertion&lt;/h4&gt;
&lt;p&gt;So now we have a table called &lt;em&gt;people&lt;/em&gt;. Lets insert a record.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// DbConnection -&amp;gt; string -&amp;gt; string -&amp;gt; Result&amp;lt;int,exn&amp;gt;
let insertPerson (connection:DbConnection) name email  =
    let data = [(&amp;quot;@name&amp;quot;,box name);(&amp;quot;@email&amp;quot;,box email)] |&amp;gt; dict |&amp;gt; fun d -&amp;gt; new Dapper.DynamicParameters(d)
    let sql = &amp;quot;INSERT INTO people (name,email) VALUES (@name,@email);&amp;quot;
    execute connection sql data

// insert a person from name and email
insertPerson connection &amp;quot;Sue&amp;quot; &amp;quot;sue@acme.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in the above code we make use of a type called &lt;code&gt;DynamicParameters&lt;/code&gt; from Dapper. This takes in a dictionary so we create a list of name value tuples, and convert that to a dictionary before passing it to &lt;code&gt;DynamicParameters&lt;/code&gt;. Worth noting here is that the constructor of &lt;code&gt;DynamicParameters&lt;/code&gt; takes &lt;code&gt;IDictionary&amp;lt;string,obj&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Which brings us to &lt;code&gt;box&lt;/code&gt;. It has a signature of &lt;code&gt;&apos;T -&amp;gt; obj&lt;/code&gt;, so when applied to the values in the tuples we get type &lt;code&gt;IDictionary&amp;lt;string,obj&amp;gt;&lt;/code&gt; as needed for the constructor of &lt;code&gt;DynamicParameters&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This fails with some pretty cryptic errors of &lt;em&gt;Insufficient parameters supplied to the command&lt;/em&gt; if you do not call the &lt;code&gt;box&lt;/code&gt; function on the value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another way of achieving the same, and usually a better option, is to use an actual type to represent the insert data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type CreatePerson = { name:string; email:string }
let insertPerson (connection:DbConnection) (person:CreatePerson)  =
    let sql = &amp;quot;INSERT INTO people (name,email) VALUES (@name,@email);&amp;quot;
    execute connection sql person

insertPerson connection { name = &amp;quot;Ali&amp;quot;; email = &amp;quot;ali@acme.com&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Update&lt;/h4&gt;
&lt;p&gt;We could of course have both variations with the update as well.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// Option 1: multiple arguments
let updatePerson (connection:DbConnection) id name email =
    let data = [(&amp;quot;@id&amp;quot;,box id);(&amp;quot;@name&amp;quot;,box name);(&amp;quot;@email&amp;quot;,box email)] 
                |&amp;gt; dict |&amp;gt; fun d -&amp;gt; new Dapper.DynamicParameters(d)
    let sql = &amp;quot;UPDATE people SET name=@name, email=@email WHERE id=@id&amp;quot;
    execute connection sql data

// Option 2: a record with all data
[&amp;lt;CLIMutable&amp;gt;]
type UpdatePerson = { id:int; name:string; email:string }
let updatePerson (connection:DbConnection) (person:UpdatePerson) =
    let sql = &amp;quot;UPDATE people SET name=@name, email=@email WHERE id=@id&amp;quot;
    execute connection sql person

// use option 2
let updatedPerson = { id=2; name=&amp;quot;Kublai Khan&amp;quot;; email=&amp;quot;kublai.k@acme.com&amp;quot;}
updatePerson connection updatedPerson
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: We put the &lt;code&gt;[&amp;lt;CliMutable&amp;gt;]&lt;/code&gt; attribute on the type because later on we use this type to return rows from the database. If left off you will receive an error: &lt;em&gt;A parameterless default constructor or one matching signature (System.Int64 id, System.String name, System.String email) is required for UpdatePerson materialization&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you can see, option 2 will handle change a lot better than option 1 if more fields need to be added it a person.&lt;/p&gt;
&lt;h2&gt;Querying for data&lt;/h2&gt;
&lt;p&gt;So far we have looked at SQL that changes state but doesn&apos;t really return much, other than the number of changes. Lets now look at querying for data.&lt;/p&gt;
&lt;p&gt;First we need to write our functional wrappers around Dapper. We will create a function for querying for multiple records (&lt;code&gt;query&lt;/code&gt;) and another for querying a single record (&lt;code&gt;querySingle&lt;/code&gt;). The make use of Dapper&apos;s &lt;code&gt;Query&lt;/code&gt; and &lt;code&gt;QuerySingleOrDefault&lt;/code&gt; methods respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// DbConnection -&amp;gt; string -&amp;gt; IDictionary&amp;lt;string,obj&amp;gt; -&amp;gt; Result&amp;lt;seq&amp;lt;&apos;T&amp;gt;,exn&amp;gt;
let query (connection:#DbConnection) (sql:string) (parameters:IDictionary&amp;lt;string, obj&amp;gt; option) : Result&amp;lt;seq&amp;lt;&apos;T&amp;gt;,exn&amp;gt; =
    try
        let result =
            match parameters with
            | Some p -&amp;gt; connection.Query&amp;lt;&apos;T&amp;gt;(sql, p)
            | None -&amp;gt; connection.Query&amp;lt;&apos;T&amp;gt;(sql)
        Ok result
    with
    | ex -&amp;gt; Error ex

// DbConnection -&amp;gt; string -&amp;gt; IDictionary&amp;lt;string,obj&amp;gt; -&amp;gt; Result&amp;lt;&apos;T,exn&amp;gt;
let querySingle (connection:#DbConnection) (sql:string) (parameters:IDictionary&amp;lt;string, obj&amp;gt; option) =
    try
        let result =
            match parameters with
            | Some p -&amp;gt; connection.QuerySingleOrDefault&amp;lt;&apos;T&amp;gt;(sql, p)
            | None -&amp;gt; connection.QuerySingleOrDefault&amp;lt;&apos;T&amp;gt;(sql)
        
        if isNull (box result) then Ok None
        else Ok (Some result)

    with
    | ex -&amp;gt; Error ex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that for &lt;code&gt;query&lt;/code&gt; I specify the return type, this is purely so the return type uses &lt;code&gt;seq&amp;lt;&apos;T&amp;gt;&lt;/code&gt; instead of &lt;code&gt;IEnumerable&amp;lt;&apos;T&amp;gt;&lt;/code&gt;. Errors are returned as before and for &lt;code&gt;querySingle&lt;/code&gt; any &lt;code&gt;null&lt;/code&gt; is returned as an &lt;code&gt;option&lt;/code&gt; type as we discussed in &lt;a href=&quot;/how-to-fsharp-pt-6&quot;&gt;part 6&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So lets use &lt;code&gt;query&lt;/code&gt; to create a search function for all ACME employees.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let findAcmeEmployees (connection:DbConnection) =
    let sql = &amp;quot;SELECT id,name,email FROM people WHERE email LIKE &apos;%@acme.com&apos;&amp;quot;
    query connection sql None

match (findAcmeEmployees connection) with 
| Ok people -&amp;gt; printfn &amp;quot;Found %i employees&amp;quot; (Seq.length people)
| Error ex -&amp;gt; printfn &amp;quot;%A&amp;quot; ex.Message
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, we will demonstrate fetching a single record by &lt;strong&gt;id&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let personById (connection:DbConnection) id =
    let data = [(&amp;quot;@id&amp;quot;,box id)] |&amp;gt; dict |&amp;gt; Some
    let sql = &amp;quot;SELECT id,name,email FROM people WHERE id = @id&amp;quot;
    querySingle connection sql data

// use the function to fetch person with id 1 and print results out
match (personById connection 1) with
| Ok (Some(person)) -&amp;gt; printfn &amp;quot;Found %i : %s %s&amp;quot; person.id person.name person.email
| Ok None -&amp;gt; printfn &amp;quot;No person found&amp;quot;
| Error ex -&amp;gt; printfn &amp;quot;%A&amp;quot; ex.Message
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how we handle different possibilities when evaluating a query result. We have the happy case where we have no errors and find someone. We have no errors but do not find someone. And finally we handle errors.&lt;/p&gt;
&lt;h2&gt;Cleaning up&lt;/h2&gt;
&lt;p&gt;Remeber the &lt;code&gt;conn&lt;/code&gt; method we created at the beginning of the code walkthrough? It gave us back an open connection because it called &lt;code&gt;Open()&lt;/code&gt; on the connection before returning it. If you have performed the operation on the connection, but may use it again, call &lt;code&gt;Close()&lt;/code&gt; on the connection. If you are done with the operation, call &lt;code&gt;Dispose()&lt;/code&gt;. Once disposed you cannot use the connection again and will need to create another if needed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let cleanup (connection:DbConnection) =
    connection.Close()
    connection.Dispose()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Technically, you could just call &lt;code&gt;Dispose()&lt;/code&gt; if you are not planning on reusing the connection.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We covered quite a lot today but now you know the basics of working with a database in F#. We saw how we can use Dapper to ease passing in parameters and mapping to types. We wrote a functional wrapper around Dapper to handle errors and &lt;code&gt;null&lt;/code&gt;s. And we saw how to persist to and query from a database that we created.&lt;/p&gt;
&lt;p&gt;What we covered here is a pretty standard way to work with a database. F# actually has some very novel ways of working with databases using &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/&quot;&gt;Type Provider&lt;/a&gt;s like &lt;a href=&quot;https://github.com/fsprojects/SQLProvider&quot;&gt;SQLProvider&lt;/a&gt; and &lt;a href=&quot;https://github.com/rspeele/Rezoom.SQL&quot;&gt;Rezoom.SQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the final &lt;strong&gt;How to F#&lt;/strong&gt; coming soon we will put everything we have learned together to create you first F# application.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlitetutorial.net/download-install-sqlite/&quot;&gt;Install SQLite binaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlitetutorial.net/sqlite-create-table/&quot;&gt;CREATE TABLE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlitetutorial.net/sqlite-insert/&quot;&gt;INSERT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sqlitetutorial.net/sqlite-update/&quot;&gt;UPDATE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/cli-types/#boxing-and-unboxing&quot;&gt;Boxing for fun and profit&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-8/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-8/"/>
    <title>How to F# - Part 8</title>
    <updated>2018-10-30T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-8/</uri>
    </author>
    <summary type="html">&lt;p&gt;Even with all the pure functions we could ask for, eventually our applications are going to have to interact with the unpredictable outside world. Also, sometimes we just mess up. In this post we look at ways of dealing with errors in our applications.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Throwing our toys out the pram&lt;/h2&gt;
&lt;p&gt;In South Africa we say &amp;quot;Throwing your toys out the cot&amp;quot; but it is the same. When a child is upset, they tend to throw whatever they have in hand to express their distress. When you cannot communicate your intent in another way, this is how you get your parents&apos; attention.&lt;/p&gt;
&lt;p&gt;With that backdrop lets introduce &lt;code&gt;Exception&lt;/code&gt;s. When an error occurs, the normal execution of the application stops and an error is raised as an object that contains information about the error that occurred. Exceptions can happen for example when reading from a file that is not where you expect it to be.&lt;/p&gt;
&lt;p&gt;You can also raise exceptions yourself.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;open System
// int -&amp;gt; int
let doublePositiveNumber x =
    if(x &amp;lt;0) then raise (new ArgumentException(&amp;quot;Argument must be positive number&amp;quot;))
    else x*2

let y = doublePositiveNumber 2 // val y : int = 4
let z = doublePositiveNumber -1 // ERROR: System.ArgumentException: Argument must be positive number
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where &lt;code&gt;ArgumentException&lt;/code&gt; (which is in the &lt;code&gt;System&lt;/code&gt; namespace) is a type that inherits from &lt;code&gt;SystemException&lt;/code&gt; which inherits from &lt;code&gt;Exception&lt;/code&gt;. We haven&apos;t covered object-oriented topics in this series but basically that means that &lt;code&gt;ArgumentException&lt;/code&gt; inherits features from &lt;code&gt;SystemException&lt;/code&gt; which inherits from &lt;code&gt;Exception&lt;/code&gt;. All errors that occur during application execution inherit from &lt;code&gt;Exception&lt;/code&gt;. We will see an implication of this later when we explore ways of handling exceptions.&lt;/p&gt;
&lt;p&gt;F# also provides a really easy way to raise an exception with a string message using &lt;code&gt;failwith&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let doublePositiveNumber x =
    if(x &amp;lt;0) then failwith &amp;quot;Argument must be positive number&amp;quot;
    else x*2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Custom exceptions&lt;/h2&gt;
&lt;p&gt;In F# defining custom exceptions is simple (especially compared to C#). Lets define a custom exception of type &lt;code&gt;MustBePositiveException&lt;/code&gt; that takes a tuple of type &lt;code&gt;string * int&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;exception MustBePositiveException of string * int
let doublePositiveNumber x =
    if(x &amp;lt;0) then raise (MustBePositiveException(&amp;quot;Argument must be positive number&amp;quot;,x))
    else x*2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will see soon how we can handle exceptions that occur.&lt;/p&gt;
&lt;h2&gt;Handling exceptions&lt;/h2&gt;
&lt;p&gt;The semantics of handling exceptions is that we try do something with the possibility of one or more exceptions occurring. Lets look at an example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;open System
let z = try
            doublePositiveNumber -1
        with
        | :? Exception as ex -&amp;gt; printfn &amp;quot;ERROR: %s&amp;quot; ex.Message; 0 // don&apos;t do this
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We &lt;code&gt;try&lt;/code&gt; execute &lt;code&gt;doublePositiveNumber&lt;/code&gt; and when it fails it falls though to the &lt;code&gt;with&lt;/code&gt; part of the expression. Here we pattern match on the type using &lt;code&gt;:? Exception&lt;/code&gt; and return &lt;code&gt;0&lt;/code&gt; after printing the exception &lt;code&gt;Message&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So we come to out first tip on exception handling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP 1: Only handle exceptions you are expecting. Let the exceptional cases bubble up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does this mean in practice? It means you should be more precise than handling &lt;code&gt;Exception&lt;/code&gt;. Usually we want to do something drastic (like crash the application or cancel processing that HTTP request) if something happened that we did not cater for at all.&lt;/p&gt;
&lt;p&gt;Remember that &lt;code&gt;Exception&lt;/code&gt; is the type that just about any exception will inherit from, so by adding that as the type to handle, we effectively catch EVERY exception.&lt;/p&gt;
&lt;p&gt;Lets see how we can&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// int
let z = try
            doublePositiveNumber -1
        with
        | MustBePositiveException(msg,nr) -&amp;gt; printfn &amp;quot;ERROR with number %i: %s&amp;quot; nr msg; 0
        | NumberTooLarge(msg,nr) -&amp;gt; printfn &amp;quot;ERROR with number %i: %s&amp;quot; nr msg; Int32.MaxValue
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP 2: If you can do something meaningful when an error occurs handle it as close to the exception source as possible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we are now being more precise about handling &lt;code&gt;MustBePositiveException&lt;/code&gt;, which is better.&lt;br /&gt;
NOTE: If we were raising an error using &lt;code&gt;failwith&lt;/code&gt; we would handle with &lt;code&gt;| Failure(msg) -&amp;gt; printfn &amp;quot;%s&amp;quot; msg&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Handling expected exceptions&lt;/h2&gt;
&lt;p&gt;So in the previous example we were catching the &lt;code&gt;MustBePositiveException&lt;/code&gt; exception and after printing returning &lt;code&gt;0&lt;/code&gt;. Is this really a good default behavior? Maybe &lt;code&gt;-1&lt;/code&gt;? This is hardly elegant or intent revealing. F# provides a functional solution to this problem in the form of &lt;code&gt;Result&lt;/code&gt;. &lt;code&gt;Result&lt;/code&gt; is similar to &lt;code&gt;Option&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; in that it provides an abstraction for dealing with a problem that takes a specific pattern. The result of a function call that can fail is either success, or a failure in some way. Lets change our calling code to return this &lt;code&gt;Result&lt;/code&gt; type.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// Result&amp;lt;int,exn&amp;gt;
let z = try
            Ok (doublePositiveNumber -1)
        with
        | MustBePositiveException(msg,nr) as ex -&amp;gt; Error(ex)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we call &lt;code&gt;Ok&lt;/code&gt; with the result if the call succeeds and &lt;code&gt;Error&lt;/code&gt; if it throws an exception. Note the signature of the return type is &lt;code&gt;Result&amp;lt;int,exn&amp;gt;&lt;/code&gt;. The first generic parameter is an &lt;code&gt;int&lt;/code&gt; for the successful case and the second is of type &lt;code&gt;exn&lt;/code&gt;, an F# exception. If we had instead just send back the exception message with &lt;code&gt;Error(msg)&lt;/code&gt; the return type would have been &lt;code&gt;Result&amp;lt;in,string&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Working with Result&lt;/h2&gt;
&lt;p&gt;Lets take a look at a complete example and step through it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We define our function that throw an exception&lt;/li&gt;
&lt;li&gt;We call the function within a &lt;code&gt;try&lt;/code&gt; expression&lt;/li&gt;
&lt;li&gt;We handle the &lt;code&gt;Result&lt;/code&gt; with pattern matching&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let doublePositiveNumber x =
    if(x &amp;lt;0) then failwith &amp;quot;Argument must be positive number&amp;quot;
    else x*2

let safeDoublePositiveNumber x = 
        try
            Ok (doublePositiveNumber x)
        with
        | Failure(msg) -&amp;gt; Error(msg)

let z = safeDoublePositiveNumber -1

match z with
| Ok i -&amp;gt; printfn &amp;quot;The answer is %i&amp;quot; i
| Error msg -&amp;gt; printfn &amp;quot;ERROR: %s&amp;quot; msg
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: ERROR: Argument must be positive number&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This leads to our third tip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP 3: In the majority of cases you cannot do anything about the exception at the source. Return &lt;code&gt;Result&lt;/code&gt; for any expected exceptions and let the calling code decide what to do.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could of course remove the need for &lt;code&gt;safeDoublePositiveNumber&lt;/code&gt; by never throwing the exception in the first place.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let doublePositiveNumber x =
    if(x &amp;lt; 0) then Error &amp;quot;Argument must be positive number&amp;quot;
    else Ok (x*2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our final tip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP 4: Rather than raising exceptions for non-exceptional cases, instead just return &lt;code&gt;Result&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This was a brief introduction to exception handling. There are still more concepts to learn here so I do encourage you to go through the links in the resources section if you would like to learn more. You might want to look into &lt;code&gt;finally&lt;/code&gt;, which allows execution of code regardless of the &lt;code&gt;try&lt;/code&gt; succeeding or not.&lt;/p&gt;
&lt;p&gt;Once you are comfortable with the concepts here I also suggest looking at the Railway oriented programming link in the resources.&lt;/p&gt;
&lt;p&gt;To review the tips:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Only handle exceptions you are expecting. Let the exceptional cases bubble up.&lt;/li&gt;
&lt;li&gt;If you can do something meaningful when an error occurs handle it as close to the exception source as possible.&lt;/li&gt;
&lt;li&gt;In the majority of cases you cannot do anything about the exception at the source. Return &lt;code&gt;Result&lt;/code&gt; for any expected exceptions and let the calling code decide what to do.&lt;/li&gt;
&lt;li&gt;Rather than raising exceptions for non-exceptional cases, instead just return &lt;code&gt;Result&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So don&apos;t be a child. Communicate your errors back rather than throwing your exceptions out the functions (that metaphor aged badly).&lt;/p&gt;
&lt;p&gt;Next in the series we will be looking at a common occurrence in software development. &lt;a href=&quot;/how-to-fsharp-pt-9&quot;&gt;Working with a database&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Don%27t_throw_your_toys_out_of_the_pram&quot;&gt;Throwing your toys out the pram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)&quot;&gt;Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/exception-handling/&quot;&gt;Microsoft docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/exceptions/&quot;&gt;Further reading for fun and profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/rop/&quot;&gt;Railway oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@chuttersnap&quot;&gt;Chuttersnap&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-7/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-7/"/>
    <title>How to F# - Part 7</title>
    <updated>2018-10-28T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-7/</uri>
    </author>
    <summary type="html">&lt;p&gt;So after much threatening in past posts, we will finally be diving a little deeper into collections in F#. We will look at a few of the most commonly used functions on the collection modules by manipulating a &lt;code&gt;list&lt;/code&gt; of people that we randomly generate.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;So lets go through a few common actions you would want to do on a collection. We will use &lt;code&gt;list&lt;/code&gt; as an example through most of this post but what we learn applies to &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;seq&lt;/code&gt; as well. Before we do that though let us briefly touch on the &lt;code&gt;map&lt;/code&gt; type again.&lt;/p&gt;
&lt;h2&gt;All the beautiful people (Creating data)&lt;/h2&gt;
&lt;p&gt;To work with lists we will need some data. Often data comes in the form of tables we need to join together. We will start simple though. Lets create 2 &lt;code&gt;map&lt;/code&gt;s with numbers corresponding to the first names for the 1st and second names for the other.&lt;/p&gt;
&lt;div class=&quot;table-responsive&quot;&gt;&lt;table class=&quot;table table-hover&quot;&gt;
&lt;thead&gt; &lt;tr&gt; &lt;th&gt;#&lt;/th&gt; &lt;th&gt;First name&lt;/th&gt; &lt;th&gt;#&lt;/th&gt; &lt;th&gt;Last name&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;Sue&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt; &lt;td&gt;Ali&lt;/td&gt;     &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;Bob&lt;/td&gt;    &lt;td&gt;2&lt;/td&gt; &lt;td&gt;Khan&lt;/td&gt;    &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;Neo&lt;/td&gt;    &lt;td&gt;3&lt;/td&gt; &lt;td&gt;Jacobs&lt;/td&gt;  &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;Fen&lt;/td&gt;    &lt;td&gt;4&lt;/td&gt; &lt;td&gt;Jensen&lt;/td&gt;  &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;5&lt;/td&gt; &lt;td&gt;An Si&lt;/td&gt;  &lt;td&gt;5&lt;/td&gt; &lt;td&gt;Wu&lt;/td&gt;      &lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;6&lt;/td&gt; &lt;td&gt;Jan&lt;/td&gt;    &lt;td&gt;6&lt;/td&gt; &lt;td&gt;Lee&lt;/td&gt;     &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;!-- | # | First name    | # | Last name |
|---|---------------|---|-----------|
| 1 | Sue           | 1 | Ali       |
| 2 | Bob           | 2 | Khan      |
| 3 | Neo           | 3 | Jacobs    |
| 4 | Fen           | 4 | Jensen    |
| 5 | An Si         | 5 | Wu        |
| 6 | Jan           | 6 | Lee       | --&gt;
&lt;p&gt;We will use these to generate a list of people later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let fNames = [ (1, &amp;quot;Sue&amp;quot;); (2, &amp;quot;Bob&amp;quot;); (3, &amp;quot;Neo&amp;quot;); (4, &amp;quot;Fen&amp;quot;); (5, &amp;quot;An Si&amp;quot; ); (6, &amp;quot;Jan&amp;quot;)] |&amp;gt; Map.ofList
let lNames = [ (1, &amp;quot;Ali&amp;quot;); (2, &amp;quot;Khan&amp;quot;); (3, &amp;quot;Jacobs&amp;quot;); (4, &amp;quot;Jensen&amp;quot;); (5, &amp;quot;Wu&amp;quot; ); (6, &amp;quot;Lee&amp;quot;)] |&amp;gt; Map.ofList

// Map&amp;lt;int,string&amp;gt; -&amp;gt; Map&amp;lt;int,string&amp;gt; -&amp;gt; int -&amp;gt; string
let generateName fnames lnames i =
    let random = new System.Random(i) //don&apos;t new up  Random every time in a real app
    let fo = random.Next(1,6) // get a random number between 1 - 6
    let lo = random.Next(1,6) // get a random number between 1 - 6
    sprintf &amp;quot;%s %s&amp;quot; (Map.find fo fnames) (Map.find lo lnames)

// int -&amp;gt; string
let nameGen = generateName fNames lNames
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We curry &lt;code&gt;generateName&lt;/code&gt; with the &lt;code&gt;map&lt;/code&gt;s of &lt;code&gt;fNames&lt;/code&gt; (first names) and &lt;code&gt;lNames&lt;/code&gt; (last names) transforming a function of signature &lt;code&gt;Map&amp;lt;int,string&amp;gt; -&amp;gt; Map&amp;lt;int,string&amp;gt; -&amp;gt; int -&amp;gt; string&lt;/code&gt; into &lt;code&gt;int -&amp;gt; string&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So calling &lt;code&gt;nameGen&lt;/code&gt; will give us a random name like &lt;em&gt;&amp;quot;An Ali&amp;quot;&lt;/em&gt; or &lt;em&gt;&amp;quot;Neo Jenson&amp;quot;&lt;/em&gt;. Firstly we create 2 &lt;code&gt;map&lt;/code&gt;s created from &lt;code&gt;list&lt;/code&gt;s of &lt;code&gt;int * string&lt;/code&gt; tuples using &lt;code&gt;Map.ofList&lt;/code&gt;. In the &lt;code&gt;generateName&lt;/code&gt; function we randomly get a first name and last name from the &lt;code&gt;map&lt;/code&gt;s by using &lt;code&gt;Map.find&lt;/code&gt; which has the signature of &lt;code&gt;&apos;Key -&amp;gt; Map&amp;lt;&apos;Key,&apos;T&amp;gt; -&amp;gt; &apos;T&lt;/code&gt;. Basically given a key and a &lt;code&gt;map&lt;/code&gt;, it will return the value found at that key. Since we randomly generate the key, we get a random name each time.&lt;/p&gt;
&lt;h2&gt;And there was light (Creating a list)&lt;/h2&gt;
&lt;p&gt;Although we can create a list with &lt;code&gt;[ expression ]&lt;/code&gt; lets look at the &lt;code&gt;Map.init&lt;/code&gt; function which has the signature &lt;code&gt;int -&amp;gt; (int - &apos;T) -&amp;gt; &apos;T list&lt;/code&gt;. Lets break this down:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt; - size of the list to create&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(int - &apos;T)&lt;/code&gt; - a function that takes in the current position in the list being generated and returns an instance of type &apos;T to place at that position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&apos;T list&lt;/code&gt; - the list that will be created of type &lt;code&gt;&apos;T&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So we want to create a &lt;code&gt;Person list&lt;/code&gt;. We need a function &lt;code&gt;int -&amp;gt; Person&lt;/code&gt;. We curry in the &lt;code&gt;nameGen&lt;/code&gt; to generate a &lt;code&gt;Person&lt;/code&gt; with a randomly generated name.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type Person = { Id:int; Name:string }
// (int -&amp;gt; string) -&amp;gt; int -&amp;gt; Person
let generatePerson gen i = { Id = i; Name = gen(i) }
// int -&amp;gt; Person
let personGen = generatePerson nameGen

let people = List.init 10 personGen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;code&gt;people&lt;/code&gt; will be a list of &lt;strong&gt;10&lt;/strong&gt; &lt;code&gt;Person&lt;/code&gt; instances.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[   
    { Id = 0; Name = &amp;quot;Wu Fen&amp;quot; }  
    { Id = 1; Name = &amp;quot;Bob Ali&amp;quot; }  
    { Id = 2; Name = &amp;quot;Fen Jacobs&amp;quot; }  
    { Id = 3; Name = &amp;quot;Bob Jensen&amp;quot; }
    { Id = 4; Name = &amp;quot;An Si Wu&amp;quot; }  
    { Id = 5; Name = &amp;quot;Bob Khan&amp;quot; }
    { Id = 6; Name = &amp;quot;An Si Jacobs&amp;quot; }  
    { Id = 7; Name = &amp;quot;Bob Wu&amp;quot; }  
    { Id = 8; Name = &amp;quot;An Si Ali&amp;quot; }  
    { Id = 9; Name = &amp;quot;Neo Jensen&amp;quot; }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;These are not the elements you are looking for (Finding an element)&lt;/h2&gt;
&lt;p&gt;Now that we have a list, lets see how we work with it. A common need while programming is to find an element in a collection.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let bob = people |&amp;gt; List.find (fun p -&amp;gt; p.Name.StartsWith(&amp;quot;Bob&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;List.find&lt;/code&gt; which has the signature &lt;code&gt;(&apos;T -&amp;gt; bool) -&amp;gt; &apos;T list -&amp;gt; &apos;T&lt;/code&gt;. In our case that would be a function &lt;code&gt;(Person -&amp;gt; bool)&lt;/code&gt; that returns &lt;code&gt;true&lt;/code&gt; if it is the element you are looking for. Now this is all good and well if there is a &amp;quot;Bob&amp;quot; in the list. But it is a randomly generated collection of names, what if we want to find a specific &amp;quot;Bob&amp;quot; and he isn&apos;t in the list?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let bob = people |&amp;gt; List.find (fun p -&amp;gt; p = &amp;quot;Bob Khan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming you do not have a &amp;quot;Bob Khan&amp;quot; in your list, you will get an exception thrown.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System.Collections.Generic.KeyNotFoundException: An index satisfying the predicate was not found in the collection.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember in &lt;a href=&quot;/how-to-fsharp-pt-6&quot;&gt;a previous post&lt;/a&gt; we dealt with handling cases when there is no data using &lt;code&gt;option&lt;/code&gt;. Well this is one of those times. Lets use a very similar function to &lt;code&gt;List.find&lt;/code&gt; called &lt;code&gt;List.tryFind&lt;/code&gt; that has the signature &lt;code&gt;(&apos;T -&amp;gt; bool) -&amp;gt; &apos;T list -&amp;gt; &apos;T option&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let maybeBob = people |&amp;gt; List.tryFind (fun p -&amp;gt; p.Name = &amp;quot;Bob Khan&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;val maybeBob : Person option = Some {Id = 5; Name = &amp;quot;Bob Khan&amp;quot;;}
OR
val maybeBob : Person option = None&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So depending on whether the &lt;code&gt;list&lt;/code&gt; contains someone named &amp;quot;Bob Khan&amp;quot; the function will return &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Take what you need (Filtering a list)&lt;/h2&gt;
&lt;p&gt;Sometimes we are not looking for a specific element but multiple elements. Maybe we are looking for elements that match some criteria or are wanting to exclude based on something. Either way we are wanting to filter the collection. For &lt;code&gt;list&lt;/code&gt;s we use the &lt;code&gt;List.filter&lt;/code&gt; function which has the signature &lt;code&gt;(&apos;T -&amp;gt; bool) -&amp;gt; &apos;T list -&amp;gt; &apos;T list&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let bobs = people |&amp;gt; List.filter (fun p -&amp;gt; p.Name.StartsWith(&amp;quot;Bob&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So given a function that returns &lt;code&gt;true&lt;/code&gt; if the element should be in the &lt;code&gt;list&lt;/code&gt;, you will get a new &lt;code&gt;list&lt;/code&gt; with the matching elements in it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;[   
    { Id = 1; Name = &amp;quot;Bob Ali&amp;quot; }  
    { Id = 3; Name = &amp;quot;Bob Jenson&amp;quot; }  
    { Id = 5; Name = &amp;quot;Bob Khan&amp;quot; }  
    { Id = 7; Name = &amp;quot;Bob Wu&amp;quot; }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in my &lt;code&gt;list&lt;/code&gt;, 4 out of 10 people had a first name of &amp;quot;Bob&amp;quot;.&lt;/p&gt;
&lt;h2&gt;A change is as good as a holiday (Working with list elements)&lt;/h2&gt;
&lt;p&gt;Imagine we have our collection of people but a request comes in that the names be in the format &lt;em&gt;Surname, First Names&lt;/em&gt;.
First things first, lets write a function &lt;code&gt;leadingLastName&lt;/code&gt; that will take in &lt;em&gt;&amp;quot;Neo Jensen&amp;quot;&lt;/em&gt; and transform it to &lt;em&gt;&amp;quot;Jensen, Neo&amp;quot;&lt;/em&gt; and &lt;em&gt;&amp;quot;An Si Ali&amp;quot;&lt;/em&gt; to &lt;em&gt;&amp;quot;Ali, An Si&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// char -&amp;gt; string -&amp;gt; string[]
let split (sep:char) (s:string) = s.Split([|sep|])

// string -&amp;gt; string
let leadingLastName (name:string) = 
    let lastNameToFront (names:string array) = 
        match names with
        | [||] -&amp;gt; &amp;quot;&amp;quot;
        | [|x|] -&amp;gt; x
        | [|x;y|] -&amp;gt; String.concat &amp;quot;, &amp;quot; ([|y;x|])
        | _ -&amp;gt; [|yield ([Array.last names;&amp;quot;,&amp;quot;] |&amp;gt; String.concat &amp;quot;&amp;quot;); for i=0 to ((Array.length names)-2) do yield names.[i] |] |&amp;gt; String.concat &amp;quot; &amp;quot;

    name |&amp;gt; split &apos; &apos;
    |&amp;gt;lastNameToFront
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This uses &lt;code&gt;match&lt;/code&gt; to pattern match on the &lt;code&gt;array&lt;/code&gt;. Lets break it down quickly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[||] -&amp;gt; &amp;quot;&amp;quot;&lt;/code&gt; - Matches when &lt;code&gt;array&lt;/code&gt; is empty: return name is empty&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[|x|] -&amp;gt; x&lt;/code&gt; - Matches when name is a single element: name is a single name like &amp;quot;Cher&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[|x;y|] -&amp;gt; String.concat &amp;quot;, &amp;quot; ([|y;x|])&lt;/code&gt; - Matches when &lt;code&gt;array&lt;/code&gt; is 2 elements: name and surname so swaps and adds a ,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt; - this one is quite complex but basically it moves the last element to the front and adds a , after it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next we will use &lt;code&gt;leadingLastName&lt;/code&gt; with &lt;code&gt;List.map&lt;/code&gt; which has the signature &lt;code&gt;(&apos;T -&amp;gt; &apos;U) -&amp;gt; &apos;T list -&amp;gt; &apos;U list&lt;/code&gt;. We have seen &lt;code&gt;map&lt;/code&gt; (the function not the type) before when we learned about &lt;code&gt;option&lt;/code&gt;. Although &lt;code&gt;map&lt;/code&gt; can map from a value to a value of any other type, in that case we went from &lt;code&gt;string -&amp;gt; string&lt;/code&gt; with name to email. In this case we will also go from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;. Just remember you can map to different types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let withLeadingLName =  people |&amp;gt; List.map (fun p -&amp;gt; {p with Name = (leadingLastName p.Name)})

[
    { Id = 0; Name = &amp;quot;Wu, Fen&amp;quot; }  
    { Id = 1; Name = &amp;quot;Ali, Bob&amp;quot; }  
    { Id = 2; Name = &amp;quot;Jacobs, Fen&amp;quot; }  
    { Id = 3; Name = &amp;quot;Jenson, Bob&amp;quot; }  
    { Id = 4; Name = &amp;quot;Wu, An Si&amp;quot; }
    ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We supplied &lt;code&gt;map&lt;/code&gt; an inline function &lt;code&gt;(fun p -&amp;gt; {p with Name = (leadingLastName p.Name)})&lt;/code&gt; that takes a &lt;code&gt;Person&lt;/code&gt; and uses &lt;code&gt;leadingLastName&lt;/code&gt; to return a new &lt;code&gt;Person&lt;/code&gt; with the name changed.&lt;/p&gt;
&lt;h2&gt;Get it sorted (sorting elements)&lt;/h2&gt;
&lt;p&gt;Often we care about the order of the elements in a collection. We can use one of the sorting functions to get a new sorted &lt;code&gt;list&lt;/code&gt; back. &lt;code&gt;List.sortBy&lt;/code&gt; has the signature &lt;code&gt;(&apos;T -&amp;gt; &apos;Key) -&amp;gt; &apos;T list -&amp;gt; &apos;T list&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let sorted = withLeadingLName |&amp;gt; List.sortBy (fun p -&amp;gt; p.Name)
[
    { Id = 8; Name = &amp;quot;Ali, An Si&amp;quot; }  
    { Id = 1; Name = &amp;quot;Ali, Bob&amp;quot; }  
    { Id = 6; Name = &amp;quot;Jacobs, An Si&amp;quot; }  
    { Id = 2; Name = &amp;quot;Jacobs, Fen&amp;quot; }  
    { Id = 9; Name = &amp;quot;Jacobs, Neo&amp;quot; }  
    ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So we pass it a function to determine what to sort by and then the list and we will get back the sorted list, in this case by the &lt;code&gt;Name&lt;/code&gt; &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Family business (Grouping)&lt;/h2&gt;
&lt;p&gt;What if our next task was to group the people by their last name? Well with the built in &lt;code&gt;list&lt;/code&gt; functions this is very simple.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// Person -&amp;gt; string
let getLastName person = person.Name |&amp;gt; split &apos;,&apos; |&amp;gt; Array.head
let groupedByLName = withLeadingLName |&amp;gt; List.groupBy getLastName
[
    (&amp;quot;Wu&amp;quot;, [{Id = 0; Name = &amp;quot;Wu, Fen&amp;quot;;}; {Id = 4; Name = &amp;quot;Wu, An Si&amp;quot;;}; {Id = 7; Name = &amp;quot;Wu, Bob&amp;quot;;}]);
    (&amp;quot;Ali&amp;quot;, [{Id = 1; Name = &amp;quot;Ali, Bob&amp;quot;;}; {Id = 8; Name = &amp;quot;Ali, An Si&amp;quot;;}]);
    ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use the &lt;code&gt;List.groupBy&lt;/code&gt; function which has the signature &lt;code&gt;(&apos;T -&amp;gt; &apos;Key) -&amp;gt; &apos;T list -&amp;gt; (&apos;Key * &apos;T list) list&lt;/code&gt;. Lets break that down.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(&apos;T -&amp;gt; &apos;Key)&lt;/code&gt; - a function that will take an element from the &lt;code&gt;list&lt;/code&gt; and return a key to group by. In our case it should take a &lt;code&gt;Person&lt;/code&gt; and return their last name.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&apos;T list&lt;/code&gt; - the original list that needs grouping&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&apos;Key * &apos;T list) list&lt;/code&gt; - a list of tuples where the first element of the tuple is the &lt;strong&gt;key&lt;/strong&gt; and the second is a list of elements that matched with that key&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Less random&lt;/h2&gt;
&lt;p&gt;As a final demonstration, lets look at a less used function of &lt;code&gt;list&lt;/code&gt;. At the beginning of this post we had 2 &lt;code&gt;list&lt;/code&gt;s with the names. What if we didn&apos;t care about it being random? What if we just joined the 1st first name to the 1st last name and continued on like that down the &lt;code&gt;list&lt;/code&gt;s.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let fNames = [ &amp;quot;Sue&amp;quot;; &amp;quot;Bob&amp;quot;; &amp;quot;Neo&amp;quot;; &amp;quot;Fen&amp;quot;; &amp;quot;An Si&amp;quot; ; &amp;quot;Jan&amp;quot;]
let lNames = [ &amp;quot;Ali&amp;quot;; &amp;quot;Khan&amp;quot;; &amp;quot;Jacobs&amp;quot;; &amp;quot;Jenson&amp;quot;; &amp;quot;Wu&amp;quot;; &amp;quot;Lee&amp;quot;]
let names = List.zip fNames lNames |&amp;gt; List.map (fun (fname,lname) -&amp;gt; sprintf &amp;quot;%s, %s&amp;quot; lname fname)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;val names : string list = [&amp;quot;Ali, Sue&amp;quot;; &amp;quot;Khan, Bob&amp;quot;; &amp;quot;Jacobs, Neo&amp;quot;; &amp;quot;Jenson, Fen&amp;quot;; &amp;quot;Wu, An Si&amp;quot;; &amp;quot;Lee, Jan&amp;quot;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We used the &lt;code&gt;List.zip&lt;/code&gt; function that takes 2 lists and zips them together into a &lt;code&gt;list&lt;/code&gt; of tuples made up of an element from the 1st &lt;code&gt;list&lt;/code&gt; and and element from the second.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So we finally got to dive into working with collections. In this post you learned how to create, map, sort, group, and even zip a &lt;code&gt;list&lt;/code&gt;. Remember that the functions we worked with here are also available on the &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Seq&lt;/code&gt; modules.&lt;/p&gt;
&lt;p&gt;In a coming post we will be dealing with error handling.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/lists&quot;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/list-module-functions/&quot;&gt;For fun and profit List module functions&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Background image by &lt;a href=&quot;https://unsplash.com/@jackreichert&quot;&gt;Jack Reichert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@p&quot;&gt;Patrik Göthe&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-6/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-6/"/>
    <title>How to F# - Part 6</title>
    <updated>2018-10-27T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-6/</uri>
    </author>
    <summary type="html">&lt;p&gt;Sometimes when dealing with data, the value you are expecting does not exist. Functional programming has a common abstraction for dealing with this called &lt;strong&gt;Maybe&lt;/strong&gt;. In F# this abstraction is known as &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Rather than just diving into the functional way of handling no data lets briefly dive into how non-functional languages typically handle the absence of data, namely &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What is the problem with null?&lt;/h2&gt;
&lt;p&gt;So what problem are we solving by abstracting what it means to have data or not? Well lets look at how things are typically handled in most popular languages. In languages like Java, C#, and Javascript &lt;code&gt;null&lt;/code&gt; represents the intentional absence of any object. So why is this a problem? Firstly, &lt;code&gt;null&lt;/code&gt; carries no information about the type of data that was expected. Was it a missing &lt;code&gt;string&lt;/code&gt; or a &lt;code&gt;Person&lt;/code&gt; object? If &lt;code&gt;null&lt;/code&gt; is all you have, you by definition have NOTHING! The other problem is in the handling of it. You need to explicitly handle any case where a value may be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// Problem 1: Need to check for null
if(!string.IsNullOrEmpty(email))
{
    SendEmail(email);
} else ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means your code can become littered with &lt;code&gt;null&lt;/code&gt; checks and if you forget to check and a &lt;code&gt;null&lt;/code&gt; sneaks through, your code will throw some kind of &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// Problem 2: If you do not check for null your application can blow up
var email = (firstname.ToLower()) + &amp;quot;@acme.com&amp;quot;; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;firstname&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this statement will throw an exception and possibly crash our application.&lt;/p&gt;
&lt;p&gt;The strategies for mitigating these problems are to try catch all &lt;code&gt;null&lt;/code&gt;s at the boundaries of your application and to use the &lt;a href=&quot;https://martinfowler.com/eaaCatalog/specialCase.html&quot;&gt;Null Object/Special Case&lt;/a&gt; pattern. We won&apos;t go into these but my main criticism is the noise it adds to the code.&lt;/p&gt;
&lt;h2&gt;Maybe this is here&lt;/h2&gt;
&lt;p&gt;The nice thing about the &lt;code&gt;Maybe&lt;/code&gt; abstraction is it is generic, unlike the &lt;strong&gt;Special Case&lt;/strong&gt; and in general can be much more elegant, saving you from repeatedly checking for &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As mentioned before, in F# the &lt;strong&gt;Maybe&lt;/strong&gt; abstraction (known as a Monad in functional programming theory) is an &lt;code&gt;option&lt;/code&gt;. To see how it works we are going to define a function that takes a name as &lt;code&gt;string option&lt;/code&gt; and turns it into an email.&lt;/p&gt;
&lt;p&gt;First, lets briefly discuss what &lt;code&gt;option&lt;/code&gt; actually is. &lt;code&gt;option&lt;/code&gt; can have one of 2 values : &lt;strong&gt;Some of &apos;T&lt;/strong&gt; OR &lt;strong&gt;None&lt;/strong&gt;. We can optionally have some value of type &lt;code&gt;&apos;T&lt;/code&gt;, else we will have &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below we see how we define a value with &lt;code&gt;Some&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let fname1 = Some &amp;quot;Brandon&amp;quot;
let fname2 = None
//string option -&amp;gt; string option
let makeEmail name = Option.map (fun n -&amp;gt; sprintf &amp;quot;%s@acme.com&amp;quot; n) name
let email1 = makeEmail fname1
let email2 = makeEmail fname2
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;val email1 : string option = Some &amp;quot;Brandon@acme.com&amp;quot;
val email2 : string option = None&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Option.map&lt;/code&gt; has a signature of &lt;code&gt;(&apos;T -&amp;gt; &apos;U) -&amp;gt; &apos;T option -&amp;gt; &apos;U option&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;(&apos;T -&amp;gt; &apos;U)&lt;/code&gt; - a function that maps from &lt;code&gt;&apos;T&lt;/code&gt; to &lt;code&gt;&apos;U&lt;/code&gt;. This is a generic function so in our case it is a function of &lt;code&gt;string -&amp;gt; string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&apos;T option&lt;/code&gt; - the input value to map. In our case &lt;code&gt;&apos;T&lt;/code&gt; will be &lt;code&gt;string&lt;/code&gt; that is the name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&apos;U option&lt;/code&gt; - the return value of type &lt;code&gt;&apos;U&lt;/code&gt; will be the email &lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;What if we wanted to have a fallback email incase no name was supplied? That is simple enough:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;//string option -&amp;gt; string option
let makeEmail name =
    name
    |&amp;gt; Option.orElse (Some &amp;quot;info&amp;quot;)
    |&amp;gt; Option.map (fun n -&amp;gt; sprintf &amp;quot;%s@acme.com&amp;quot; n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have changed to a pipeline style now where the &lt;code&gt;string option&lt;/code&gt; is piped through &lt;code&gt;Option.orElse&lt;/code&gt; which. If the value is &lt;code&gt;Some&lt;/code&gt; it passes through, if it is &lt;code&gt;None&lt;/code&gt; it gets the value of &lt;code&gt;Some(&amp;quot;info&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Running again we would get the following value for &lt;code&gt;email2&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;val email2 : string option = Some &amp;quot;info@acme.com&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Handling null&lt;/h2&gt;
&lt;p&gt;What if we are getting values from a database but always wrapping them in &lt;code&gt;Some&lt;/code&gt;. Then we would be getting values of &lt;code&gt;Some(null)&lt;/code&gt;. We could convert the &lt;code&gt;Some(null)&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt; using &lt;code&gt;Option.bind&lt;/code&gt;. This has a signature &lt;code&gt;(&apos;T -&amp;gt; &apos;U option) -&amp;gt; &apos;U option&lt;/code&gt;. So we would pass it a function of &lt;code&gt;string -&amp;gt; string option&lt;/code&gt;, which you can see below is the &lt;code&gt;Option.ofObj&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;//string option -&amp;gt; string
let makeEmail name =  
    name
    |&amp;gt; Option.bind Option.ofObj
    |&amp;gt; Option.orElse (Some &amp;quot;info&amp;quot;)
    |&amp;gt; Option.map (fun n -&amp;gt; sprintf &amp;quot;%s@acme.com&amp;quot; n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, what if we are dealing with data that comes from a C# library and we had not wrapped them in &lt;code&gt;Some&lt;/code&gt;? Values could be &lt;code&gt;null&lt;/code&gt;. Lets ease out &lt;code&gt;makeEmail&lt;/code&gt; constraints a bit and just accept &lt;code&gt;string&lt;/code&gt;, we will then transform it directly to an &lt;code&gt;option&lt;/code&gt; type. Unfortunately since databases and other languages make &lt;code&gt;null&lt;/code&gt; an acceptable value we often do still have to deal with it when stepping outside our process.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;//string -&amp;gt; string
let makeEmail name = 
    let sanitizeString (s:string) = null |&amp;gt; (fun x -&amp;gt; if (box x = null) then None else Some(x))
    name
    |&amp;gt; Option.bind sanitizeString
    |&amp;gt; Option.orElse (Some &amp;quot;info&amp;quot;)
    |&amp;gt; Option.map (fun n -&amp;gt; sprintf &amp;quot;%s@acme.com&amp;quot; n)
    |&amp;gt; Option.get
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example I also then returned the contained values, so a &lt;code&gt;string&lt;/code&gt; instead of &lt;code&gt;string option&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now at this point you might ask what is the point of using option and I would tend to agree. This is after all, demo code. I just wanted to point out how to sanitize a possible &lt;code&gt;null&lt;/code&gt; value and then use &lt;code&gt;Option.get&lt;/code&gt; to get the &lt;code&gt;&apos;T&lt;/code&gt; value. In this case &lt;code&gt;string&lt;/code&gt;. &lt;code&gt;get&lt;/code&gt; will throw a &lt;code&gt;ArgumentException&lt;/code&gt; if passed a &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We really just scratched the surface of the functions available on &lt;code&gt;Option&lt;/code&gt; but I hope you have seen how it can be used to represent the absence of data. Although when dealing with the outside world (outside your application process) you are still forced to think about the possibility of &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;Option&lt;/code&gt; has some major advantages over its OO counterparts. For one there is a lot less branching logic. The &lt;code&gt;Option&lt;/code&gt; functions will often just handle &lt;code&gt;None&lt;/code&gt; elegantly. This is a particular challenge of the &lt;strong&gt;Special case&lt;/strong&gt; approach which requires you to think about a specific implementation for every type that can be &lt;code&gt;null&lt;/code&gt; and think about what a no operation means.&lt;/p&gt;
&lt;p&gt;The most important function to understand here though would have to be &lt;code&gt;map&lt;/code&gt;. We will see &lt;code&gt;map&lt;/code&gt; over and over in different modules. It allows you to operate in the abstraction you are in without leaving that abstraction but still manipulate the data contained within.&lt;/p&gt;
&lt;p&gt;Next up we will finally be &lt;a href=&quot;/how-to-fsharp-pt-7&quot;&gt;diving into collections&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/values/null-values&quot;&gt;Null Values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/options&quot;&gt;Option&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-5/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-5/"/>
    <title>How to F# - Part 5</title>
    <updated>2018-10-26T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-5/</uri>
    </author>
    <summary type="html">&lt;p&gt;In the &lt;a href=&quot;/how-to-fsharp-pt-4&quot;&gt;previous post&lt;/a&gt; we looked at language features that allowed us to control the flow of our applications. In this post we will look at Pattern Matching, which allows for some very powerful control flow, as well as some neat deconstruction of values.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;In this post we will look at a few ways of deconstructing values and end with an in-depth look at &lt;code&gt;match&lt;/code&gt; again.&lt;/p&gt;
&lt;h2&gt;Deconstructing a tuple&lt;/h2&gt;
&lt;p&gt;Lets ease into pattern matching by looking at deconstructing a tuple. Remember a tuple is a little like a record except it has no named accessor fields. We have the &lt;code&gt;fst&lt;/code&gt; and &lt;code&gt;snd&lt;/code&gt; functions that get the value for you but if you have more than 2 elements in your tuple you are on your own. Lets refresh by looking at an example from &lt;a href=&quot;/how-to-fsharp-pt-1&quot;&gt;part 1&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;//create a tuple of type bool * int
let myTuple = (true,99)
// use the fst function to get the first value in the tuple
let b1 = fst myTuple
// use the snd function to get the second value in the tuple, with pipe forward operator
let n1 = myTuple |&amp;gt; snd
// use pattern matching to get the values
let (b,n) = myTuple
//val b : bool = true
//val n : int = 99
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how on the last line &lt;code&gt;let (b,n) = myTuple&lt;/code&gt; we deconstruct the tuple to individual values. This is a form of pattern matching. The pattern on the left matches the pattern of a tuple that is being assigned to it so F# is able to assign the respective elements from the tuple to each of those elements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let tripleThreat = (true,99,&amp;quot;str&amp;quot;)
let (b2,n2,s1) = tripleThreat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you would expect, when you add more elements the pattern on the left needs to match.&lt;/p&gt;
&lt;h2&gt;Function arguments&lt;/h2&gt;
&lt;p&gt;Lets drill into this a bit more. We can use it to assign values while deconstructing a tuple but what if we want to accept a tuple argument into a function and we only care about the deconstructed values.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// bool * int  -&amp;gt; unit
let takeATup1 tup =
    let x = fst tup
    let y = snd tup
    if(x) then printfn &amp;quot;%i&amp;quot; (y + 1) else printfn &amp;quot;%i&amp;quot; (y - 1)

let takeATup2 (x,y) =
    if(x) then printfn &amp;quot;%i&amp;quot; (y + 1) else printfn &amp;quot;%i&amp;quot; (y - 1)

let myTuple = (true,99)
takeATup1 myTuple
takeATup2 myTuple
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: 100&lt;br /&gt;
Output: 100&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;code&gt;takeATup1&lt;/code&gt; we accept the argument as a tuple value. In &lt;code&gt;takeATup2&lt;/code&gt; we pattern match on it to be able to get straight to its constituent elements. So it is possible to deconstruct a tuple in the argument. Wouldn&apos;t it be useful if we could deconstruct other types?&lt;/p&gt;
&lt;h2&gt;Sum type&lt;/h2&gt;
&lt;p&gt;A common pattern in F# is to create specific types to document your code a little better using the type system. Say we had an &lt;code&gt;int&lt;/code&gt; that uniquely identifies a row in a spreadsheet table. We could just make it an &lt;code&gt;int&lt;/code&gt;, or we could create a special type to represent what it is. Doing this in F# is super easy. Then whenever we need to get that &lt;code&gt;int&lt;/code&gt; out to use it, we simply extract it using the same deconstruction technique we saw earlier.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type Id = | RowId of int

let getRow (RowId rid) =
    printfn &amp;quot;%i&amp;quot; rid
    (rid,true)

let i = RowId 1
let row = getRow i
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Did you notice how, like with tuples, the pattern matches what is used to construct the value in the first place?&lt;/p&gt;
&lt;h2&gt;Product type&lt;/h2&gt;
&lt;p&gt;As one last example before we switch to &lt;code&gt;match&lt;/code&gt;, you can do the same kind of deconstruction with record types.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;
type Person = { Name:string; BirthYear:int }

let p1 = { Name = &amp;quot;Devon&amp;quot;; BirthYear = 2120 }

let sayHello { Name = name; BirthYear = _ } =
    printfn &amp;quot;Hello %s&amp;quot; name

sayHello p1
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: Hello Devon&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again it looks like we are constructing the value in the argument. One thing of note is that I used the wildcard symbol &lt;code&gt;_&lt;/code&gt; to show that we don&apos;t care about the value of &lt;code&gt;BirthDate&lt;/code&gt; within the scope of this function.&lt;/p&gt;
&lt;h2&gt;Match expression (revisited)&lt;/h2&gt;
&lt;p&gt;We covered &lt;code&gt;match&lt;/code&gt; in &lt;a href=&quot;/how-to-fsharp-pt-4&quot;&gt;part 4&lt;/a&gt; but are going to revisit it with our new-found knowledge of pattern matching.&lt;/p&gt;
&lt;p&gt;To dip our toes in lets create a function that takes a &lt;code&gt;bool&lt;/code&gt; and an &lt;code&gt;int&lt;/code&gt; and if the first argument is &lt;code&gt;true&lt;/code&gt;, then it increments the second argument else it decrements it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// bool -&amp;gt; int -&amp;gt; int
let incDec t n  = 
    match (t,n) with
    | (true,x) -&amp;gt; x + 1
    | (false,x) -&amp;gt; x - 1

printfn &amp;quot;%i&amp;quot; (incDec true 10)
printfn &amp;quot;%i&amp;quot; (incDec false 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: 11&lt;br /&gt;
Output: 9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note how we created a tuple in the input expression of the &lt;code&gt;match&lt;/code&gt; and then pattern match for the different options.&lt;/p&gt;
&lt;p&gt;Before we move on lets highlight some other patterns and features. Let us add 2 more constraints to out function.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the value is &lt;code&gt;1&lt;/code&gt; we ignore the boolean and just return &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the value is less than or equal to &lt;code&gt;0&lt;/code&gt; we will return &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let incDec t n  =
    match (t,n) with
    | (_,1) -&amp;gt; 1
    | (_,x) when x &amp;lt;= 0 -&amp;gt; 0
    | (true,x) -&amp;gt; x + 1
    | (false,x) -&amp;gt; x - 1

printfn &amp;quot;%i&amp;quot; (incDec true 10)
printfn &amp;quot;%i&amp;quot; (incDec false 10)
printfn &amp;quot;%i&amp;quot; (incDec false 1)
printfn &amp;quot;%i&amp;quot; (incDec false -5)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: 11&lt;br /&gt;
Output: 9&lt;br /&gt;
Output: 1&lt;br /&gt;
Output: 0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A few things to note here. Firstly, we used the wildcard &lt;code&gt;_&lt;/code&gt; to indicate that we don&apos;t care about the value of the boolean. It will match the first element whether &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Secondly, we used a condition with the &lt;code&gt;when&lt;/code&gt; keyword. This requires that the pattern is matched AND that the condition is then met. Thirdly, the order matters here. If we had added the 2 new cases at the end of the &lt;code&gt;match&lt;/code&gt; they would never be hit.&lt;/p&gt;
&lt;h2&gt;Active Patterns&lt;/h2&gt;
&lt;p&gt;Active Patterns is a really cool feature that can be used to simplify the &lt;code&gt;match&lt;/code&gt; cases by wrapping up some pattern matching into named partitions. I am going to cover partial active patterns here, as I have found them the most useful.&lt;/p&gt;
&lt;p&gt;To demonstrate the usage of partial active patterns we are going to code up a little game called FizzBuzz. How it works is you increment numbers saying the number unless:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The number is divisible by 3, then you say &lt;em&gt;Fizz&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The number is divisible by 5, then you say &lt;em&gt;Buzz&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The number is divisible by both 3 and 5, then you say &lt;em&gt;FizzBuzz&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// define partial active patterns
let (|Fizz|_|) i = if ((i%3) = 0) then Some() else None
let (|Buzz|_|) i = if ((i%5) = 0) then Some() else None
// use partial active patterns
let fizzbuzz i = 
    match i with
    | Fizz &amp;amp; Buzz -&amp;gt; printf &amp;quot;Fizz Buzz, &amp;quot;
    | Fizz -&amp;gt; printf &amp;quot;Fizz, &amp;quot;
    | Buzz -&amp;gt; printf &amp;quot;Buzz, &amp;quot;
    | x -&amp;gt; printf &amp;quot;%i, &amp;quot; x
// run fizz buzz for numbers 1 to 20
[1..20] |&amp;gt; List.iter fizzbuzz
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: 1, 2, Fizz, 4, Buzz, Fizz, 7, 8, Fizz, Buzz, 11, Fizz, 13, 14, Fizz Buzz, 16, 17, Fizz, 19, Buzz,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They are called partial active patterns because in the definition &lt;code&gt;|Fizz|_|&lt;/code&gt; they have the wildcard &lt;code&gt;_&lt;/code&gt; that allows for a match to not occur. We indicate that the match happened by returning &lt;code&gt;Some&lt;/code&gt; and it did not by returning &lt;code&gt;None&lt;/code&gt;. We will encounter &lt;code&gt;Some&lt;/code&gt; again in a later post when we tackle handling no data.&lt;/p&gt;
&lt;p&gt;Notice how for &amp;quot;FizzBuzz&amp;quot; we used &lt;code&gt;&amp;amp;&lt;/code&gt; to check it matched both.&lt;/p&gt;
&lt;p&gt;I want to point out something that may not be clear. If we wanted to pattern match and deconstruct the value in the match we could do that by sending the value back with &lt;code&gt;Some(i)&lt;/code&gt;. Then the case would look like this &lt;code&gt;| Fizz x -&amp;gt; printf &amp;quot;Fizz(%x) &amp;quot; x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These take some playing around with to get comfortable with but once you are they are great for cleaning up your &lt;code&gt;match&lt;/code&gt; and making them more descriptive.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Today we looked into various ways you can use pattern matching to both get values and branch your application logic. We also explored partial active patterns by writing an implementation of the FizzBuzz game.&lt;/p&gt;
&lt;p&gt;Next up we deal with &lt;a href=&quot;/how-to-fsharp-pt-6&quot;&gt;handling the absence of data&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pattern_matching&quot;&gt;Pattern Matching on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/pattern-matching&quot;&gt;Pattern Matching on MS docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/match-expression/&quot;&gt;Match Expressions for fun and profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/active-patterns&quot;&gt;Active Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@olav_ahrens&quot;&gt;Olav Ahrens Røtne&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-4/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-4/"/>
    <title>How to F# - Part 4</title>
    <updated>2018-10-25T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-4/</uri>
    </author>
    <summary type="html">&lt;p&gt;In the &lt;a href=&quot;/how-to-fsharp-pt-3&quot;&gt;last post&lt;/a&gt; we finished off our dive into functions. In this post we will look at control flow. How do we make a branching decision? How do we loop through something until some condition is met?&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;I am going to try keep this post short. The reason for this is that although you will invariably need to use control flow expressions in your code, they are stylistically not very functional and there are usually more functional ways to achieve the same thing. We explore those more functional techniques in this and future posts.&lt;/p&gt;
&lt;h2&gt;If then else&lt;/h2&gt;
&lt;p&gt;Other than&lt;code&gt;match&lt;/code&gt; (covered later), &lt;code&gt;if&lt;/code&gt; is probably the next most useful control flow expression we will touch on in this post. The &lt;code&gt;if&lt;/code&gt; expression takes a &lt;code&gt;bool&lt;/code&gt; and if &lt;code&gt;true&lt;/code&gt; proceeds with the &lt;code&gt;then&lt;/code&gt; body. Usually there is an &lt;code&gt;else&lt;/code&gt; and we will go through when that is necessary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let b = true
if (b) then printfn &amp;quot;Is true&amp;quot; else printfn &amp;quot;Is false&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above will print out &lt;em&gt;Is true&lt;/em&gt;, and not print &lt;em&gt;Is false&lt;/em&gt;.&lt;br /&gt;
Maybe we don&apos;t want to print out anything if the value is &lt;code&gt;false&lt;/code&gt;. We can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let b = true
if (b) then printfn &amp;quot;Is true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you changed &lt;code&gt;let b = false&lt;/code&gt;, nothing would be printed.&lt;/p&gt;
&lt;p&gt;What if we wanted to &lt;strong&gt;return a value&lt;/strong&gt; based on some condition though without an &lt;code&gt;else&lt;/code&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let v = if(b) then 1 // &amp;lt;- Error: This &apos;if&apos; expression is missing an &apos;else&apos; branch.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At least the error message is pretty clear about what the problem is. With the print example we were returning &lt;code&gt;unit&lt;/code&gt; so it didn&apos;t matter if nothing was returned. Here the expression has to return a value because we are assigning that value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let v = if(b) then 1 else 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So depending on whether &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt; will have a value of &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;Lets take a look at something a bit more complex:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let divideBy d n = n/d
let numerator = 10
let denominator = 2

let j = if(denominator &amp;lt;&amp;gt; 0) then 
            printfn &amp;quot;Dividing by %i, not 0&amp;quot; denominator
            let x = numerator |&amp;gt; divideBy denominator
            printfn &amp;quot;The answer is %i&amp;quot; x
            x
        else
            printfn &amp;quot;Dividing by 0&amp;quot;
            0
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that we don&apos;t have to assign this to a value, here &lt;code&gt;j&lt;/code&gt; but it would be pretty pointless to return a value and not use it. The compiler will give you a warning at this point &lt;em&gt;The result of this expression has type &apos;int&apos; and is implicitly ignored. Consider using &apos;ignore&apos; to discard this value explicitly, e.g. &apos;expr |&amp;gt; ignore&apos;, or &apos;let&apos; to bind the result to a name, e.g. &apos;let result = expr&apos;.&lt;/em&gt;&lt;br /&gt;
This is asking us to call &lt;code&gt;ignore()&lt;/code&gt; in each branch of the &lt;code&gt;if&lt;/code&gt; expression.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can have multiple lines in either branch, organized by indentation. Just like functions the last expression is what is returned as the value of the &lt;code&gt;if-else&lt;/code&gt; expression for each branch.&lt;/p&gt;
&lt;h3&gt;Scope&lt;/h3&gt;
&lt;p&gt;In the previous post I mentioned scope. This is a good opportunity to demonstrate scope. Check out the assigning of the &lt;code&gt;denominator&lt;/code&gt; value below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let divideBy d n = n/d
let numerator = 10
let denominator = 0

if(denominator &amp;lt;&amp;gt; 0) then 
    printfn &amp;quot;Dividing by %i, not 0&amp;quot; denominator
    let x = numerator |&amp;gt; divideBy denominator
    printfn &amp;quot;The answer is %i&amp;quot; x
    x
else
    printfn &amp;quot;Dividing by 0&amp;quot;
    let denominator = 1
    printfn &amp;quot;Instead by %i, not 0&amp;quot; denominator
    let x = numerator |&amp;gt; divideBy denominator
    printfn &amp;quot;The answer is %i&amp;quot; x
    x

printfn &amp;quot;Denominator is %i&amp;quot; denominator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above prints out the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Dividing by 0
Instead by 1, not 0
The answer is 10
Denominator is 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice here how we set a value for &lt;code&gt;denominator&lt;/code&gt; within the &lt;code&gt;else&lt;/code&gt; branch that shadows the outside one. Once we are back to the scope outside the if, &lt;code&gt;denominator&lt;/code&gt; is back to &lt;code&gt;0&lt;/code&gt;, even though it was set to &lt;code&gt;1&lt;/code&gt; in the &lt;code&gt;else&lt;/code&gt; branch. It was &lt;code&gt;1&lt;/code&gt; for the scope of the &lt;code&gt;else&lt;/code&gt; branch of the expression as it was set in that scope.&lt;/p&gt;
&lt;h3&gt;If / elseif / else&lt;/h3&gt;
&lt;p&gt;It is (maybe) worth mentioning that you can have more than 2 branches by using &lt;code&gt;elif&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;if(x = 1) then printfn &amp;quot;x is 1&amp;quot;
elif (x = 2) then printfn &amp;quot;x is 2&amp;quot;
else printfn &amp;quot;x is not 1 or 2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will briefly cover &lt;code&gt;match&lt;/code&gt; next and even when &lt;strong&gt;if / else&lt;/strong&gt; seems a cleaner solution, once you are using &lt;code&gt;elif&lt;/code&gt; you almost certainly should be using &lt;code&gt;match&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2&gt;Match&lt;/h2&gt;
&lt;p&gt;We will hopefully cover pattern matching in more detail in a later entry but no coverage of functional control flow is complete without &lt;code&gt;match&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lets re-write the previous example using &lt;code&gt;match&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;match x with
| 1 -&amp;gt; printfn &amp;quot;x is 1&amp;quot;
| 2 -&amp;gt; printfn &amp;quot;x is 2&amp;quot;
| _ -&amp;gt; printfn &amp;quot;x is not 1 or 2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;_&lt;/code&gt; is a catch-all, like else is.
This is a much cleaner and more functional way to do control flow. A nice benefit here is that the compiler gives you a warning if you are not matching exhaustively on all options of the matched value.&lt;/p&gt;
&lt;p&gt;We will hopefully circle around to &lt;code&gt;match&lt;/code&gt; again when covering pattern matching as &lt;code&gt;match&lt;/code&gt; is far more powerful than demonstrated here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/match-expressions&quot;&gt;Microsoft docs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;for..in&lt;/h2&gt;
&lt;p&gt;If you need to loop through an entire collection and do something you could use the &lt;code&gt;for pattern in enumerable-expression do body-expression&lt;/code&gt; syntax. This is like &lt;code&gt;foreach&lt;/code&gt; in many other languages. Lets see what that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let numbers = [1..10]
for x in numbers do
    printf &amp;quot;%i &amp;quot; x
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: 1 2 3 4 5 6 7 8 9 10&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;See how you can easily create a range of values using &lt;code&gt;start..finish&lt;/code&gt; syntax. We use this to define &lt;code&gt;numbers&lt;/code&gt;. Then for each element of the list we print the value which is in &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will hopefully cover collections in an upcoming post but for interest sake lets see how this would be done in a more functional way.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let numbers = [1..10]
numbers |&amp;gt; List.iter (printf &amp;quot;%i &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unsurprisingly the functional approach is to call the &lt;code&gt;iter&lt;/code&gt; function on the &lt;code&gt;List&lt;/code&gt; module. This &lt;code&gt;iter&lt;/code&gt; function has the signature &lt;code&gt;(&apos;T -&amp;gt; unit) -&amp;gt; &apos;T list -&amp;gt; unit&lt;/code&gt;. Lets break that down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(&apos;T -&amp;gt; unit)&lt;/code&gt;: a function defining the action to take for each element in the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&apos;T list&lt;/code&gt;: the list to iterate through&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unit&lt;/code&gt;: returns unit so this function is designed to iterate through a function and do something, not return a value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more functions for working with lists in the &lt;code&gt;List&lt;/code&gt; module and matching ones for &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Seq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/loops-for-in-expression&quot;&gt;Microsoft docs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;for..to&lt;/h2&gt;
&lt;p&gt;While &lt;code&gt;for..in&lt;/code&gt; is for iterating over a collection, &lt;code&gt;for..to&lt;/code&gt; allows you to iterate from a start value to another. This is like a &lt;code&gt;for&lt;/code&gt; loop in other languages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let ns = [|1..10..100|]
for i=0 to ((Array.length ns)/2) do
    printf &amp;quot;%i &amp;quot; (Array.get ns i)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: 1 11 21 31 41 51&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our example we have an array that has numbers 1 to a 100 in increments of 10. We only iterate through half the list.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/loops-for-to-expression&quot;&gt;Microsoft docs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;while&lt;/h2&gt;
&lt;p&gt;What if we want to iterate until a certain condition is true? The following code gets a random number until that number is &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let random = new System.Random()
let aNumber() = random.Next(1,10)
let mutable n = 0
while (n &amp;lt;&amp;gt; 7) do
    printf &amp;quot;%i &amp;quot; n
    n &amp;lt;- aNumber()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Output: 0 9 9 1 6 5 2 2 6 6 2 6 6 1 2 3 6 8 8 1 3 2 2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We kept going through the &lt;code&gt;while&lt;/code&gt; loop until &lt;code&gt;aNumber()&lt;/code&gt; returned &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/loops-while-do-expression&quot;&gt;Microsoft docs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we looked at ways to represent branching logic and ways to iterate over values. Remember that much of this is a very imperative approach and as such is not used a lot in the function paradigm. We looked at some functional techniques for dealing with branching and looping and will continue this in future articles. Next up we look at &lt;a href=&quot;/how-to-fsharp-pt-5&quot;&gt;Pattern Matching&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://unsplash.com/@spacexuan&quot;&gt;Crystal Kwok&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-3/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-3/"/>
    <title>How to F# - Part 3</title>
    <updated>2018-10-24T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-3/</uri>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/how-to-fsharp-pt-2&quot;&gt;Previously&lt;/a&gt; we began exploring some theory behind functions. In this post we will look at practical techniques for working with functions.&lt;/p&gt;
&lt;h2&gt;Working with functions&lt;/h2&gt;
&lt;p&gt;Using functions is unsurprisingly the bread and butter of functional programming, let us see if we can define a slightly more complex function without butting into too many new concepts. We are going to define a function that cleans up an input &lt;code&gt;string&lt;/code&gt; and then saves it to disk.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// some helper string functions
// string -&amp;gt; string
let trim (s:string) = s.Trim()

// string -&amp;gt; string -&amp;gt; unit
let write path content =
    let sanitized = trim content
    File.WriteAllText(path, sanitized)

// use the write function
write &amp;quot;/path/to/file.txt&amp;quot; &amp;quot;Some text to write to file&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is our first multi-line function and let us go through a few things that may not have been immediately obvious from the single line function. Firstly, note that the body of the function is defined by the indent. For the function the size of the indent does not matter, as long as it is the same throughout the scope. We will dive into this a bit more when we touch on scope in a later post on control flow. Secondly, the value of the last expression is what is returned from the function, in this case &lt;code&gt;unit&lt;/code&gt;. You didn&apos;t need to explicitly use &lt;code&gt;return&lt;/code&gt; like in many other languages. This is because functions ALWAYS return something so the compiler can assume that the last expression result is the return.&lt;/p&gt;
&lt;p&gt;A big part of the flexibility of functional programming comes from being able to easily tie functions together in interesting ways to build up more complex functionality. Let us apply this idea to the &lt;code&gt;write&lt;/code&gt; function. We are going to pass a function into the &lt;code&gt;write&lt;/code&gt; function that will do the sanitization, thus allowing the client of the function to decide what &amp;quot;sanitized&amp;quot; means.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// (&apos;a -&amp;gt; string) -&amp;gt; string -&amp;gt; string -&amp;gt; unit
let write sanitizer path content =
    let sanitized = sanitizer content
    File.WriteAllText(path, sanitized)

// use the write function
write trim &amp;quot;/path/to/file.txt&amp;quot; &amp;quot;Some text to write to file&amp;quot;
write (fun (s:string) -&amp;gt; s.Substring(0, 140)) &amp;quot;/path/to/file.txt&amp;quot; &amp;quot;Some text to write to file&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See how we just passed the &lt;code&gt;trim&lt;/code&gt; function in as an argument? This of course could be any function as we see in the second usage.
Ok but this signature &lt;code&gt;(&apos;a -&amp;gt; string) -&amp;gt; string -&amp;gt; string -&amp;gt; unit&lt;/code&gt; is getting a bit more hairy, so lets break it down. &lt;code&gt;(&apos;a -&amp;gt; string)&lt;/code&gt; is the signature for the &lt;code&gt;sanitizer&lt;/code&gt; function we are now passing into the &lt;code&gt;write&lt;/code&gt; function. The F# compiler has inferred that the function doesn&apos;t need to be of type &lt;code&gt;string -&amp;gt; string&lt;/code&gt; for our &lt;code&gt;write&lt;/code&gt; function to work. As long as the &lt;code&gt;sanitizer&lt;/code&gt; function returns &lt;code&gt;string&lt;/code&gt;, the input can be of any type. This is a generic parameter then and in F# a generic parameter is indicated with a leading &lt;code&gt;&apos;&lt;/code&gt;. So &lt;code&gt;(&apos;a -&amp;gt; string)&lt;/code&gt; indicates a function that takes any type and returns a &lt;code&gt;string&lt;/code&gt;. The rest of the signature &lt;code&gt;string -&amp;gt; string -&amp;gt; unit&lt;/code&gt; then remains the same representing the &lt;em&gt;path&lt;/em&gt;, &lt;em&gt;content&lt;/em&gt;, and return value type.&lt;/p&gt;
&lt;h3&gt;Currying&lt;/h3&gt;
&lt;p&gt;Now is the time to introduce &lt;em&gt;currying&lt;/em&gt;. This has nothing to do with food but instead is a technique named after &lt;a href=&quot;https://en.wikipedia.org/wiki/Haskell_Curry&quot;&gt;Haskell Curry&lt;/a&gt;. &lt;em&gt;Currying&lt;/em&gt; is the technique of taking a function that takes multiple arguments and evaluating it as a sequence of single argument functions. If that doesn&apos;t make sense, don&apos;t worry, it is easier to understand from examples.&lt;/p&gt;
&lt;p&gt;We made our &lt;code&gt;write&lt;/code&gt; function more flexible by allowing for a &lt;code&gt;sanitizer&lt;/code&gt; function to be passed in but now every time we want to use it we need to supply that sanitizer function. What if in an area of my code &lt;em&gt;sanitizing&lt;/em&gt; always means &lt;em&gt;trim&lt;/em&gt; the string? What if it was expected that we always do this before saving a &lt;code&gt;string&lt;/code&gt; to disk? Well then we can define a new function by &lt;em&gt;currying&lt;/em&gt; &lt;code&gt;write&lt;/code&gt; with an argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// string -&amp;gt; string -&amp;gt; unit
let sanitzedWrite = write trim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a new function &lt;code&gt;sanitzedWrite&lt;/code&gt; with the &lt;code&gt;trim&lt;/code&gt; function baked in.&lt;br /&gt;
Note how we are back to our previous signature of &lt;code&gt;string -&amp;gt; string -&amp;gt; unit&lt;/code&gt; just like before we introduced the &lt;code&gt;sanitizer&lt;/code&gt; argument. We are able to optimize for our needs and still leave options open for when &lt;code&gt;write&lt;/code&gt; is needed without the &lt;code&gt;trim&lt;/code&gt;. Let us look at that case next.&lt;/p&gt;
&lt;h3&gt;Identity&lt;/h3&gt;
&lt;p&gt;This seems like a good time to introduce a concept whose value may not be immediately obvious. It is the idea of &lt;em&gt;identity&lt;/em&gt;. I will not go into any theory on monoids, monads, or any category theory, there is an &lt;a href=&quot;http://blog.ploeh.dk/2017/10/04/from-design-patterns-to-category-theory/&quot;&gt;awesome series from Mark Seemann that covers this&lt;/a&gt;. Suffice to say &lt;em&gt;identity&lt;/em&gt; is a function that does nothing.&lt;/p&gt;
&lt;p&gt;The easiest way to explain &lt;em&gt;identity&lt;/em&gt; is with examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;em&gt;identity&lt;/em&gt; for addition is 0 : 5 + 0 = 5&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;identity&lt;/em&gt; for multiplication is 1 : 2 * 1 = 2&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;identity&lt;/em&gt; for &lt;code&gt;string&lt;/code&gt; is &amp;quot;&amp;quot; : &amp;quot;hello&amp;quot; + &amp;quot;&amp;quot; = &amp;quot;hello&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In F# &lt;strong&gt;identity&lt;/strong&gt; is defined by the function &lt;code&gt;id&lt;/code&gt; which has the signature &lt;code&gt;&apos;a -&amp;gt; &apos;a&lt;/code&gt;. &amp;quot;So what&amp;quot;? you may ask. How could something that does nothing ever be useful? Well thankfully we have a useful example at hand already (it is almost like I planned it).&lt;/p&gt;
&lt;p&gt;Imagine we have another section of our code that needs to write content to a file but has no rules about sanitization. It just needs to write the content as is.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// string -&amp;gt; string -&amp;gt; unit
let justWrite = write id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course we could have just put in our own function &lt;code&gt;fun x -&amp;gt; x&lt;/code&gt; in there but this is actually quite a common situation when you are passing functions around to extend functionality, so a functional language like F# provides an easy way to do this.&lt;/p&gt;
&lt;h3&gt;Piping&lt;/h3&gt;
&lt;p&gt;Hopefully now you are starting to feel a bit more comfortable with F# functions. One thing you will start noticing about functional code is the way it tends to flow. When everything has an input and an output, you tend to start organizing your code into these workflows that chain functions together. This can lead to some really readable code once you wrap your head around the idea. This is made possible by an operator in the language that allows you to do this in a really interesting and useful way. It is the &lt;em&gt;forward pipe operator&lt;/em&gt; &lt;code&gt;|&amp;gt;&lt;/code&gt; which passes the result of the function on the left to the function on the right.&lt;/p&gt;
&lt;p&gt;Again let us look at some examples to try clarify. I will give multiple examples, first without &lt;code&gt;|&amp;gt;&lt;/code&gt;, followed by with.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// trim a string
let trimmed1 = trim &amp;quot; some text &amp;quot;
let trimmed2 = &amp;quot;  some text &amp;quot; |&amp;gt; trim

// get first value of a tuple
let name1 = fst (&amp;quot;Devon&amp;quot;,37)
let name2 = (&amp;quot;Devon&amp;quot;,37) |&amp;gt; fst
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So what does this have to do with pipelines? Let us try use this to chain a workflow together.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;Console.ReadLine()              // read a line in from the console
|&amp;gt; toUpper                      // convert the string to uppercase
|&amp;gt; trim                         // trim the string
|&amp;gt; justWrite &amp;quot;/to/some/file.txt&amp;quot;// write it without trim since we already trimmed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above you see a workflow where the input from the previous step is used as the argument to the following. We read in some &lt;code&gt;string&lt;/code&gt;, uppercase it, trim it, and then write it to file. I think that is some pretty descriptive code, don&apos;t you?&lt;/p&gt;
&lt;p&gt;Note that &lt;em&gt;currying&lt;/em&gt; comes in quite useful when wanting to use &lt;code&gt;|&amp;gt;&lt;/code&gt; since you need the result of the function to line up with that of the function argument to the right of the &lt;code&gt;|&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Composition&lt;/h3&gt;
&lt;p&gt;Another concept that will seem very similar is composing functions together with the &lt;em&gt;forward composition operator&lt;/em&gt; &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;. This operator allows you to take a function whose output matches the input of another function and compose those 2 together to for a new function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// int -&amp;gt; int
let inc x = x + 1

// int -&amp;gt; string
let intToString (x:int) = x |&amp;gt; string

// int -&amp;gt; string
let incrementedString = inc &amp;gt;&amp;gt; intToString

1 |&amp;gt; incrementedString // val it : string = &amp;quot;2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So if we applied this to our previous workflow we could summarize the middle step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let prepareString = toUpper &amp;gt;&amp;gt; trim

Console.ReadLine()
|&amp;gt; prepareString
|&amp;gt; justWrite &amp;quot;/to/some/file.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Interop with .NET OO style&lt;/h3&gt;
&lt;p&gt;You may have noticed a few signatures of functions that seemed to look a little different. When using the .NET library, it can look a little different to the functional first code. This is because the .NET BCL is an object-oriented (OO) code base. F# can talk to it fine but it is a different paradigm. For example you can see when calling &lt;code&gt;File.WriteAllText(path, content)&lt;/code&gt; it looks a lot like how it would look in C#. Another thing you may have noticed is that when defining functions that work with &lt;code&gt;string&lt;/code&gt;s I usually am explicit about the type in the signature eg. &lt;code&gt;let trim (s:string) = s.Trim()&lt;/code&gt;. This is because F# can need to help inferring the type when dealing with objects of types coming from the OO side of .NET. &lt;code&gt;string&lt;/code&gt; seems to be the most common offender here. It is something to keep in mind. When dealing with &lt;code&gt;string&lt;/code&gt; or other types from the .NET BCL it is often worth writing little functional wrappers around them like you see with &lt;code&gt;trim&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;To close off this post I wanted to mention something important to consider when writing your own functions, and that is the idea of &lt;em&gt;purity&lt;/em&gt;. A &lt;strong&gt;pure&lt;/strong&gt; function is a function that has no internal dependencies that could change the output. As an example, our &lt;code&gt;trim&lt;/code&gt; function &lt;code&gt;let trim (s:string) = s.Trim()&lt;/code&gt; will give the same output for the same input every single time. Compare this to &lt;code&gt;File.ReadAllText(&amp;quot;/path/to/file.txt&amp;quot;)&lt;/code&gt;. With &lt;code&gt;ReadAllText&lt;/code&gt; the file could change at any time if the underlying file contents changes even though the same path was used as input. This is NOT a pure function.&lt;/p&gt;
&lt;p&gt;Pure functions are easier to reason about and easier to test and so should be favoured. In the example above we pushed our impure functions to the beginning and end of the workflow and had our pure functions in the middle. This is generally a good pattern to follow.&lt;/p&gt;
&lt;p&gt;So we covered quite a lot in this post and there is plenty more that could be said about functions but I think you have enough now to start working with them yourself. Didn&apos;t I tell you it would be &lt;code&gt;fun&lt;/code&gt;? As always I appreciate any suggestions or questions, and please share this series with anyone you think might get value from it.&lt;/p&gt;
&lt;p&gt;In the next article we look at &lt;a href=&quot;/how-to-fsharp-pt-4&quot;&gt;Control Flow&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/symbol-and-operator-reference/&quot;&gt;Symbol reference&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@markusspiske&quot;&gt;Markus Spiske&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-2/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-2/"/>
    <title>How to F# - Part 2</title>
    <updated>2018-10-23T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-2/</uri>
    </author>
    <summary type="html">&lt;p&gt;In the &lt;a href=&quot;/how-to-fsharp-pt-1&quot;&gt;previous post&lt;/a&gt; we looked at assigning values and the different types that those values could be. In this second installment we will be looking at functional programmings namesake: &lt;em&gt;functions&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Functional programming as a paradigm is quite a hard thing to pin down, just like other paradigms. In object-oriented programming the one thing that really isn&apos;t up for debate though is that the general idea is that we have an object (whatever that may mean to you) and we represent data and behavior in these objects. In functional programming then it will come as no surprise that &lt;em&gt;functions&lt;/em&gt; are first class citizens and that we accomplish our goals by transforming data using these functions.&lt;/p&gt;
&lt;p&gt;What is a function though?&lt;/p&gt;
&lt;h2&gt;A brief reminder about mathematics&lt;/h2&gt;
&lt;p&gt;Do not worry, I will not be going into deep mathematics theory here. I instead want to remind you of some mathematics you probably touched on in school just to show you that this isn&apos;t necessarily something completely new to you. Secondly, it will show that functional programming has roots that go far deeper than computer programming. Do not worry though if you didn&apos;t like this stuff at school, I promise this is way more &lt;code&gt;fun&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In mathematical terms a function is a process that associates each element &lt;em&gt;x&lt;/em&gt; of a set &lt;strong&gt;X&lt;/strong&gt; to another value &lt;em&gt;y&lt;/em&gt; which is of set &lt;strong&gt;Y&lt;/strong&gt;. Let us call this process &lt;em&gt;f&lt;/em&gt;. Then we have an expression:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;y = f(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is usually read as &amp;quot;let &lt;em&gt;y&lt;/em&gt; equal &lt;em&gt;f&lt;/em&gt; of &lt;em&gt;x&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;The set &lt;strong&gt;X&lt;/strong&gt; of possible values of &lt;em&gt;x&lt;/em&gt; is known as the &lt;strong&gt;domain&lt;/strong&gt;. The set &lt;strong&gt;Y&lt;/strong&gt; of possible outputs &lt;em&gt;y&lt;/em&gt; is known as the &lt;strong&gt;codomain&lt;/strong&gt;. To label the parts of the expression, &lt;em&gt;x&lt;/em&gt; is the &lt;strong&gt;argument&lt;/strong&gt; and the value of the function is the output.&lt;/p&gt;
&lt;p&gt;So how would we accurately define a specific function?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;let &lt;em&gt;f&lt;/em&gt;: R → R be the function defined by the equation &lt;em&gt;f(x) = x&lt;sup&gt;2&lt;/sup&gt;&lt;/em&gt;, valid for all real values of x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice how we have the &lt;code&gt;Domain -&amp;gt; Codomain&lt;/code&gt; defined using &lt;code&gt;-&amp;gt;&lt;/code&gt;. We will come back to this a little later.&lt;/p&gt;
&lt;p&gt;One last thing. Remember common functions like &lt;code&gt;sin&lt;/code&gt; and &lt;code&gt;cos&lt;/code&gt;? It is common to write them as &lt;code&gt;cos x&lt;/code&gt;, without the the brackets as long as this does not lead to any ambiguity in the meaning. So now that we have had a little mathematics refresher, let us see if this brings us any insight into F# functions.&lt;/p&gt;
&lt;p&gt;Mathematics done!&lt;/p&gt;
&lt;h2&gt;Defining functions in F#&lt;/h2&gt;
&lt;p&gt;In the &lt;a href=&quot;/how-to-fsharp-pt-1&quot;&gt;previous post we looked at assigning values&lt;/a&gt;. F# being a functional-first language means that we can treat functions like any other value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// int -&amp;gt; int
let f x = x*x
let y = f 3 //val y : int = 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So above we define function &lt;em&gt;f&lt;/em&gt; that takes argument &lt;em&gt;x&lt;/em&gt;. Then we pass &lt;code&gt;3&lt;/code&gt; as the argument and assign that to value &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another way to define functions in F# is to use the &lt;code&gt;fun&lt;/code&gt; keyword. Let us define the same function again, this time as function &lt;em&gt;g&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// int -&amp;gt; int
let g = fun x -&amp;gt; x*x
let z = g 3 //val z : int = 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way makes it way more explicit that &lt;code&gt;g&lt;/code&gt; is simply just another value that is assigned to. Note that this way of defining functions using &lt;code&gt;fun&lt;/code&gt; is common when using functions once off inline, say for filtering a collection. We will see this in more detail in a later post when we dive deeper into collections.&lt;/p&gt;
&lt;h2&gt;Understand functions&lt;/h2&gt;
&lt;h3&gt;Signatures&lt;/h3&gt;
&lt;p&gt;In the above code I put the signature of the function in a comment above it. The signature describes what types a function take in and what it returns. So for our function above we have &lt;code&gt;int -&amp;gt; int&lt;/code&gt;. This means our function takes a single &lt;code&gt;int&lt;/code&gt; as an argument and then returns an &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A function always has an input and an output. In F# (and all programming languages I know of) a function can have multiple arguments. Say for example we had a &lt;code&gt;writeToFile&lt;/code&gt; function that took a &lt;code&gt;boolean&lt;/code&gt; for whether to overwrite the file if it exists, and a &lt;code&gt;string&lt;/code&gt; with the content of the file. The signature for &lt;code&gt;writeToFile&lt;/code&gt; would then be &lt;code&gt;bool -&amp;gt; string -&amp;gt; unit&lt;/code&gt;. Now what is this &lt;code&gt;unit&lt;/code&gt; type? It was mentioned in the previous post as the type that represents nothing. As already mentioned, functions must always have an input and an output, so if a function has no meaningful value to return, we return &lt;code&gt;unit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Do you see a similarity here? Types define the possible values that are possible. So for a signature &lt;code&gt;int -&amp;gt; int&lt;/code&gt;, our &lt;strong&gt;domain&lt;/strong&gt; is all possible numbers allowed by the type &lt;code&gt;int&lt;/code&gt; numbers and our &lt;strong&gt;codomain&lt;/strong&gt; is also all possible &lt;code&gt;int&lt;/code&gt; values. Pretty cool right?&lt;/p&gt;
&lt;h3&gt;Inference&lt;/h3&gt;
&lt;p&gt;In the previous function definitions you may have noticed we defined no types but the F# compiler inferred that the type of &lt;em&gt;x&lt;/em&gt; was &lt;code&gt;int&lt;/code&gt;. This is because we used the multiplication &lt;code&gt;(*)&lt;/code&gt; operator on it. Most of the time the compiler does a pretty good job of working out the type. This keeps our code clean from boilerplate cruft. To be sure though, if you are used to a language like Java or C#, this will take a bit of getting used to. My tip is to pay close attention to the signatures. Any IDE will display this all the time or at least on mouse over.&lt;/p&gt;
&lt;p&gt;If you prefer to be explicit or in those cases where the compiler needs some help to determine the type, you can easily define the types explicitly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let f (x:int) = x*x         // define argument type
let f x : int = x*x         // define only return type
let f (x:int) : int = x*x   // define argument type and return type
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The argument type is specified with &lt;code&gt;(x:int)&lt;/code&gt;. The parenthesis are needed to disambiguate the argument type from the return type.&lt;/p&gt;
&lt;p&gt;Just a quick style note. Mostly in F# code the types are left off unless needed.&lt;/p&gt;
&lt;p&gt;I wanted to highlight another way of defining functions, and that is by defining a type signature.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type Unary: int -&amp;gt; int
let increment : Unary = fun x = x + 1
let decrement : Unary = fun x = x - 1
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;A unary function is one that takes only one argument&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we define a &lt;strong&gt;Unary&lt;/strong&gt; function as one that take in a single number and returns a number, and then we have multiple implementations of that type.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we introduced some of the core ideas behind functions. We learned how to define them and how to read a functions signature. We also touched on what the compiler can do for you by inferring the types, and how you can be explicit about the types.&lt;/p&gt;
&lt;p&gt;In the next post we will dive deeper into &lt;a href=&quot;/how-to-fsharp-pt-3&quot;&gt;Working with Functions and getting them to work for you&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Function_(mathematics)&quot;&gt;Mathematics functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Programming_paradigm&quot;&gt;Programming paradigms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/function-signatures/&quot;&gt;Function signature&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/how-to-fsharp-pt-1/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/how-to-fsharp-pt-1/"/>
    <title>How to F# - Part 1</title>
    <updated>2018-10-19T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/how-to-fsharp-pt-1/</uri>
    </author>
    <summary type="html">&lt;p&gt;Over the last few weeks I have been showing various people with different levels of programming experience how to use F#. This post is the first in a series on the basics of programming with F#. In this one we cover assigning values and the different types those values can take on.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;F# is a functional first language that allows for interoperation with the rest of the .NET ecosystem. This means you can use it mixed in a solution with other .NET languages like C# and VB, you can use all available Nuget packages, and you can reuse your knowledge of the existing base class library (BCL) if you are already a .NET developer. To achieve this interoperation F# allows you to program in an object oriented paradigm if you would like but it will often feel a bit clunky compared to the functional paradigm. Hence the &amp;quot;functional first&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Warning&lt;/h2&gt;
&lt;p&gt;I will be covering a lot of ground in as concise a way as possible. In a lot of ways this is &amp;quot;just enough to be dangerous&amp;quot;. That been said learning a programming language is much like learning a spoken language. The best thing you can do is use it even if you feel stupid doing so.&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Depending on your background, one of the first things to stand out with F# is its lack of curly braces. F# uses the whitespece indentation to determine the scope of something. We will see this in a future article when we deal with functions.&lt;/p&gt;
&lt;h3&gt;Assigning value&lt;/h3&gt;
&lt;p&gt;We can assign values in F# using the &lt;code&gt;let&lt;/code&gt; keyword. Since F# is a functional first language even functions can be assigned with the &lt;code&gt;let&lt;/code&gt; keyword. Do not worry too much about what the examples below mean, some of it will be covered later.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// the number 1 assigned to i
let i = 1
// a string assigned to `lowerTxt`
let lowerTxt = &amp;quot;i like to shout&amp;quot;
// assign a function that takes a string and changes it to uppercase
let toUpper (s:string) = s.ToUpper()
// assign value from the result of a function
let upperTxt = toUpper lowerTxt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other languages these values would often be called &lt;em&gt;variables&lt;/em&gt;. In F# values are immutable (cannot be changed), so they are not variable. You have to mark values that you want to be mutable with the &lt;code&gt;mutable&lt;/code&gt; keyword but I recommend not doing this unless you are performance tuning. Usually it is a sign you are not doing things functionally.&lt;/p&gt;
&lt;h3&gt;Commonly used types&lt;/h3&gt;
&lt;p&gt;First lets touch on some common data types. Types define the type of data we can store in a value.&lt;/p&gt;
&lt;h4&gt;Simple&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;string&lt;/code&gt; represents text in a program. When used in a program a &lt;code&gt;string&lt;/code&gt; is defined like this with quotations &lt;code&gt;&amp;quot;Some text in my program&amp;quot;&lt;/code&gt;. We saw usage of it above. It is often prudent to wrap OO .NET string methods in your own since the F# compiler struggles to work out the types of methods in the .NET library. Or any OO style methods for that matter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt; defines whole numbers.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;decimal&lt;/code&gt; is a good choice for money when you need cents.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DateTime&lt;/code&gt; and &lt;code&gt;DateTimeOffset&lt;/code&gt; represent both a date and time component. The latter incorporates a timezone offset.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unit&lt;/code&gt; this is a special type that represents nothing. Later we will see how a function that makes some changes like printing some values, then it may not need to return anything. In this case a type &lt;code&gt;Unit&lt;/code&gt; will be returned.&lt;/p&gt;
&lt;h4&gt;Complex&lt;/h4&gt;
&lt;p&gt;Sometimes you want to capture data together in a way that pulls together simple types to represent a single coherent idea. In F# we can use classes as in C# but sticking with simplicity and immutability, a better option is F#&apos;s record type.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;// define a type
type Person = {
    Name:string
    Birth:DateTime
}

// create an instance of that type
let devon = {
    Name = &amp;quot;Devon&amp;quot;
    Birth = DateTime.Parse(&amp;quot;2121/01/01&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above we defined a new type called &lt;code&gt;Person&lt;/code&gt; and then created an instance of that type assigned to a value called &lt;code&gt;devon&lt;/code&gt;.
Even though a value is immutable, F# does provide an easy way to create a new value from an old value while updating the fields.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let devonBurriss = { devon with Name = &amp;quot;Devon Burriss&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Tuple&lt;/h4&gt;
&lt;p&gt;Another common type in functional programming is a &lt;strong&gt;Tuple&lt;/strong&gt;. A simple tuple is represented as &lt;code&gt;Tuple&amp;lt;T1,T2&amp;gt;&lt;/code&gt;, meaning it has 2 values inside of type &lt;code&gt;T1&lt;/code&gt; and &lt;code&gt;T2&lt;/code&gt;. So tuples are kind of like record types without the named fields. In F# we define a tuple type like this &lt;code&gt;bool * int&lt;/code&gt; and we would create an instance of that type like so &lt;code&gt;let myTuple = (true,99)&lt;/code&gt;. Tuples are often useful as intermediary values between functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;//create a tuple of type bool * int
let myTuple = (true,99)
// use the fst function to get the first value in the tuple
let b1 = fst myTuple
// use the snd function to get the second value in the tuple, with pipe forward operator
let n1 = myTuple |&amp;gt; snd
// use pattern matching to get the values
let (b,n) = myTuple
//val b : bool = true
//val n : int = 99
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Collections&lt;/h4&gt;
&lt;p&gt;Dealing with a collection of elements of the same type is a common occurrence in programming. Whether a sequence of numbers or a list of people, you need a way to work with them. Although you can of course use the .NET collection types in F#, F# has some built-in types that make it easier to interact with collections in a more functional way. These types are &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, and &lt;code&gt;Seq&lt;/code&gt;. Most of the functions for dealing with all these types are shared across all of them.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let lstFst = List.head [1;2;3] // 1
let arrFst = Array.head [|1;2;3|] // 1
let seqFst = Seq.head (seq { yield 1; yield 2; yield 3})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, the same function is available for getting the first element of the collection on each of the relevant modules.&lt;/p&gt;
&lt;p&gt;So why are there 3 different collection types that seem so similar?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt; is the go to collection for me when working with in-memory data. It is an immutable collection so encourages functional best practices. This data structure is optimized for iterating through it and accessing the first element of the list (under the hood it is a linked list). Being a native F# data structure it allows superior pattern matching compared to other data types. This is actually quite common in functional programming where we often interact with a list as &lt;code&gt;head::tail&lt;/code&gt; (pattern matching) where head is the first element in a list and tail is the rest of the list.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array&lt;/code&gt; is a good choice if you need random access to elements in the collection. Is an alias for &lt;em&gt;BCL&lt;/em&gt; &lt;code&gt;Array&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let j = Array.get [|1;2;3|] // val: j = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;seq&lt;/code&gt; is a lazily evaluated collection and so can represent an infinite list. This can be memory saving as each element is evaluated as needed. Is an alias for the &lt;em&gt;BCL&lt;/em&gt; &lt;code&gt;IEnumerable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Two other F# data structures worth mentioning now is &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;ResizeArray&lt;/code&gt;. &lt;code&gt;map&lt;/code&gt; gives us a key-value dictionary that is often quite useful as a lookup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let funcFirstLangs = Map.ofList [(&amp;quot;csharp&amp;quot;,false);(&amp;quot;fsharp&amp;quot;,true)]
let isFuncFirst = Map.find &amp;quot;fsharp&amp;quot; funcFirstLangs // val: isFuncFirst = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ResizeArray&lt;/code&gt; is usually of interest when working with C# as it is an alias for &lt;code&gt;List&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Discriminated Unions&lt;/h4&gt;
&lt;p&gt;The last type I want to touch on is Discriminated Unions (DU or sum types). DUs allow you to define a type which may be one of many types. Let me try explain by example.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;type Rating =
| Skipped
| RemindLater of DateTime
| JustVote of int
| VoteWithComment of int*string

let vote = VoteWithComment (5,&amp;quot;This is the best application every!!!! Worth every cent!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are defining a &lt;strong&gt;DU&lt;/strong&gt; type &lt;code&gt;Rating&lt;/code&gt; that represents a rating of a mobile application. Although each of the 4 cases contains different information, any case will be of type &lt;code&gt;Rating&lt;/code&gt;. We will explore this more in a later post when we tackle pattern matching.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that is the end of the first entry into how to use F# We covered how to assign values and took a whirlwind tour of some of the different types that those values could be. In future installments we will dive into some more advanced topics of working with these values as well as explore the idea of functional programming. I hope you found this interesting and are excited for the next installment. If anything was unclear I would really appreciate your feedback so I can improve this for the next reader who may come along.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/how-to-fsharp-pt-2&quot;&gt;Next How to F# - Part 2 - Understanding and working with Functions&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharp.org/learn.html&quot;&gt;Learn F# resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dungpa.github.io/fsharp-cheatsheet/&quot;&gt;Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/list-module-functions/&quot;&gt;fsharp for fun and profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;Algebraic data types&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/fsharp-scripting/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/fsharp-scripting/"/>
    <title>F# Scripts</title>
    <updated>2018-10-17T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/fsharp-scripting/</uri>
    </author>
    <summary type="html">&lt;p&gt;Using F# scripts is something I only started doing after dabbling in F# for quite a while. This is unfortunate because they are a really fast and easy way of throwing some code together and thus a really good way to learn F#. This post is for anyone getting started with F# scripting.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/get-started/install-fsharp?tabs=windows&quot;&gt;documentation for installing F#&lt;/a&gt;. The easiest way is to install F# as part of Visual Studio. You may still need to add FSI.exe to your &lt;strong&gt;PATH&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharp.org/use/windows/&quot;&gt;Instructions for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharp.org/use/mac/&quot;&gt;Instructions for MacOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharp.org/use/linux/&quot;&gt;Instructions for Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;F# Interactive&lt;/h2&gt;
&lt;p&gt;FSI allows you to execute F# code in an interactive console. Just type &lt;code&gt;fsi.exe&lt;/code&gt; on Windows or &lt;code&gt;fsharpi&lt;/code&gt; on Linux/Mac.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&amp;gt; let x = 1;;
val x : int = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Each expression needs to end with &lt;code&gt;;;&lt;/code&gt; in the interactive window.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To get help: &lt;code&gt;#help;;&lt;/code&gt;&lt;br /&gt;
To quit: &lt;code&gt;#quit;;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Scripting&lt;/h2&gt;
&lt;p&gt;So entering code directly into fsi is ok for trying simple things out but what about more complex code. That is where &lt;code&gt;.fsx&lt;/code&gt; files come in.&lt;/p&gt;
&lt;p&gt;Imagine we have a file called &lt;em&gt;print-name.fsx&lt;/em&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let name = &amp;quot;Devon&amp;quot;
printfn &amp;quot;Name: %s&amp;quot; name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing it we would see the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt; fsi .\samples\print-name.fsx&lt;br /&gt;
&amp;gt; Name: Devon&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Including other fsx files&lt;/h3&gt;
&lt;p&gt;You can load other fsx files into a script. If we have &lt;code&gt;Strings.fsx&lt;/code&gt; containing the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;let toUpper (s:string) = s.ToUpper()
let toLower (s:string) = s.ToLower()
let replace (oldValue:string) (newValue:string) (s:string) = s.Replace(oldValue,newValue)

module StringBuilder =
    open System.Text
    let init() = new StringBuilder()
    let initWith(s:string) = new StringBuilder(s)
    let append (s:string) (sb:StringBuilder) = sb.Append(s)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now use it in our script file like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;#load &amp;quot;Strings.fsx&amp;quot;
open Strings
let name = &amp;quot;Devon&amp;quot; |&amp;gt; StringBuilder.initWith
            |&amp;gt; StringBuilder.append &amp;quot; Burriss&amp;quot;
            |&amp;gt; string |&amp;gt; toUpper
printfn &amp;quot;Name: %s&amp;quot; name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use &lt;code&gt;#load &amp;quot;path/to/script.fsx&amp;quot;&lt;/code&gt; to make it available and then &lt;code&gt;open NameOfFileWithoutExtension&lt;/code&gt; to import it. So each script file is then treated as a &lt;code&gt;module&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Executing it we would see the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt; fsi .\samples\print-name.fsx&lt;br /&gt;
&amp;gt; Name: DEVON BURRISS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Taking Arguments&lt;/h3&gt;
&lt;p&gt;It is possible to pass arguments into a script file. They are available in a field &lt;code&gt;fsi.CommandLineArgs&lt;/code&gt;. Let&apos;s change our script one more time to demonstrate the usage. The arguments come through as an array so we pattern match on the number of elements to decide what to print.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The first element of the array is always the name of the script the arguments are passed into&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;#load &amp;quot;Strings.fsx&amp;quot;
open Strings
let stringWithSpace x = x |&amp;gt; string |&amp;gt; (sprintf &amp;quot; %s&amp;quot;)
let name first = first |&amp;gt; toUpper
let nameAndLastName first last = first |&amp;gt; StringBuilder.initWith |&amp;gt; StringBuilder.append last |&amp;gt; stringWithSpace |&amp;gt; toUpper
let nameAndLastNameWithOccupation first last occ = 
    first |&amp;gt; StringBuilder.initWith 
    |&amp;gt; StringBuilder.append &amp;quot; &amp;quot; 
    |&amp;gt; StringBuilder.append last 
    |&amp;gt; StringBuilder.append (sprintf &amp;quot; (%s)&amp;quot; occ)
    |&amp;gt; string |&amp;gt; toUpper

match fsi.CommandLineArgs with
| [|scriptName;|] -&amp;gt; failwith (sprintf &amp;quot;At least a name required for %s&amp;quot; scriptName)
| [|_;firstName|] -&amp;gt; name firstName |&amp;gt; printfn &amp;quot;Name: %s&amp;quot;
| [|_;firstName; lastName|] -&amp;gt; nameAndLastName firstName lastName |&amp;gt; printfn &amp;quot;Name: %s&amp;quot;
| [|_;firstName; lastName; occ|] -&amp;gt; nameAndLastNameWithOccupation firstName lastName occ |&amp;gt; printfn &amp;quot;Name: %s&amp;quot;
| _ -&amp;gt; failwith (sprintf &amp;quot;Too many arguments %A&amp;quot; (fsi.CommandLineArgs |&amp;gt; Array.tail))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Executing it we would see the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;gt; fsi .\samples\print-name.fsx devon burriss developer&lt;br /&gt;
&amp;gt; Name: DEVON BURRISS (DEVELOPER)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You could of course also access the arguments as a zero based array &lt;code&gt;fsi.CommandLineArgs.[0]&lt;/code&gt; or loop through them.&lt;/p&gt;
&lt;h3&gt;Referencing DLLs&lt;/h3&gt;
&lt;p&gt;You can reference DLLs using &lt;code&gt;#r &amp;quot;path/to/file.dll&amp;quot;&lt;/code&gt;. If you want to pull down DLLs from Nuget, check out &lt;a href=&quot;/up-and-running-with-paket&quot;&gt;my article on using Paket dependency manager&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/fsharp-interactive/&quot;&gt;FSI Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://brandewinder.com/2016/02/06/10-fsharp-scripting-tips/&quot;&gt;10 Tips for Productive F# Scripting&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social Image by &lt;a href=&quot;https://unsplash.com/@0628fromchina&quot;&gt;yifei chen&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/up-and-running-with-paket/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/up-and-running-with-paket/"/>
    <title>Up and running with PAKET</title>
    <updated>2018-10-16T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/up-and-running-with-paket/</uri>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://fsprojects.github.io/Paket/&quot;&gt;Paket&lt;/a&gt; is an awesome dependency manager for .NET. Comparing it to Nuget is both the easiest way to explain the basics of it and also a massive disservice to Paket. In this post I want to share some tips to make working with Paket even more awesome.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;The biggest problem with working with Paket has nothing to do with Paket itself, or even its differences with Nuget. The biggest issue is that the ecosystem is geared to make using Nuget really easy. The tooling is all geared such that Nuget is embedded in your project whether you like it or not. So let&apos;s see how we can make working with Paket as smooth as possible. This ease isn&apos;t a bad thing, it just means the barrier to entry for something better seems high. Let us see what we can do about that.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;If you just want the commands to have Paket up and running in a folder fast:&lt;/p&gt;
&lt;h3&gt;.NET Core 2.1 SDK and later versions&lt;/h3&gt;
&lt;p&gt;You can install it in a specific directory.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet tool install --tool-path &amp;quot;.paket&amp;quot; Paket --add-source https://api.nuget.org/v3/index.json&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Without .NET Core SDK&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Download Paket exe into .paket folder
PowerShell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex (Invoke-WebRequest &apos;https://gist.githubusercontent.com/dburriss/b4075863873b5871d34e32ab1ae42baa/raw/b09c0b3735ef2392dcb3b1be5df0ca109b70d24e/Install-Paket.ps1&apos;)&amp;quot;
# Most NB this creates &apos;paket.dependencies&apos; file
.\.paket\paket.exe init
# At this point add some lines to &apos;paket.dependencies&apos;. Downloads dependencies.
.\.paket\paket.exe install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Install fast&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This section goes over the details of the Powershell script. If you are using .NET Core SDK, feel free to skip this section.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So as I mentioned, Nuget is there by default. Paket is not. You can &lt;a href=&quot;https://fsprojects.github.io/Paket/getting-started.html#Downloading-Paket-s-Bootstrapper&quot;&gt;install Paket manually&lt;/a&gt; but I wanted to provide another option. Let&apos;s create a Powershell script to install Paket with a single line.&lt;/p&gt;
&lt;h3&gt;One liner&lt;/h3&gt;
&lt;p&gt;To work with Paket you need the binary available. Usually this is in a folder named &lt;em&gt;.paket&lt;/em&gt; in the root of your solution. I have created &lt;a href=&quot;https://gist.github.com/dburriss/b4075863873b5871d34e32ab1ae42baa&quot;&gt;a Gist file&lt;/a&gt; that you can download and execute with a single line that will do just that.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;PowerShell -NoProfile -ExecutionPolicy Bypass -Command &amp;quot;iex (Invoke-WebRequest &apos;https://gist.githubusercontent.com/dburriss/b4075863873b5871d34e32ab1ae42baa/raw/b09c0b3735ef2392dcb3b1be5df0ca109b70d24e/Install-Paket.ps1&apos;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Part of the family&lt;/h3&gt;
&lt;p&gt;If you find yourself needing to setup Paket often as can happen if you are using F# fsx scripting files often, you may want to create an easier to remember command. The easiest way to do this is to add a function call to your Powershell profile.&lt;/p&gt;
&lt;p&gt;Edit &lt;em&gt;&amp;quot;C:\Users\ &amp;lt; your username &amp;gt;\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&amp;quot;&lt;/em&gt; on Windows or &lt;em&gt;~/.config/powershell/profile.ps1&lt;/em&gt; on Mac and add the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;function New-Paket {
    New-Item -ItemType directory -Path &amp;quot;.paket&amp;quot;
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    $tag = (Invoke-WebRequest -Uri https://api.github.com/repos/fsprojects/Paket/releases | ConvertFrom-Json)[0].tag_name
    $uri = &amp;quot; https://github.com/fsprojects/Paket/releases/download/&amp;quot; + $tag + &amp;quot;/paket.bootstrapper.exe&amp;quot;
    Invoke-WebRequest $uri  -OutFile .paket/paket.exe
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;You can reload your profile to make the command available in an already open console with &lt;code&gt;&amp;amp; $profile&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will allow you to install paket with a simple &lt;code&gt;New-Paket&lt;/code&gt; Powershell command.&lt;/p&gt;
&lt;h2&gt;Adding dependencies&lt;/h2&gt;
&lt;p&gt;Once you have Paket binary installed you can initialize by typing &lt;code&gt;.\.paket\paket.exe init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This creates a &lt;em&gt;paket.dependencies&lt;/em&gt; file. This is where you place all the dependencies your solution uses. As an example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;source https://www.nuget.org/api/v2
nuget NETStandard.Library
nuget canopy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To download the referenced packages execute &lt;code&gt;.\.paket\paket.exe install&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: a &lt;em&gt;paket.lock&lt;/em&gt; file is generated to ensure you get the same version every time. This should be committed to source control.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this point you have enough to work with Paket when using it with FSX script files.&lt;/p&gt;
&lt;p&gt;You can reference them like so in your fsx files:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;#r &amp;quot;packages/Selenium.WebDriver/lib/netstandard2.0/WebDriver.dll&amp;quot;
#r &amp;quot;packages/canopy/lib/netstandard2.0/canopy.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://fsprojects.github.io/Paket/reference-from-repl.html&quot;&gt;Paket FSI documentation&lt;/a&gt; for an alternative way to get going in a script file.&lt;/p&gt;
&lt;h2&gt;Going further&lt;/h2&gt;
&lt;p&gt;When using Paket with projects (csproj/fsproj) there are a few more things to know. Most important is that in each project folder you need a &lt;em&gt;paket.references&lt;/em&gt; file. This describes which dependencies from the &lt;em&gt;paket.dependencies&lt;/em&gt; file it are used in any given project.&lt;/p&gt;
&lt;p&gt;Something important to note here is that the &lt;em&gt;csproj/fsproj&lt;/em&gt; files need to reference &lt;em&gt;.paket/paket.targets&lt;/em&gt;. This usually looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;Import Project=&amp;quot;..\..\.paket\Paket.Restore.targets&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the project file now no longer needs to reference nuget packages.&lt;/p&gt;
&lt;p&gt;If you have an existing project you want to convert from Nuget to Paket there is a handy command for just that &lt;code&gt;.\.paket\paket.exe convert-from-nuget&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want more details on how Paket works I recommend &lt;a href=&quot;https://cockneycoder.wordpress.com/2017/08/07/getting-started-with-paket-part-1/&quot;&gt;Isaac&apos;s introduction to Paket&lt;/a&gt; and of course the &lt;a href=&quot;https://fsprojects.github.io/Paket/&quot;&gt;Paket documentation&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paket can do more than pull in Nuget packages. It can pull files from disk, git, and entire repositories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Paket is an awesome replacement for Nuget and in this article we looked at how you can get up and running fast as well as make sure it is as easy as possible to get Paket quickly every time you need it.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-windows?view=powershell-6&quot;&gt;Installing Powershell on Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-linux?view=powershell-6&quot;&gt;Installing Powershell on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-macos?view=powershell-6&quot;&gt;Installing Powershell on MacOS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Header image &lt;a href=&quot;https://unsplash.com/@vtrsnts&quot;&gt;Vitor Santos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social image &lt;a href=&quot;https://unsplash.com/@moonshinechild&quot;&gt;Kira auf der Heide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/functional-modeling/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/functional-modeling/"/>
    <title>Functional modeling</title>
    <updated>2018-10-13T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/functional-modeling/</uri>
    </author>
    <summary type="html">&lt;p&gt;In my &lt;a href=&quot;/functional-structural-impedance-mismatch&quot;&gt;previous post&lt;/a&gt; I introduced the idea of a structural model in the code that closely matches what a use-case should do functionally. Just as an ubiquitous language helps us tie concepts in our code, so a functional model helps us capture the functioning of a use-case. In this post I will go into this idea in a little more detail, giving some tips on how to get started.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;I am not explicitly talking about functional programming in this article although any familiar with it will see it&apos;s influences. Even if you do not embrace FP, the concepts from it that I mention here can be applied to the benefit of your codebase.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an example we are looking at a real life project where we are allocating monetary amounts to sales or purchases based on agreements we have with suppliers.
Let&apos;s start with a deeper look at the example that was used in the previous post:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/functional-structure.jpg&quot; alt=&quot;Allocation functional structure&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This was a very simplified view of the components involved for calculating the amounts to be allocated to an agreement due to sales or inbound orders. It also still shows the structural components involved. As an exercise I mapped out the calls that are made while completing a use-case. This style is borrowed from Simon Brown&apos;s &lt;a href=&quot;https://c4model.com&quot;&gt;C4 Model&lt;/a&gt; but with a focus on function rather than structure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/functional-model.jpg&quot; alt=&quot;Allocation functional structure&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And here is the top the entry point for this use-case.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;return await TryGetAgreement(agreementId)
            .Bind(agreement =&amp;gt; 
                    _agreementSupportedValidator.IsSupported(agreement).ToAsync())
            .Bind(supportedAgreement =&amp;gt; 
                    TryCreateAgreementWithHistory(supportedAgreement).ToAsync())
            .Bind(agreementWithHistory =&amp;gt; 
                    AllocationPathfinder(agreementWithHistory).ToAsync())
            .Map(allocationResult =&amp;gt; 
                    AllocationsFilter.Filter(allocationResult))
            .Bind(newAllocationResult =&amp;gt; 
                    TryStoreAllocations(newAllocationResult).ToAsync())
            .Try();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although I am the first to admit that this style is not too pretty in C#, once you get used to the &lt;a href=&quot;https://github.com/louthy/language-ext&quot;&gt;Functional Language Extensions&lt;/a&gt; like &lt;code&gt;Bind&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, and &lt;code&gt;Try&lt;/code&gt;, it really reads like what it does at this level of abstraction.&lt;/p&gt;
&lt;p&gt;So why would we want to write code like this?&lt;/p&gt;
&lt;h2&gt;High level description of process&lt;/h2&gt;
&lt;p&gt;When exploring a codebase it is always nice to find the entry point to a feature that describes what happens at a single abstraction level. Too often each step is wrapped in some infected factory or manager that conveys very little intent and quickly become a class quagmire.&lt;/p&gt;
&lt;h2&gt;Maps well to Event Storming&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eventstorming.com/&quot;&gt;Event Storming&lt;/a&gt; is becoming increasingly more popular as a means of learning a domain. By it&apos;s very nature Event Storming is a time based rather than a state based model and it can be quite difficult&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/es-legend.jpg&quot; alt=&quot;Event Storming legend&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Focus on doing&lt;/h2&gt;
&lt;p&gt;Following on from the previous point but true of every level of the codebase, bringing the functional process forward into plain view is simpler when focusing on what is being done, rather than on the doer. we now move from modeling stateful doers to modeling the state between transformations over time. This is way more inline with how the business thinks in terms of getting work done.&lt;/p&gt;
&lt;h2&gt;Testability (unit tests)&lt;/h2&gt;
&lt;p&gt;If you are able to constrain external IO to the beginning and end of your flows you will have simple input/output functions in between. This sort of code is a lot more testable than those that have many dependencies. You can now concentrate on just testing the output from a certain input without worrying about injecting mocked dependencies.&lt;/p&gt;
&lt;h2&gt;Composability&lt;/h2&gt;
&lt;p&gt;Often in business we have branching flows. Too often this results in bad abstractions that try to handle every branch, even those not yet added by the business. A far more maintainable way to handle these is to reuse that which is common and compose it with specific implementations when things branch. This usually results in cleaner code that is far more future proof than using inheritance.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this post we went into a little more detail of what code may look like if we started modeling the flow of events through time even within small the use-cases. We looked briefly at what this could look like and reasons it might be worth trying. The keys to implementing this well is to;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chain steps at a single abstraction level that make sense, allowing developers to dive only to the depth needed to understand what is needed&lt;/li&gt;
&lt;li&gt;Instead of trying to come up with an abstraction that captures every state, model the states between transitions&lt;/li&gt;
&lt;li&gt;Capture the domain language in both the states and the functions that transition from state to state&lt;/li&gt;
&lt;li&gt;Push dependencies to the outside to increase testability and how easy it is to reason about the system&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you are interested in really drilling into this and learn functional programming a highly recommend &lt;a href=&quot;https://pragprog.com/book/swdddf/domain-modeling-made-functional&quot;&gt;Scott Wlaschin&apos;s Domain Modeling made Functional&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What do you think? If you have any ideas please leave a comment or reach out on Twitter &lt;a href=&quot;https://twitter.com/DevonBurriss&quot;&gt;@DevonBurriss&lt;/a&gt;. You also may be interested in my &lt;a href=&quot;/functional-structural-impedance-mismatch&quot;&gt;previous article on the differences between structural and functional modeling&lt;/a&gt; and my &lt;a href=&quot;/managing-code-complexity&quot;&gt;tips for managing code complexity&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Function_model&quot;&gt;Function model&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/functional-structural-impedance-mismatch/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/functional-structural-impedance-mismatch/"/>
    <title>The functional-structural impedance mismatch</title>
    <updated>2018-09-08T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/functional-structural-impedance-mismatch/</uri>
    </author>
    <summary type="html">&lt;p&gt;When modeling software we often focus on modeling state. What if instead we modeled functionality through time? This way we can more closely match our structural model to our behavioral model. I believe this increases the ease of maintaining a system, for to change a system you must first understand it.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;In this post I want to explore the way we think about, document, and design systems; taking a brief tour through history on this topic and pose a question about whether we are doing it in a way that makes sense. This question brings up something I have started calling &lt;em&gt;the functional-structural impedance mismatch&lt;/em&gt;. I will go through some experiences trying to minimize this mismatch and hopefully convince you to try it yourself.&lt;/p&gt;
&lt;h2&gt;A quick look at history&lt;/h2&gt;
&lt;p&gt;In the 1950s well defined function model diagrams started being used in &lt;em&gt;systems engineering&lt;/em&gt;, evolving from business process diagrams developed and used in the previous century. In the 1960s these were used by NASA to visualize the time sequence of space missions, and from there they developed into various usages in software development. See the resources at the end if you are interested in the details of this progression but I will move forward quickly here. By the 1990s object-oriented programming started gathering more widespread popularity, exploding when Java arrived on the scene. With it grew the popularity of UML and in particular the structural diagrams that describe how we build our OO systems. I remember many weeks drawing both behavioral and structural diagrams for my university projects in the early 90s and since then class diagrams have served as the staple for most diagrams I see for how software is built.&lt;/p&gt;
&lt;p&gt;Why is this important? I think it is influential in why almost any diagram on how to build, or how a system is built, is a structural diagram describing state. The type of diagram is not a problem in and of itself. Diagramming the structure of an application is important. I myself am a big fan of the low ceremony, high contextual information of &lt;a href=&quot;https://c4model.com/&quot;&gt;Simon Brown&apos;s C4 model&lt;/a&gt;. State with behavior is how OOP developers think about software, and so is how we document.&lt;/p&gt;
&lt;h2&gt;Describing behavior&lt;/h2&gt;
&lt;p&gt;Regardless of what discipline you come from, most people can gain a fair amount of information from a well drawn flow chart. Flow charts are pretty great behavioral diagrams that tell you how a system accomplishes something, regardless of whether that system is physical or digital. What is great about these kinds of diagrams is that they give you an indication of how a system accomplishes something &lt;em&gt;through time&lt;/em&gt;. They are very intuitive for us to understand how a system behaves. And if you think about it, understanding how a system behaves (or should behave) is one of the most important things we as developers need to know to maintain and enhance a software system.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/functional-process.jpg&quot; alt=&quot;Allocation flow chart&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Above is an excerpt from a simple flow chart describing the process of calculating the value of an agreement based on sales depending on the type of the agreement.&lt;/p&gt;
&lt;h2&gt;A state based structure&lt;/h2&gt;
&lt;p&gt;So let us take a look at what this flow diagram typically translates to when built by object-oriented programmers that are accustomed to modeling state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a simplified diagram of a real application I worked on. This is by no means me shitting on how something was built. There are always opportunities to learn how to improve things. This one was unique as we took the time to refactor it (as we will see in a bit).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- ![Allocation flow chart](/img/posts/2018/functional-process.jpg)
![Allocation object structure](/img/posts/2018/object-structure.jpg) --&gt;
&lt;img src=&quot;../img/posts/2018/functional-process.jpg&quot; alt=&quot;Fire&quot; class=&quot;img-rounded pull-left&quot; width=&quot;510&quot; style=&quot;margin-right: 1em;&quot;&gt;
&lt;img src=&quot;../img/posts/2018/object-structure.jpg&quot; alt=&quot;Fire&quot; class=&quot;img-rounded pull-left&quot; width=&quot;510&quot; style=&quot;margin-right: 1em;&quot;&gt;
&lt;div class=&apos;clearfix&apos;&gt;&lt;/div&gt;
I think the resulting structure of the important classes are quite standard. I also do not think that it is crystal clear how and where each component relates to the process. It is not too hard to guess because this has been simplified and this is a pretty small system. When digging into this system though is was already difficult to reason about where what is done.
&lt;h2&gt;A functional structure&lt;/h2&gt;
&lt;p&gt;So the team agreed that we need to try improve the structure of the existing code. Over the next couple weeks the system was refactored structurally to look like this:&lt;/p&gt;
&lt;img src=&quot;../img/posts/2018/functional-process.jpg&quot; alt=&quot;Fire&quot; class=&quot;img-rounded pull-left&quot; width=&quot;510&quot; style=&quot;margin-right: 1em;&quot;&gt;
&lt;img src=&quot;../img/posts/2018/functional-structure.jpg&quot; alt=&quot;Fire&quot; class=&quot;img-rounded pull-left&quot; width=&quot;510&quot; style=&quot;margin-right: 1em;&quot;&gt;
&lt;div class=&apos;clearfix&apos;&gt;&lt;/div&gt;
As you can see, visually this is far more in line with the functional flow diagram. This really did improve the team&apos;s ability to reason about the code, especially for new team members joining after development had progressed quite far.
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;Here is what some of the new joiners to the team had to say about the refactored code:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...my first impression looking at the code was that it had a flow that I could easily follow without having to know the state of objects. I could figure out, looking at the code, that one function result led to another function in a particular flow until you reach an end result... - Bruno Lamarao&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When I just joined the team we did some mob programming on the project. Being able to sit down without having opened the project before and start adding features, just shows that the behavior/flow of the program was very easy to reason about. - Thomas Bouman&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This stood out to me. It is not often I had that feeling about code and it was not something I heard often from other developers. It confirmed the suspicion I had that this may be a better way of modeling software. I am wary of silver bullets so it is possible that some systems are just better as a pure state based model. A very simple CRUD based application probably falls into this camp. As soon as we have more complex functionality though, I think it is worth modeling it to match our mental model of how it functions.&lt;/p&gt;
&lt;h3&gt;Why do I think this is better?&lt;/h3&gt;
&lt;h4&gt;A single model&lt;/h4&gt;
&lt;p&gt;As I have already mentioned, the functional model now matches the structural model. The importance of this cannot be overstated. To know the structure of the software you only need to know what it does functionally and vice versa, to look at the structure is to look at what the system functionally does.&lt;/p&gt;
&lt;h4&gt;Entry point tells a story&lt;/h4&gt;
&lt;p&gt;I mentioned this in my &lt;a href=&quot;/managing-code-complexity/&quot;&gt;tips for managing code complexity&lt;/a&gt; but having an entry point into your code that describes the functioning of a feature is a giant win. Each step should be at the same abstraction level, giving developers a great way to understand where they need to dive into the code to make changes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/use-case.jpg&quot; alt=&quot;entry point&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Solving the trouble with Liskov Substitution Principle&lt;/h4&gt;
&lt;p&gt;Good abstractions are hard to discover and even harder to maintain. As a system evolves, a previously good abstraction can start to become awkward. When you have a model that is used liberally throughout an application, a good abstraction is almost impossible to discover.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/big-model.jpg&quot; alt=&quot;monolithic model&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And here in lies the key. By constraining a model to be used within a certain application flow, or even within a step in that flow, we limit the dependencies on it.
Where before we had a model that is monolithic and used throughout the software application, now we constrain our model and any resulting abstractions to only servicing a single step in our feature flow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/small-model-steps.jpg&quot; alt=&quot;Small steps small models&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This means we only need to concern ourselves with a model that satisfies a small subsection of the functionality instead of all functionality within an application. This is far, far easier to reason about.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING: This does some with one overhead. Class explosion! In a high ceremony language like C# or Java, this can be quite a high initial cost indeed. I do recommend not optimizing for the initial extra cost of creating a few more files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So far I have avoided talking about functional programming. The functional used in this article is with regard to behavior rather than functions in the usual FP sense. They are indeed related though as this style of designing applications is what you naturally tend toward following an FP approach. I avoided mentioning FP till this point though because I think that an OO paradigm programmer can benefit from applying this style of design without buying into FP. Who knows? It may be your gateway drug :)&lt;/p&gt;
&lt;p&gt;In future articles I hope to demonstrate some more practical examples of developing applications this way, so keep a lookout for those ([follow on Twitter)(https://twitter.com/DevonBurriss)).&lt;/p&gt;
&lt;p&gt;In the meantime if you are interested I suggest you check out Scott Wlaschin&apos;s excellent book &lt;a href=&quot;https://pragprog.com/book/swdddf/domain-modeling-made-functional&quot;&gt;Domain modeling made functional&lt;/a&gt; where he demonstrates a lot of these concepts in a FP way with F#.&lt;/p&gt;
&lt;p&gt;What do you think? Are you already writing your applications this way? Will you try it? Does &lt;em&gt;functional-structural impedance mismatch&lt;/em&gt; as an idea make sense?&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Function_model&quot;&gt;Function model&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credit&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@sharonp&quot;&gt;Sharon Pittaway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Refactoring marathon &lt;a href=&quot;https://twitter.com/Viper128&quot;&gt;Duncan Roosma&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/anatomy-of-automated-testing/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/anatomy-of-automated-testing/"/>
    <title>Anatomy of an automated test suite</title>
    <updated>2018-08-13T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/anatomy-of-automated-testing/</uri>
    </author>
    <summary type="html">&lt;p&gt;Unit, integration, end-to-end, acceptance, UI tests, and more. With so many types of automated tests is it no wonder that we so often disagree on whether something is an acceptance test or an integration test? Or maybe an end-to-end test? What if instead of thinking about the structure of the test, what it tested, we instead considered the question that the test is answering...&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;A quick note on the test pyramid&lt;/h2&gt;
&lt;p&gt;For some reason, the test pyramid comes up when talking about what tests to write. The test pyramid gives us an indication of the relative return on investment of writing certain types of tests. The cost of writing and maintaining UI tests is usually quite high, thus diminishing their value as verification of correctness. Unit tests, on the other hand, should be pretty quick to write, easy to maintain, and so give more value over UI tests. Therefore we should have a relatively large number of unit tests compared to UI tests.&lt;/p&gt;
&lt;p&gt;In this image, I use &lt;em&gt;Service&lt;/em&gt; to encompass integration, end-to-end, acceptance tests, etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/test-pyramid.jpg&quot; alt=&quot;Test Pyramid&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If we had a way that made &lt;a href=&quot;/page-module-model/&quot;&gt;UI tests easy to write and maintain&lt;/a&gt;, they would switch places in the test pyramid. They might then provide more value relative to the cost of creation and maintenance.&lt;/p&gt;
&lt;h2&gt;Practices around testing&lt;/h2&gt;
&lt;p&gt;Let us take a look at some of the testing practices around and what they focus on. This will give us a good indication of what questions we can ask of our tests.&lt;/p&gt;
&lt;p&gt;First up we have &lt;strong&gt;Test-Driven Development&lt;/strong&gt;. A lot can be written about TDD and half of it would be disagreed with by half its practitioners half of the time. I will try to stay away from questions of what to mock and the granularity of the tests. I have &lt;a href=&quot;/maintainable-unit-tests/&quot;&gt;written about my thoughts on maintainable unit tests&lt;/a&gt; already though. The practice of writing tests first, then making them pass, and then refactoring; gives fast and incremental feedback on both progress and the design of your code. While making functional progress a test suite is being built up that proves that what you have implemented is working as expected by you as the developer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Behavior-Driven Design&lt;/strong&gt; builds on top of the idea of TDD but with a focus on capturing requirements in an automated way that fosters domain understanding and collaboration with stakeholders.&lt;/p&gt;
&lt;p&gt;It really isn&apos;t clear to me that the 2 need to be separate practices. BDD is just TDD practiced by developers with a &lt;a href=&quot;/acceptance-tests/&quot;&gt;focus on domain knowledge and stakeholder collaboration&lt;/a&gt;. On the other side, TDD has become what developers do when they are not focusing on stakeholder collaboration. This was not its original intent.&lt;/p&gt;
&lt;p&gt;Honestly, though I do find the distinction a little bit useful in thinking about the kind of tests I am writing just because it allows me to ask questions about the quality of what was built and the functional correctness.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/test-quadrant.jpg&quot; alt=&quot;Test Quadrant&quot; /&gt;&lt;/p&gt;
&lt;p&gt;So for the sake of comparison, we will make the distinction that unit tests are an artifact of TDD and acceptance tests are an artifact of BDD. Don&apos;t get too attached to this idea, it is just useful for the upcoming discussion.&lt;/p&gt;
&lt;h2&gt;Asking the right questions&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;UPDATE: I have noticed a lot of confusion when talking about Integration tests. In the context of this post I mean a narrow test that tests the connection handshake and contract with software outside of the process boundary. Typically I limit the scope of these but do not mock the external system, since that is the point of the test. If on the other hand there was a reliable way to verify the contract with fewer dependencies, I would be happy to drop this and name it a Contract Test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I promised some questions to be asked to give a different perspective on the types of tests. What if instead of thinking about tests in terms of how they were written (xUnit and C# vs Gherkin) we thought about them in terms of questions directed at the test?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Do I understand the problem?&lt;br /&gt;
Is my feature ready to ship?&lt;br /&gt;
Does it behave as expected?&lt;/em&gt;&lt;br /&gt;
Check the &lt;strong&gt;Acceptance tests&lt;/strong&gt;. Did it passed? Ship the feature.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Am I confident I built it well?&lt;br /&gt;
Does my code handle exceptions correctly?&lt;br /&gt;
Is my codes API intuitive to use?&lt;/em&gt;&lt;br /&gt;
Check your &lt;strong&gt;Unit tests&lt;/strong&gt;. Passes. I can am confident in the code. I can refactor with confidence.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Does my data access work against a real database?&lt;br /&gt;
Do my API calls work as expected?&lt;br /&gt;
Are my message queues configured correctly?&lt;/em&gt;&lt;br /&gt;
Check the &lt;strong&gt;Integration tests&lt;/strong&gt;. Passes. I am confident that I won&apos;t have surprises when the system runs. I will find integration problems quickly.&lt;/p&gt;
&lt;p&gt;There are other types of tests like &lt;strong&gt;Consumer-driven contracts&lt;/strong&gt; and &lt;strong&gt;UI tests&lt;/strong&gt; that might be useful to you and I am sure you can come up with the questions if they matter to you. The point is that dividing your tests based on how they are implemented is less useful than distinguishing what answers each group of tests is good at giving.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this post, I suggested that instead of looking at tests based on what they test or how they are implemented, it is more useful to ask what questions they can answer. For example:&lt;br /&gt;
&lt;strong&gt;Acceptance tests&lt;/strong&gt; answer &lt;em&gt;Did I build the right thing?&lt;/em&gt; and &lt;em&gt;Can I ship it?&lt;/em&gt;.&lt;br /&gt;
&lt;strong&gt;Unit tests&lt;/strong&gt; give me confidence on &lt;em&gt;Did I build it right?&lt;/em&gt;.&lt;br /&gt;
&lt;strong&gt;Integration tests&lt;/strong&gt; tell me &lt;em&gt;Can these components communicate?&lt;/em&gt; I especially like checking across process boundaries here.&lt;/p&gt;
&lt;p&gt;Hopefully, by this point, I have convinced you to think about your tests in terms of the questions they answer and the actions you will take from those questions.&lt;/p&gt;
&lt;p&gt;One last thing. Much of the gain in TDD is that unit tests gives you rapid feedback. As long as you have good trustworthy acceptance tests, deleting unit tests if they are causing any issues should be completely acceptable. They already gave a large amount of their benefits in the design and verification process.&lt;/p&gt;
&lt;p&gt;I hope you found this useful. If so I would love to hear your thoughts on the different types of testing.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Background photo by &lt;a href=&quot;https://unsplash.com/@stijntestrake&quot;&gt;Stijn te Strake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social photo by &lt;a href=&quot;https://unsplash.com/@tentides&quot;&gt;Jeremy Bishop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/page-module-model/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/page-module-model/"/>
    <title>The Page Module Model with F# and Canopy</title>
    <updated>2018-08-12T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/page-module-model/</uri>
    </author>
    <summary type="html">&lt;p&gt;In the past I have done some UI testing with Selenium. I quickly adopted the Page Object Model (POM) for this kind of testing to ease readability, maintenance, and re-use across tests. Recently I needed to look into doing some UI testing and I decided to use &lt;a href=&quot;https://lefthandedgoat.github.io/canopy/&quot;&gt;Canopy&lt;/a&gt; to abstract away working with Selenium. Although Canopy has some great helpers around Selenium I still found myself wanting to abstract away elements on each page and the pages themselves. Enter the Page Module Model (PMM)...&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;So full disclosure... I doubt PMM is a thing. I didn&apos;t even try search for it until writing the previous sentence. It isn&apos;t. Yet... It is similar to the POM except using &lt;code&gt;module&lt;/code&gt;s because I am using F#.&lt;/p&gt;
&lt;h2&gt;What is the page object model?&lt;/h2&gt;
&lt;p&gt;The POM is simple. We encapsulate interactions with pages and elements on the site with objects. Here is an example of an &lt;a href=&quot;https://github.com/dburriss/UiMatic&quot;&gt;old POM framework I wrote years ago&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;[Url(key: &amp;quot;home&amp;quot;)]
public class GoogleHomePage : Page
{
    [Selector(name: &amp;quot;q&amp;quot;)]
    public IInput SearchBox { get; set; }

    public GoogleHomePage(IDriver driver) : base(driver)
    {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then use this class to instantiate an object that we interact with instead of interacting with Selenium directly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;[Theory]
[InlineData(TestTarget.Chrome)]
public void Title_OnGoogleHomePageUsingConfig_IsGoogle(TestTarget target)
{
    using (IDriver driver = GetDriver(target, config))
    {
        //create page model for test
        var homePage = Page.Create&amp;lt;GoogleHomePage&amp;gt;(driver);
        //tell browser to navigate to it
        homePage.Go&amp;lt;GoogleHomePage&amp;gt;();
        //fill a value into the text box
        homePage.SearchBox.Value = &amp;quot;TEST&amp;quot;;
        //an example of interacting with the config if needed. This gets expected title from config. 
        var expectedTitle = config.GetPageSetting(&amp;quot;home&amp;quot;).Title;
        //check the titles match
        Assert.Equal(expectedTitle, homePage.Title);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have ever written tests against Selenium directly I am sure you can agree that is cleaner.&lt;/p&gt;
&lt;h2&gt;Writing tests in F# and Canopy with Page Module Model&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https://github.com/dburriss/PageModuleModelExample&quot;&gt;source code for this example on Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So what would the Page Object Model look like with static functions on a &lt;code&gt;module&lt;/code&gt;? Pretty cool actually...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&amp;quot;No laptops are free&amp;quot; &amp;amp;&amp;amp;&amp;amp; fun _ -&amp;gt;
    HomePage.searchFor &amp;quot;Laptops&amp;quot;
    let results = SearchResultsPage.results()
    test &amp;lt;@ results |&amp;gt; List.forall (fun x -&amp;gt; x.Price &amp;gt; 0m) @&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can keep the tests really concise and describe what we want to happen. Here we search for &amp;quot;Laptops&amp;quot;, get the search results, and then check that the price is not 0 on any items. We will dive a little deeper into how this is done in the next section.&lt;/p&gt;
&lt;p&gt;This style also allows us to easily define simple smoke tests to run before getting into the the more functional tests. A smoke test is an easy quick test of something basic. The idea being that &lt;em&gt;&amp;quot;Where there is smoke there is fire&amp;quot;&lt;/em&gt;, so if a smoke test fails, it is not worth proceeding with the more feature rich tests.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;context &amp;quot;Smoke tests&amp;quot;
skipAllTestsOnFailure &amp;lt;- true
&amp;quot;home page loads&amp;quot; &amp;amp;&amp;amp;&amp;amp; fun _ -&amp;gt; displayed HomePage.homePageBanner
&amp;quot;search box available&amp;quot; &amp;amp;&amp;amp;&amp;amp; fun _ -&amp;gt; displayed Header.searchBox
&amp;quot;cart is available&amp;quot; &amp;amp;&amp;amp;&amp;amp; fun _ -&amp;gt; displayed Header.basketButton
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use the &lt;code&gt;skipAllTestsOnFailure &amp;lt;- true&lt;/code&gt; to make sure we skip any other tests if any smoke tests fails.&lt;/p&gt;
&lt;h2&gt;The building blocks for composition&lt;/h2&gt;
&lt;p&gt;I usually build a page that I need and then start extracting the reusable functions out into modules from there. Most sites will have some kind of header/navigation. Here is what I needed in a header for the tests I wrote for this post.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;module Header =
    //selectors
    let searchBox = &amp;quot;#search_query&amp;quot;
    let basketButton = &amp;quot;a[href=\&amp;quot;/winkelmandje\&amp;quot;]&amp;quot;

    //actions
    let searchFor term =
        searchBox &amp;lt;&amp;lt; term
        press enter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we define some selectors and a simple function that allows us to use the search functionality.&lt;/p&gt;
&lt;p&gt;If possible to modify the HTML I recommend putting &lt;code&gt;data-test-xyz&lt;/code&gt; style attributes on your elements to allow you to easily query elements. Unfortunately I did not have the luxury to do so even if the front-end developers would let a back-end developer like me near it. Probably wise :)&lt;/p&gt;
&lt;p&gt;Let&apos;s look at something a bit more complex. The following module represents search results on a page.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;module SearchResults =
    open OpenQA.Selenium

    type SearchResultElement = {
        ProductId:string
        El:IWebElement
        Name:string
        Price:decimal
        IsAvailable:bool
    }

    let private toPrice (s:string) = s.Split(&amp;quot;,&amp;quot;).[0] |&amp;gt; decimal
    let private getOrderButton itemEl = itemEl |&amp;gt; elementWithin @&amp;quot;.product__order-button&amp;quot;
    let private isOrderButton (orderBtnEl:IWebElement) =
        orderBtnEl
        |&amp;gt; getAttrValue &amp;quot;class&amp;quot;
        |&amp;gt; fun s -&amp;gt; s.Split(&amp;quot; &amp;quot;)
        |&amp;gt; Array.contains @&amp;quot;action--order&amp;quot;

    let items () =
        let rowEls = element (sData &amp;quot;component&amp;quot; &amp;quot;products&amp;quot;)
                    |&amp;gt; elementsWithin &amp;quot;.card&amp;quot;
        let getId itemEl = itemEl |&amp;gt; elementWithin &amp;quot;a&amp;quot; |&amp;gt; getDataAttrValue &amp;quot;productid&amp;quot;
        let getTitle itemEl = itemEl |&amp;gt; elementWithin &amp;quot;a&amp;quot; |&amp;gt; getAttrValue &amp;quot;title&amp;quot;
        let getPrice itemEl = itemEl |&amp;gt; elementWithin @&amp;quot;.product__sales-price&amp;quot; |&amp;gt; read |&amp;gt; toPrice

        rowEls
        |&amp;gt; List.map (fun itemEl -&amp;gt;
                                {
                                    ProductId = itemEl |&amp;gt; getId
                                    El = itemEl
                                    Name = itemEl |&amp;gt; getTitle
                                    Price = itemEl |&amp;gt; getPrice
                                    IsAvailable = itemEl |&amp;gt; getOrderButton |&amp;gt; isOrderButton
                                })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a bit complex because of the poor selector options available to me in the HTML but still not too bad. I want to draw attention to the &lt;code&gt;SearchResultElement&lt;/code&gt; record. I parse the HTML to a record rather than constantly interacting with &lt;code&gt;IWebElement&lt;/code&gt;. You saw this in the test for a 0 price where I was able to easily check the &lt;code&gt;Price&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;Note: I make use of some helpers here like &lt;code&gt;getDataAttrValue&lt;/code&gt; that are in the &lt;code&gt;Selectors.fs module&lt;/code&gt; which you can checkout in the source if you like.&lt;/p&gt;
&lt;h2&gt;The Page Module&lt;/h2&gt;
&lt;p&gt;With these building blocks the actual page &lt;code&gt;module&lt;/code&gt; can end up being quite simple.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-fsharp&quot;&gt;module SearchResultsPage =
    open Elements
    open canopy.classic

    let uri = &amp;quot;https://www.coolblue.nl/zoeken&amp;quot; //should use settings or relative urls
    let verifyOn() = on uri
    let searchFor term = Header.searchFor term
    let results() = SearchResults.items()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the page we can now group functionality on a module that makes semantic sense and compose our functions from the building blocks we have already defined.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/ui-testing.jpg&quot; alt=&quot;UI testing with Canopy&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this post we saw how the Page Object Model can be modelled in a more functional way, using building blocks to construct pages. We also saw how we can transform interesting elements of the page into records that give us type safety and intellisense.&lt;/p&gt;
&lt;p&gt;Lastly, we saw how concise the combination of F# and Canopy can make our UI tests.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Social image by &lt;a href=&quot;https://unsplash.com/@reinhartjulian&quot;&gt;Reinhart Julian&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/acceptance-tests/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/acceptance-tests/"/>
    <title>Writing readable Acceptance tests</title>
    <updated>2018-08-11T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/acceptance-tests/</uri>
    </author>
    <summary type="html">&lt;p&gt;Acceptance tests can be a great way of making sure you are building the right thing. When used in in a way that uses natural language it also serves as a collaboration tool with stakeholders to define what should be built before it is built. This can save a great deal of development time in making sure you don&apos;t build the wrong thing and also has the added benefit of growing a developers domain knowledge as he or she collaborates with a stakeholder in fleshing out and verifying the acceptance tests. Recently we invested a fair amount of time in a team here at work iterating on the style of the acceptance tests. We figured if the goal is to allow developers and stakeholders to collaborate, then making sure the tests makes sense to both parties is important. In this post I will share some of the experiences I have gained over the years, more specifically showing how we applied this to improving our acceptance tests in my current domain. As always though this was a collaborative effort within the team.&lt;/p&gt;
&lt;h2&gt;A brief introduction&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You probably want to skip to the next section if you already have experience with the Gherkin language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Acceptance or behavior tests come in many different forms but probably the most common is those described in the &lt;a href=&quot;https://docs.cucumber.io/gherkin/reference/&quot;&gt;Gherkin&lt;/a&gt; language which is a domain specific language for writing easily readable specifications that can be executed. The most common keywords used are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Feature&lt;/code&gt;: provide a high-level description of a software feature, and to group related scenarios&lt;br /&gt;
&lt;code&gt;Scenario&lt;/code&gt;: a concrete example that illustrates a business rule. Consists of one or more steps (Given, When, Then, Examples)&lt;br /&gt;
&lt;code&gt;Given&lt;/code&gt;: describe the initial state of a system&lt;br /&gt;
&lt;code&gt;When&lt;/code&gt;: describe events or actions that occur in or against the system&lt;br /&gt;
&lt;code&gt;Then&lt;/code&gt;: describe the expected outcome of the &lt;code&gt;When&lt;/code&gt; actions against the system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Gherkin language has many different runners such as &lt;a href=&quot;https://docs.cucumber.io/&quot;&gt;Cucumber&lt;/a&gt;, &lt;a href=&quot;https://specflow.org/&quot;&gt;Specflow&lt;/a&gt;, and &lt;a href=&quot;http://behat.org/&quot;&gt;Behat&lt;/a&gt; for whatever your programming language of choice is. Using Gherkin is not the only way of writing behavior oriented tests. Many developers just use standard testing frameworks or more low level ones oriented toward behavior testing. Personally I think if you are committed to working on the tests collaboratively with stakeholders it is difficult to overestimate the benefits of a format that is readable to non-developers.&lt;/p&gt;
&lt;h3&gt;Acceptance tests vs Behavior Driven Development (BDD)&lt;/h3&gt;
&lt;p&gt;Although this is not the focus of this post I did want to mention the difference here in my mind. BDD is the practice of defining specification of how a system should behave and automating the execution of those specifications. Defining the specification of what needs to be built requires deliberate discovery of requirements, which requires collaboration between stakeholders and developers. By discovering the unknowns upfront development is more productive, with less surprises and rework throughout the development life-cycle.&lt;/p&gt;
&lt;p&gt;Acceptance tests can be an integral artifact from the process of BDD. In my mind Acceptance tests are simply the tests that answer these simple questions: &amp;quot;What must the feature do?&amp;quot;, &amp;quot;Is it done?&amp;quot;, and &amp;quot;Can I deploy it?&amp;quot;. In a perfect world with perfect confidence in your acceptance tests, they are the gate for continuous delivery of features. Once they are passing the feature is in production.&lt;/p&gt;
&lt;h2&gt;Lost in the woods&lt;/h2&gt;
&lt;p&gt;Once you sit down to write an Acceptance test you start to realise there are many ways you can write them. What classifies as a feature? What level of abstraction do I write against? How specific do I make my scenarios? Black-box tests or not?&lt;/p&gt;
&lt;p&gt;I will attempt to answer these quickly before showing you the evolution of our acceptance tests, although I suspect some of my answers will fall short considering how different teams&apos; stories can be.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What classifies as a feature?&lt;/em&gt; This is a single piece of functionality that can be shipped independently from others. This is often difficult to determine because sometimes just because a feature is independently shippable doesn&apos;t always make sense for it to be shipped. In the examples to follow we experienced this because although different &lt;em&gt;types of Purchase Agreements&lt;/em&gt; have different behavior and can be independently shipped, until we covered a certain subset of all types it didn&apos;t make sense for us to release. A helpful question here might be &lt;em&gt;Could X be broken while Y is still considered correct?&lt;/em&gt; Then it quite possibly could be a feature.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What level of abstraction do I write against?&lt;/em&gt; In a way, this one is easy. The very highest. The one the business operates and talks at. &lt;a href=&quot;http://devonburriss.me/managing-code-complexity/&quot;&gt;Hopefully your code is written at this level of abstraction at the entry point as well&lt;/a&gt;. Your acceptance tests should not be mentioning things in your code or implementation details that are not going to make sense to business stakeholders. The easiest way to check this is to ask a business stakeholder to read your test. Or better yet, co-write them.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;How specific do I make my scenarios?&lt;/em&gt; My advice here would be to make them pretty damn specific. What you are aiming for is an example that has the makings of a real life scenario that a stakeholder would be tackling. You are looking for a couple scenarios that collectively catch most permutations in the system. I don&apos;t think it is necessary to capture EVERY permutation through your scenarios. Other lower-cost forms of testing can catch these if necessary. &lt;code&gt;Examples&lt;/code&gt; can also go a long way in covering permutations if you feel you need them and in a way that doesn&apos;t get too verbose. Use these judiciously though. If the test is no longer going to make sense to a stakeholder, prefer a lower cost test like a unit test to check permutations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Black-box tests or not?&lt;/em&gt; I use the term &lt;strong&gt;Black-box&lt;/strong&gt; to describe a test that doesn&apos;t know anything about the internals of your code. A black-box acceptance test would exercise the code through a UI, REST API, or command line and then observe the results in a database, message queue, logs, or console output. This has some pros and cons. Firstly you are really exercising your system like any other client would so you can have a lot of confidence that the system is working as a whole. The downside is that measuring the effects can be quite challenging and the tests can often take quite long to run, as well as be complex to setup. Whether you want to do this depends on the cost to benefit ratio. In the past where the core of a system was to orchestrate between many systems, I thought it important to verify that these interactions happened correctly. In that case a black-box test makes sense. For the examples I am going to show later in this post the major complexity was in the numerical calculations of the value of the agreement. Here we chose to execute against elements in the code without a running application because what we cared about was documenting and verifying the workings of these calculations. The most value was in being able to write and execute these in a shorter feedback loop. It did mean we missed some complexity related to persisting the stream of calculations and these needed to be covered by other tests.&lt;/p&gt;
&lt;h2&gt;Waxing lyrical like Goldilocks&lt;/h2&gt;
&lt;p&gt;As mentioned in the introduction we really wanted to make sure that our acceptance tests were understandable by stakeholders and developers alike. We also really wanted these acceptance tests to serve as documentation in the future for how these calculations worked as we discovered in requirements gathering that this knowledge didn&apos;t reside in any one person&apos;s head.&lt;/p&gt;
&lt;p&gt;So scenarios needed to be descriptive enough to really demonstrate how a calculation is done without each scenario being too dense with information. As it turned out this took some refinement.&lt;/p&gt;
&lt;p&gt;As a quick introduction to the domain. In the contract management team we handle agreements with suppliers for an e-commerce company. Based on purchases or sales we might get money off the price of certain products purchased for stock, or sold on the website.
If an agreement is a fixed amount per product sold with a factor of 10, then selling 3 is worth 3 units x 10 EUR = 30 EUR.
Simple right?&lt;/p&gt;
&lt;h3&gt;Too simple&lt;/h3&gt;
&lt;p&gt;The first iteration was optimized for ease of duplication for the developer. A lot of the details of the agreement are hidden. What I particularly dislike about this style is how hard it is to pick out the details that matter. There is some magic around it being &lt;code&gt;agreement1&lt;/code&gt; possibly? See what you think of the first iteration...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-gherkin&quot;&gt;Feature: FixedAmountAgreement

Scenario: Purchase agreement limited to 2 product limitations is finalized (factor is 10, agreement runs for 5 days -&amp;gt; 2 euros per day -&amp;gt; 1 euro per target)
    Given Purchase agreement with id agreement1, starting yesterday and ending 3 days in the future, of type fixed amount, with status approved, with factor 10, and limitations
    | Type    | Name                     | Id   |
    | Product | Samsung Galaxy S8 Zwart  | P1   |
    | Product | Samsung Galaxy S8 Zilver | P2   |
    When the allocation process runs for the Purchase agreement
    Then the total allocated value for each day per product is 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is it easy for you to reason about what that scenario is? It is more about what data is used than what the actual scenario is.&lt;/p&gt;
&lt;h3&gt;Too complex&lt;/h3&gt;
&lt;p&gt;Another trap that is easy to fall into is trying to test too much in a single scenario. This is similar to doing TDD with data driven tests ie. &lt;code&gt;[Theory]&lt;/code&gt; with &lt;code&gt;[InlineData]&lt;/code&gt; when using xUnit in .NET. Here we really loose any meaning in the scenario.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-gherkin&quot;&gt;Feature: SellInAgreement

Scenario Outline: Purchase agreement limited to 2 product limitations is finalized
    Given Purchase agreement with id agreement1, starting yesterday and ending tomorrow, of type &amp;lt;Type&amp;gt;, with status &amp;lt;Status&amp;gt;, with factor 2, and limitations
    | Type    | Name                     | Id   |
    | Product | Samsung Galaxy S8 Zwart  | P1   |
    | Product | Samsung Galaxy S8 Zilver | P2   |
    Given a purchase delivery verified yesterday with products
    | PurchaseDeliveryLineId | ProductId    | Quantity | Price |
    | PD1                    | P1           | 15       | 300   |
    | PD2                    | P2           | 10       | 280   |
    When the allocation process runs for the Purchase agreement
    Then the total allocated value on delivery line 1 is &amp;lt;DeliveryLine1Value&amp;gt;
    And the total allocated value on delivery line 2 is &amp;lt;DeliveryLine2Value&amp;gt;

Examples:
| Status                  | Type                               | DeliveryLine1Value | DeliveryLine2Value |
| approved                | percentage of purchased amount     | 90                 | 56                 |
| invoiced                | percentage of purchased amount     | 90                 | 56                 |
| waiting for credit note | percentage of purchased amount     | 90                 | 56                 |
| pending invoice         | percentage of purchased amount     | 90                 | 56                 |
| pending approval        | percentage of purchased amount     | 0                  | 0                  |
| rejected                | percentage of purchased amount     | 0                  | 0                  |
| deleted                 | percentage of purchased amount     | 0                  | 0                  |
| approved                | fixed amount per product purchased | 30                 | 20                 |
| invoiced                | fixed amount per product purchased | 30                 | 20                 |
| waiting for credit note | fixed amount per product purchased | 30                 | 20                 |
| pending invoice         | fixed amount per product purchased | 30                 | 20                 |
| pending approval        | fixed amount per product purchased | 0                  | 0                  |
| rejected                | fixed amount per product purchased | 0                  | 0                  |
| deleted                 | fixed amount per product purchased | 0                  | 0                  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This one gives me little information on a scenario because it is really many scenarios. This is great for test coverage with a single test. It fails to document the behavior of the system in a way that makes it easy to reason about the characteristics of the system.&lt;/p&gt;
&lt;h3&gt;Just right&lt;/h3&gt;
&lt;p&gt;The problem with both structures so far is they do not represent how a user of the system would reason about calculating the value of the agreement. Let&apos;s step through it and then try write a test with that mental model.&lt;/p&gt;
&lt;p&gt;A user will have an agreement that they want to calculate. At any given time that agreement will apply to some deliveries on products defined in the agreement. When something happens to an agreement it will effect the calculation in a specific way. For example, if the start date of an agreement moves so the agreement runs for longer, then it is likely that more deliveries will fall within the running period of that agreement.&lt;/p&gt;
&lt;p&gt;Ok so with this mental model of how a user would approach calculating the value of an agreement, can we write a test that mimics that...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-gherkin&quot;&gt;Feature: Fixed Amount Sell-in Purchase Agreement

Background:
    Given a fixed amount sell-in Purchase agreement
    | Name      | Value                             |
    | Starting  | 2017-01-05                        |
    | Ending    | 2017-02-25                        |
    | Type      | FixedAmountPerProductPurchased    |
    | Status    | Approved                          |
    | Factor    | 10                                |
    | Product   | P1                                |
    | Product   | P2                                |
    | Product   | P3                                |

 Scenario: Agreement start date is moved backwards so more purchase delivery lines are allocated against
    Given the following purchase delivery lines exist
    | Purchase Delivery Line Id | Product   | Quantity | Price | Verification date |
    | PD1                         | P1      | 3        | 100   | 01-01-2017        |
    | PD2                         | P2      | 6        | 110   | 05-01-2017        |
    | PD3                         | P3      | 10       | 210   | 05-01-2017        |
    And existing allocations for the agreement
    | Purchase Delivery Line Id | Product   | AllocatedValue |
    | PD2                         | P2      | 60             |
    | PD3                         | P3      | 100            |
    When the Purchase agreement start date changes to 2017-01-01
    And allocations are calculated for the Purchase agreement
    Then the following purchase delivery lines are allocated against
    | Purchase Delivery Line Id | Product   | AllocatedValue |
    | PD1                       | P1        | 30             |
    And the total allocated value for the Purchase agreement is 190
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that &lt;em&gt;agreement has some terms that effect the value&lt;/em&gt; of it. These terms &lt;em&gt;mostly wont change across scenarios&lt;/em&gt;. If they do &lt;em&gt;we want to highlight only the changes&lt;/em&gt;. In the setup then we want to &lt;em&gt;show only what matters for the scenario&lt;/em&gt;. We also want to &lt;em&gt;highlight behavior&lt;/em&gt; and the &lt;em&gt;end result&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Breakdown of the recipe&lt;/h4&gt;
&lt;p&gt;So we use &lt;code&gt;Background&lt;/code&gt; to define the status quo across scenarios. It doesn&apos;t mean some of these values won&apos;t change but we only mention what does. This background can then be held constant across multiple scenarios. This allows us to still be explicit about the status of the agreement without needing to be verbose in EVERY scenario about it. It allows the reader to reuse the information across scenarios. It also means we only need to mention CHANGES.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;Scenario&lt;/code&gt; can now be quite explicit about what will change. This allows us to document behavior way more explicitly than the previous tests while still having explicit information available to the reader if needed in the &lt;code&gt;Background&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Given&lt;/code&gt; steps allow us to define setup that is relevant to each &lt;code&gt;Scenario&lt;/code&gt; only.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;When&lt;/code&gt; steps will now typically define the actions that make a &lt;code&gt;Scenario&lt;/code&gt; unique. This could of course be in the &lt;code&gt;Given&lt;/code&gt; setup or a combination of both but typically it is the &lt;code&gt;When&lt;/code&gt; that makes the scenario interesting.&lt;/p&gt;
&lt;p&gt;Finally the &lt;code&gt;Then&lt;/code&gt; steps allow us to define what happened in the system and what the final result is.&lt;/p&gt;
&lt;p&gt;Do you see the focus on the actual scenario here? Did this convey more of what the business actually considers? I think so.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So our first takeaway was that Acceptance tests and BDD in particular are a means of driving and documenting the expected behavior of the system while engaging with stakeholders.&lt;/p&gt;
&lt;p&gt;Then in writing behavior tests we want to focus on capturing scenarios that are meaningful to stakeholders and accurately capture the mental model they have of the system. By structuring the tests in such a way we not only make it easier for our stakeholders to understand but we also make it much more likely that we grow our understanding of the system. Any technique that allows developers to gain insight into the users perspective is worth more than just test coverage. Software development at its core is about learning a problem space. Writing code is the easy part.&lt;/p&gt;
&lt;p&gt;I hope you found this useful. If you have any thoughts on Acceptance testing, BDD, and/or writing good tests, I would love to hear from you in the comments below.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Background image by &lt;a href=&quot;https://unsplash.com/@nepumuk&quot;&gt;Peter Kleinau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@annapostovaya&quot;&gt;Hanna Postova&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/the-torch-bearer/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/the-torch-bearer/"/>
    <title>The torch bearer</title>
    <updated>2018-05-29T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/the-torch-bearer/</uri>
    </author>
    <summary type="html">&lt;p&gt;Software development can be a complicated process as the complexity of systems grow and the number of people involved increases, especially when these things happen quickly. This is when clear direction is important. Equally, if not more important is the experience and maturity of the teams building the software. Their ability to learn and adapt to the challenges that arise from the growing complexity will depend on mindset and the ability to work together. If a whole team can grow to understand the driving forces delivering the right software in the right way, it can be epic. So... STORY TIME!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;A walk in the dark&lt;/h2&gt;
&lt;p&gt;Imagine trying to walk to the top of a densely forested hill in the dark with no path to follow. Even if you know where you should be going, finding your way would be nearly impossible.&lt;/p&gt;
&lt;p&gt;Your goal is simple, get to the top of the hill. Easier said than done. As you stumble around in the dark, trying to head up the hill, you constantly run into obstacles. You trip over roots that you cannot see and have to push your way through brush and trees that seem to have a will of their own to hold you back. Why is there no path up the hill? Has no one gone this way before?&lt;/p&gt;
&lt;p&gt;As you persist you trip and fall, sliding downward, losing elevation in seconds that you worked what seemed like hours to gain.&lt;/p&gt;
&lt;p&gt;Could this be easier? Of course but how?&lt;/p&gt;
&lt;p&gt;What if there was a light at the top of the hill? This would help some. For one we would know for sure if we were heading in the right direction. We would have a feeling for whether we were getting closer and how far we have to go. We could use it to determine how thick the undergrowth is by the amount of light that shines through, helping us decide on a direction of approach.&lt;/p&gt;
&lt;p&gt;Does this light help us in actually walking? In doing the actual work of moving forward? Not really. It is still dark in the forest, there is still no path, and you are still tripping over those damn roots!&lt;/p&gt;
&lt;p&gt;What if a friend appears with a torch? He has been up the hill before and he has a good idea of the best route with the least resistance up the hill. Does this help? Immensely! The going is still slow but you can now see where you are going. You have someone to warn you of roots. You can even see the roots. And you can catch each other when you stumble. You can even carry the torch for a while...&lt;/p&gt;
&lt;h2&gt;So what the heck does this have to do with software development?&lt;/h2&gt;
&lt;p&gt;For those of you who have been on some tough software development projects, the analogue is probably quite obvious.&lt;/p&gt;
&lt;h3&gt;Goal: Get to the top of the hill&lt;/h3&gt;
&lt;p&gt;In business having a clear goal is important but a goal tells you the what you want to achieve, not necessarily how you are going to achieve it. Blindly following the gradient up means you are probably moving toward your goal but it does little in informing how to achieve it.&lt;/p&gt;
&lt;h3&gt;Vision: Follow the light&lt;/h3&gt;
&lt;p&gt;Having a clear vision of how a goal is going to be achieved is important. It sets a light on top of the hill to be followed. Again it does little in terms of the &lt;em&gt;how&lt;/em&gt; but it gives anyone working toward it a clear sense of moving in the right direction.&lt;/p&gt;
&lt;h3&gt;Experience: A friend to help find the way&lt;/h3&gt;
&lt;p&gt;The most innovative goals. The clearest vision. None of these are worth anything if execution fails. From this you may think my analogue is about Team Leads or Architects who tell development teams how to execute. It is not. The torch bearer shows you the way by walking with you. Guiding, teaching, catching, and learning too. If you want to change the software that teams build you need to change the culture of the teams that build the software.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If you remake awful software from scratch without changing the culture that created it: you&amp;#39;ll remake awful software&lt;/p&gt;&amp;mdash; Romeu Moura (@malk_zameth) &lt;a href=&quot;https://twitter.com/malk_zameth/status/654710109214371841?ref_src=twsrc%5Etfw&quot;&gt;October 15, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Goals, visions, speeches, manifestos, and tech radars. These things are all useful. They give a direction. They light a fire on top of a hill. They do not however really help people get to the top of the hill. That is done by building people up. Making sure teams have the skills, the collaborative environment, the mentors and experience available to find the path in the dark.&lt;/p&gt;
&lt;p&gt;Although I like thinking software development is like engineering, mostly it is like a long hike in the wilderness.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes it is boring...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/bored.jpg&quot; alt=&quot;bored me&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sometimes you see amazing things...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/reflection.jpg&quot; alt=&quot;reflecting pond&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sometimes you get lost along the way...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/wilderness.jpg&quot; alt=&quot;view of mountains&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;so its good to have someone with experience...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/old-man-daly.jpg&quot; alt=&quot;view of mountains&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;and its easier if you bring some friends.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/friends.jpg&quot; alt=&quot;view of mountains&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I hope your path is challenging and fun, that you meet good people along the way, and that it is well lit.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Social photo by &lt;a href=&quot;https://unsplash.com/@viniciusamano&quot;&gt;Vinicius Amano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Header photo by &lt;a href=&quot;https://unsplash.com/@worldsbetweenlines&quot;&gt;Patrick Hendry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/malk_zameth&quot;&gt;Romeu Moura&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/first-mob-programming/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/first-mob-programming/"/>
    <title>Mobbing a story</title>
    <updated>2018-05-09T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/first-mob-programming/</uri>
    </author>
    <summary type="html">&lt;p&gt;Mob programming can be a great way of sharing knowledge, building ownership, as well as a way of getting a story done with everyone checking it. Although this can be slower because of everyone having an opinion, I do strongly believe that it results in a higher quality implementation with a greater chance of being functionally correct and bug free. I thought it would be helpful to share our learnings while completing a fairly complex story using mob programming.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Mob programming TL;DR&lt;/h2&gt;
&lt;p&gt;So a short TL;DR of mob programming if you don&apos;t know what mob programming is. Basically it is pair programming on steroids. Multiple developers work on a single problem using a single machine. This works well if there is a large screen or projector. All developers can contribute ideas and concerns while one person drives at the keyboard.
One common concern is over the efficiency of having a whole team working on a single problem. If it is a difficult problem, throwing more brain-power at it is a good idea. It also increases understanding and ownership of the code, which increases productivity of a team. Lastly, it is an opportunity for team members to learn from each other which again increases productivity over the long run.&lt;/p&gt;
&lt;h2&gt;Learnings&lt;/h2&gt;
&lt;p&gt;We would regularly stop and review how things had gone and what might work better. This is important to build into all team based activities. Doing the wrong thing as a single developer is one thing, doing it with more people just multiplies the inefficiency. This bring me to the first learning...&lt;/p&gt;
&lt;h3&gt;Time-box the drive time&lt;/h3&gt;
&lt;p&gt;Set a timer for 25 minutes (or whatever time you think works). Once a timer runs out use the moment to review what has been done in the time. Ask questions like &amp;quot;Are we happy with the current direction?&amp;quot; and &amp;quot;Do we want to continue on this path?&amp;quot;. This breaks you from the flow of developing and engages all those brains involved to evaluate early and often. It also provides a good moment to swap drivers so someone else gets a chance at the keyboard. The previous driver then gets a chance to contribute without multitasking.&lt;/p&gt;
&lt;p&gt;Another thing to check every few sessions is energy levels. If people run out of steam, engagement will drop and the benefits of mob programming dwindle.&lt;/p&gt;
&lt;h3&gt;Park when needed&lt;/h3&gt;
&lt;p&gt;One thing we noticed very early on was that we would often go off on tangents that had very little to do with the story we were implementing. As an example we touched on the &lt;a href=&quot;/maintainable-unit-tests&quot;&gt;style chosen to write the unit tests&lt;/a&gt;. This is a worthwhile discussion to have and it is important that the whole team understands and is on-board. On the other hand if we engaged on every topic, we would never complete the story. We decided that if any topic that was not directly related to the story could not be resolved in a few sentences, it should be parked. We wrote down the topic on a sticky note to discuss later and moved on.&lt;/p&gt;
&lt;h3&gt;Have a roadmap&lt;/h3&gt;
&lt;p&gt;This was a fairly complicated problem in an existing codebase that not everybody was familiar with. At times we would lose track of what the current task was. On reflecting we decided it was useful to have a clear goal of what we were currently trying to achieve. We did this by drawing out the tasks that needed doing, their dependencies, and ticking off what had been done. The blue magnet is the task currently being worked on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/mob-todo.jpg&quot; alt=&quot;mob todo list&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Avoid backseat driving&lt;/h3&gt;
&lt;p&gt;We found it nonconstructive to have everyone shouting instructions at the driver. Instead we would discuss a problem and decide on a direction. The driver would then implement what was decided on with the team helping out as necessary.&lt;/p&gt;
&lt;h3&gt;Be courteous to other drivers&lt;/h3&gt;
&lt;p&gt;Criticizing the developer driving does not lead to a constructive environment to mob program in. Remember at some stage you should drive too.&lt;/p&gt;
&lt;h3&gt;Pit-stop early and often&lt;/h3&gt;
&lt;p&gt;Be sure to commit early and often. Whenever a test passes, a new direction is chosen, a refactor is done. Commit it. We learned the hard way what happens if you do a refactoring and then want to back out of it.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The team did comment on certain parts of the activity being more engaging than others. Some activities like creating types with lots of properties can be quite tedious to watch. Some learnings did come out of this, like what parts of the codebase can be repetitive which might be a code smell of over engineering.&lt;/p&gt;
&lt;p&gt;Mob programming is a great activity for working more as a team and for those who have not pair-programmed before, participating without driving might make them more open to pair programming. It is also awesome for sharing knowledge throughout the team. The benefits will pay for the momentary drop in productivity due to parallelizing work. If you approach it in an agile way with continual feedback you can find ways to make it work for you. Just be sure to be accepting toward one another. Have you tried mob programming? If not, give it a go in your team. You do it regularly?
Please share your experiences!&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Background image by &lt;a href=&quot;https://unsplash.com/@hudsonhintze&quot;&gt;Hudson Hintze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@timmarshall&quot;&gt;Tim Marshall&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/simple-trick-to-be-a-better-leader/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/simple-trick-to-be-a-better-leader/"/>
    <title>This one trick will make you a better leader</title>
    <updated>2018-05-04T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/simple-trick-to-be-a-better-leader/</uri>
    </author>
    <summary type="html">&lt;p&gt;If you are a leader, many things are expected from you. Skill. Vision. Charisma. There are other characteristics that don&apos;t always come to mind when thinking of leadership. Loyalty inspires loyalty. Calmness under pressure. Trust inspires trust. Many of the characteristics are quite hard to quantify and difficult to learn. Some people just seem to be born with them and others grow into it, being shaped by their experiences.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;Full disclosure. If you have gotten to this point. The title was click bait. There is no simple trick. Sorry!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I wanted to write about &lt;strong&gt;compassion&lt;/strong&gt;. I will make a case for why it is important for leaders and point you toward how you can cultivate it.&lt;/p&gt;
&lt;h2&gt;Compassion: The missing skill&lt;/h2&gt;
&lt;p&gt;Skill you may ask? It may sound weird to describe compassion as a skill. Call it what you will but it can be learned, and it must be used skillfully. That sounds like a skill doesn&apos;t it?&lt;/p&gt;
&lt;p&gt;How can developing such a touchy-feely thing as compassion help you be a better leader? Let me list the ways developing compassion has helped me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am calmer when difficult situations arise with colleagues&lt;/li&gt;
&lt;li&gt;Colleagues are more open to my feedback and arguments&lt;/li&gt;
&lt;li&gt;People are more trusting of me&lt;/li&gt;
&lt;li&gt;Difficult situations that previously were awkward are no longer because of a genuine concern for the others well-being&lt;/li&gt;
&lt;li&gt;I derive more joy out of working with people I have more compassion for&lt;/li&gt;
&lt;li&gt;Compassion often compels me to help others&lt;/li&gt;
&lt;li&gt;Compassion gives me a desire to invest in others growth and well-being&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking at that list it may not be immediately evident how these make you a better leader. Well it depends on what type of leader you are wanting to be but I can attest that as I have cultivated compassion loyalty, calmness, and trust have developed in me. As these things have grown in me, so has the measure that others have shown those qualities back toward me.&lt;/p&gt;
&lt;h2&gt;Skillful compassion&lt;/h2&gt;
&lt;p&gt;I wanted to draw attention to using the skill skillfully. Compassion does not mean empathy. For me compassion means that I care for a person&apos;s well-being and am motivated to increase or protect that well-being. Empathy on the other hand is feeling the emotions that another is feeling. As a leader, feeling the emotions of everyone you lead would be extremely draining.&lt;/p&gt;
&lt;p&gt;It seems to me that equanimity is important when in a situation where compassion is in play. You may be in a situation where you have to do something that is going to hurt the other person. Empathy would motivate you to not want to hurt the person because you would feel that pain as well. Compassion on the other hand motivates you to do it in a way that protects the person and lends emotional support but is still responsible.&lt;/p&gt;
&lt;h2&gt;Cultivating compassion&lt;/h2&gt;
&lt;p&gt;You may think that compassion is not something that can be learned but a few years ago I discovered it was. In Buddhist tradition there is a technique called &lt;em&gt;Loving kindness&lt;/em&gt;. It is a meditation exercise but you do not need to be a practicing meditator to practice it. In fact religions around the world has been practicing it for millennia. In many religions it is common to pray for the goodwill of those around you, especially your loved ones. If you are religious this act will probably seem quite familiar. The difference being in how it really becomes a practice rather than something inserted in a prayer.&lt;/p&gt;
&lt;p&gt;I am sure there are many variations on how to practice this but this is how I do it. Don&apos;t be afraid to experiment with what works for you.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To get started &lt;em&gt;find a quiet place to sit&lt;/em&gt; where you will not be interrupted.&lt;/li&gt;
&lt;li&gt;Visualize the most cherished person in your life. This could be a partner, a child, or maybe a parent.&lt;/li&gt;
&lt;li&gt;In your mind say their name followed by &amp;quot;... I wish you peace, happiness, and freedom from suffering&amp;quot;.&lt;/li&gt;
&lt;li&gt;While doing the previous step try direct feelings of love and goodwill toward the person&lt;/li&gt;
&lt;li&gt;Move on to your next most cherished person and repeat the steps. Saying the phrase and projecting those feelings.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will go from family, to friends, then colleagues, and acquaintances, until you are vaguely just visualizing a specter of a stranger and directing those feelings toward your fellow humanity. Doing this daily for just a few minutes a day will start to cultivate a sense of compassion for everyone you come across. Not only will this build relationships with colleagues at work but it will also enrich your personal life.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope I have convinced you that compassion is both an important aspect of leadership and something that can be improved.&lt;/p&gt;
&lt;p&gt;One disclaimer: I am not sure what the results of this are without a corresponding practice in mindfulness. I mentioned exercising equanimity in difficult situations and mindfulness meditation is how I cultivate that equanimity.&lt;/p&gt;
&lt;p&gt;One last thing. Despite the title of this post, this is not a cheap trick to apply. It will take time and discipline to cultivate. The effects will be gradual and only be noticeable when you look back months or years on how you viewed the people around you.&lt;/p&gt;
&lt;p&gt;I really hope you will give this a chance. Over time the benefits can be great and meaningful.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/employees-are-like-cars-not-petrol/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/employees-are-like-cars-not-petrol/"/>
    <title>Employees are like cars not petrol</title>
    <updated>2018-05-03T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/employees-are-like-cars-not-petrol/</uri>
    </author>
    <summary type="html">&lt;p&gt;You may have had the experience before that the company you work for sees you as a resource. A number on a spreadsheet. Did you feel motivated to work there? Did you stay there for a long time? Did you feel loyalty? Probably not...&lt;/p&gt;
&lt;p&gt;I want to float a really bad analogue but hopefully it will make my point. Petrol (or diesel/electricity) is a resource, employees are more like cars.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;The Analogue&lt;/h2&gt;
&lt;p&gt;Imagine when you start a new job you are like a car they drive for work. The company hires you with the tank full. This is usually true in my experience as you are excited for the new opportunity and eager to do your best. One more analogue with the car. Job satisfaction (emotional reward, compensation, etc.) determines the mileage of the car.&lt;/p&gt;
&lt;p&gt;As you work you slowly use up the petrol in the tank. What are you burning? New things to learn, new people to meet, energy on things that don&apos;t engage, belief in direction, etc. Name the things that make a job emotionally rewarding.&lt;/p&gt;
&lt;h2&gt;Driver: The broke student&lt;/h2&gt;
&lt;p&gt;Were you ever a broke student with a car that was likely to break down if it didn&apos;t run out of petrol first? I was. I would fill up the tank with just enough petrol to get me to my next destination.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/student-tank.jpg&quot; alt=&quot;Student tank trajectory&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this model moments come along that refill the tank a little but they are blips in the downward trend. The consumption of the resource is still greater than the sum of the top-ups. Completion of big projects, moves to a new challenge, and promotions, all add some fuel but the problem is these are not sustainable as big refuels that come along. There are so many projects, moves, and promotions available and what if there are just a few failures? These could easily wipe out any gains.&lt;/p&gt;
&lt;h2&gt;Driver: The responsible car owner&lt;/h2&gt;
&lt;p&gt;My dad takes care of his cars. My brother takes care of his cars. I don&apos;t own a car anymore as here in The Netherlands I don&apos;t find it necessary. When I got my first car though my dad used to tell me to fill it up often so that the fuel tank would not rust. Easier said than done as a poor student but the lesson stuck at least.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/adult-tank.jpg&quot; alt=&quot;Adult tank trajectory&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The lesson here, and the whole point of this flaky analogue is that if you want to keep employees, they need to be topped up daily. Coming to work needs to be what tops off the fuel tank. There needs to be creative freedom. The people need to be smart and fun. The environment needs to foster learning and growth. The problems need to be challenging but solvable.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;People apparently quit managers not companies. While I think this is true I don&apos;t think it is always personal. The bottom line is management (from CEO down) is custodian of the environment and culture. Although everyone is responsible to a certain extent, it is management&apos;s job to ensure it is heading in the right direction and to step in and take action if it is not.&lt;/p&gt;
&lt;p&gt;DON&apos;T let frustration linger with no solution
DO empower people to solve their own problems&lt;/p&gt;
&lt;p&gt;DON&apos;T think of employees as resources that just churn out value with no input
DO set aside time and encourage learning and personal growth&lt;/p&gt;
&lt;p&gt;DON&apos;T tell people how to do their job
DO give a vision for what the business wants to achieve strategically&lt;/p&gt;
&lt;p&gt;Perks, events, money. These are not what keep people happy. If people are complaining about these things then chances are the culture is so bad that that is the only thing your employees have to hold on to. They are symptoms and make sure you are ignoring them only if you are addressing their more pressing cultural and environmental issues.&lt;/p&gt;
&lt;p&gt;At the same time, find out what employees value already. It is usually easier to do more of something beneficial than stop the things that kill a healthy culture. It doesn&apos;t mean the bad doesn&apos;t need to be addressed but it will make the culture more robust and build trust.&lt;/p&gt;
&lt;p&gt;Do you have your own DOs or DON&apos;Ts for building or tearing down company culture? I would love to hear them.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@alexread&quot;&gt;Alex Reed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Header by &lt;a href=&quot;https://unsplash.com/@igorovsyannykov&quot;&gt;Igor Ovsyannykov&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/leader-archetypes/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/leader-archetypes/"/>
    <title>Leader Archetypes</title>
    <updated>2018-04-26T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/leader-archetypes/</uri>
    </author>
    <summary type="html">&lt;p&gt;Why do we follow people? Why only some people? Character, situation, and value-alignment seem to jump out as obvious factors but what configuration of these allows us to suspend our own self-absorption to work toward a common goal? Are there archetypes that represent what leaders do to get people to follow them?&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Leadership is by no means something I have devoted a lot of time to compared to more technical learnings. Even when I have read up on leadership it has been either very specific to development teams or in a general life sense like &amp;quot;Seven Habits of Highly Effective People&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So take the following with a pinch of salt. They are observations from Life not Leadership.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are three archetypes of leaders I have formulated for myself. This is based purely on introspection and observation of peers so I am sure someone more knowledgeable in leadership could point out all the depth of knowledge that I have missed.&lt;/p&gt;
&lt;h2&gt;Napoleon&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2018/napoleon-bonaparte-400.jpg&quot; alt=&quot;Napoleon Bonaparte&quot; class=&quot;img-rounded pull-left&quot; width=&quot;300&quot; style=&quot;margin-right: 1em;&quot;&gt; Skilled. Napoleon Bonaparte was a skilled military leader. It is what brought him up to the opportunity to be emperor and it is what makes him memorable. People believed in him because he had repeatedly shown his ability to win wars. He used his skill to conquer most of Europe.&lt;/p&gt;
&lt;p&gt;It seems people will follow if you have shown demonstrable skill in a field that they care about. Said skill provides authority in the field of expertise but that authority does seem to bleed out into other areas. This is not entirely illogical as competence in one area means at least the capacity for competence in other areas. As humans we do over estimate that competence, which is known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Authority_bias&quot;&gt;Authority bias&lt;/a&gt;. The quintessential example here is weighting the opinion of a doctor more than someone else on a field that is not medicine.&lt;/p&gt;
&lt;p&gt;In tech this is a known issue with competence in software development often leading to more management type roles. Regardless of how equipped the individual is to lead people, their competence as a developer will influence how willing people are to follow their lead.&lt;/p&gt;
&lt;h2&gt;Robin Hood&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2018/robin-hood-400.jpg&quot; alt=&quot;Robin Hood&quot; class=&quot;img-rounded pull-right&quot; width=&quot;300&quot; style=&quot;margin-left: 1em;&quot;&gt;Protect. In legend Robin Hood fought injustice for the people. As a leadership style this can be effective in growing influence. In the legend Robin fought for the people but the people also loved and protected him.&lt;/p&gt;
&lt;p&gt;As a leader if you are seen as serving your team by fighting for their happiness, freedom to operate independently, and freedom from hardships, you will earn respect. That influence in turn can be used to resolve conflicts, multiply productivity, and lead in directions you see as beneficial.&lt;/p&gt;
&lt;p&gt;There are of course consequences of taking this style too far. As a leader it will often put you at odds with others in an organization, including your boss if you have one. It can lead to &lt;a href=&quot;https://en.wikipedia.org/wiki/In-group_favoritism&quot;&gt;In-group favoritism&lt;/a&gt; within the team. Related to this it can have a tribal effect where the team is seen as an outsider (outlaws if you wish), this is exacerbated by the In-group favoritism. Finally, if done very poorly it could result in coddling of the team. This is easy enough to mitigate by favouring teaching members of the team to do things themselves rather than doing it for them.&lt;/p&gt;
&lt;h2&gt;Martin Luther King Jr&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2018/martin-luther-king-jr-400.jpg&quot; alt=&quot;Martin Luther King Jr&quot; class=&quot;img-rounded pull-left&quot; width=&quot;300&quot; style=&quot;margin-right: 1em;&quot;&gt; Inspire. Martin Luther King Jr inspired people to mobilize for a cause. He was charismatic. He had a vision of what he wanted. He used that charisma to mobilize people into action. He inspired people to believe vision could become reality.&lt;/p&gt;
&lt;p&gt;There are many charismatic leaders to pick from but Martin was my first choice because it wasn&apos;t just about speaking in a way that inspired others. His vision was shared by those that had to live with the inequality and those who saw the inequality and wanted it to change. His message and methods were moral (non-violent protest). And then of course his speeches were inspiring. Inspiration is more than just charisma. It is about a vision that is clear and shared by others. Martin didn&apos;t use his charisma to convince people of his vision. It was their vision too and he inspired them to make it a reality.&lt;/p&gt;
&lt;p&gt;In tech charisma is a rare thing but Martin didn&apos;t just give speeches. He gave speeches at protests he had helped organize. He created an environment where people could come together to work toward their shared vision. Is charisma really the most important element in making meaningful change then?&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;One final point. I don&apos;t think fitting into just one of these archetypes would make an effective leader. These are just archetypes I have noticed over the years that when in play cause people to follow. An effective leader would probably fit into one of these but have strong elements of the others. That mix is what allows counteracting the ill effects of some styles.
And one final time: This is not my area of expertise...but I have run these archetypes past a few people and they seem to find it useful. Probably because they think me a competent software developer ;)&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social image &lt;a href=&quot;https://unsplash.com/@jwimmerli&quot;&gt;Jean Wimmerlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Napoleon and MLK Jr photo from &lt;a href=&quot;https://pixabay.com/&quot;&gt;Pixabay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bow and Arrow photo by &lt;a href=&quot;https://unsplash.com/@zoltantasi&quot;&gt;Zoltan Tasi&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/maintainable-unit-tests/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/maintainable-unit-tests/"/>
    <title>3 tips for more maintainable unit tests</title>
    <updated>2018-04-07T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/maintainable-unit-tests/</uri>
    </author>
    <summary type="html">&lt;p&gt;Although having a good collection of unit tests makes you feel safe and free to refactor, a bad collection of tests can make you scared to refactor. How so? A single change to application code can cause a cascade of failing tests. Here are some tips for avoiding (or fighting back) from that situation.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;Important! This post contains example code. Don&apos;t copy/paste into production code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 1: Test behavior not structure&lt;/h2&gt;
&lt;p&gt;The behavior of the system is what the business cares about and it is what you should care about as well from a verification point of view. If requirements change drastically then changes to the system are expected, including the tests. The promise of good unit test coverage is that you can refactor with confidence that your tests will catch any regressions in behavior. However if you are testing the structure of your application rather than the behavior, refactoring will be difficult since you want to change the structure of your code but your tests are asserting that structure! Worse, your test suite might not even test the behavior but you have confidence in them because of the sheer volume of structural tests.&lt;/p&gt;
&lt;p&gt;If you test the behavior of the system from the outside you are free to change implementation and your tests remain valid. I am not necessarily talking about integration style tests but actual unit tests whose entry point is a natural boundary. At work we have use-case classes that form this natural entry-point into any functionality.&lt;/p&gt;
&lt;p&gt;So let&apos;s look at an example of structural testing, and see the what happens when we try make a change to the implementation details. As an example we have a test against a &lt;code&gt;CreatePerson&lt;/code&gt; use-case that creates a &lt;code&gt;Person&lt;/code&gt; class and persists it if it is a valid person object. The initial design takes in an &lt;code&gt;IValidator&lt;/code&gt; to determine whether the person is valid.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// tests
// test for invalid name omitted...

[Fact]
public void CreatingPerson_WithValidPerson_CallsIsValid()
{
    var name = &amp;quot;Bob&amp;quot;;
    var people = Substitute.For&amp;lt;IPersonRepository&amp;gt;();
    var validator = Substitute.For&amp;lt;IPersonValidator&amp;gt;();
    var createPerson = new CreatePerson(people, validator);

    createPerson.With(name);

    validator.ReceivedWithAnyArgs(1).IsValid(Arg.Any&amp;lt;Person&amp;gt;());
}

// anemic domain entity
public class Person
{
    public Person(Guid id, string name)
    {
        Id = id;
        Name = name;
    }

    public Guid Id { get; set; }
    public string Name { get; set; }
}

// use-case
public class CreatePerson
{
    private readonly IPersonRepository personRepository;
    private readonly IPersonValidator personValidator;

    public CreatePerson(IPersonRepository personRepository, IPersonValidator personValidator)
    {
        this.personRepository = personRepository;
        this.personValidator = personValidator;
    }

    public void With(string name)
    {
        var person = new Person(Guid.NewGuid(), name);
        if (personValidator.IsValid(person))
        {
            personRepository.Create(person);
        }
        else
        {
            throw new ArgumentException(nameof(name));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how we are asserting against a dependency (&lt;code&gt;IValidator&lt;/code&gt;) of the use-case (&lt;code&gt;CreatePerson&lt;/code&gt;). Our test has structural knowledge of how &lt;code&gt;CreatePerson&lt;/code&gt; is implemented. Let&apos;s see what happens when we want to refactor this code...&lt;/p&gt;
&lt;p&gt;Your team has been trying to bring in some new practices like Domain-Driven Design. The team discussed it and the &lt;code&gt;Person&lt;/code&gt; class represents an easy start learning. You have been tasked with pulling behavior into the the &lt;code&gt;Person&lt;/code&gt; entity and make it less anemic.&lt;/p&gt;
&lt;p&gt;As a first try you move the validation logic into the &lt;code&gt;Person&lt;/code&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class Person
{
    public Person(Guid id, string name)
    {
        Id = id;
        Name = name;
    }

    public bool IsValid()
    {
        if (Id == Guid.Empty) return false;
        if (string.IsNullOrEmpty(Name)) return false;
        return true;
    }

    public Guid Id { get; }
    public string Name { get; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the use-case, we no longer need to inject &lt;code&gt;IValidator&lt;/code&gt;. Not only is what we test going to have to change, we are going to have to change the test completely because we no longer have a validator to inject as a mock. We have seen the first signs of our tests being fragile.&lt;/p&gt;
&lt;p&gt;Let&apos;s try make our test focus on the behavior we expect instead of relying on the structure of our code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// test for invalid name omitted...
[Fact]
public void CreatePerson_WithValidName_PersistsPerson()
{
    var name = &amp;quot;Bob&amp;quot;;
    InMemoryPersonRepository people = Given.People;
    var createPerson = new CreatePerson(people);

    createPerson.With(name);

    Assert.Equal(name, people.All().First().Name);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&apos;t worry too much about &lt;code&gt;InMemoryPersonRepository people = Given.People;&lt;/code&gt; for now, we will come back to it. All you need to know is that &lt;code&gt;InMemoryPersonRepository&lt;/code&gt; implements &lt;code&gt;IPersonRepository&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we no longer need &lt;code&gt;IValidator&lt;/code&gt; and it&apos;s implementation, we delete those. We also get to delete the test &lt;code&gt;CreatingPerson_WithValidPerson_CallsIsValid&lt;/code&gt; as we have a better test now &lt;code&gt;CreatePerson_WithValidName_PersistsPerson&lt;/code&gt; that asserts the behavior we care about, the use-case creating and persisting a new person. Yay, less test code, better coverage!&lt;/p&gt;
&lt;p&gt;At this point you might be saying &amp;quot;Wait! Unit tests are supposed to test one method, on one class&amp;quot;. No! A unit is whatever you need it to be. I am by no means saying write no tests for your small implementation details, just make sure you are comfortable deleting them if things change. With our focus on behavior tests we can delete those detailed tests freely and still be covered. In-fact, I often just delete the tests after I am done developing the component as I just used TDD for fast feedback loop on the design and implementation. Remember that test code is still code that needs maintenance so the more coverage for less the better.&lt;/p&gt;
&lt;p&gt;So back to the code. What does our use-case look like now?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class CreatePerson
{
    private readonly IPersonRepository personRepository;
    public CreatePerson(IPersonRepository personRepository)
    {
        this.personRepository = personRepository;
    }

    public void With(string name)
    {
        var person = new Person(Guid.NewGuid(), name);
        if (person.IsValid())
        {
            personRepository.Create(person);
        }
        else
        {
            throw new ArgumentException(nameof(name));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats ok. We got rid of a dependency and moved some logic to our &lt;code&gt;Person&lt;/code&gt; entity but we can do better. On reviewing your pull request someone in the team pointed out something important. You should be aiming to make unrepresentable states unrepresentable. The business doesn&apos;t allow saving a person without a name so let&apos;s make it so that we can&apos;t create an invalid &lt;code&gt;Person&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// person entity
public class Person
{
    public Person(Guid id, string name)
    {
        if (id == Guid.Empty) throw new ArgumentException(nameof(id));
        if (string.IsNullOrEmpty(name)) throw new ArgumentException(nameof(name));

        Id = id;
        Name = name;
    }

    public Guid Id { get; }
    public string Name { get; }
}
// use-case
public class CreatePerson
{
    private readonly IPersonRepository personRepository;
    public CreatePerson(IPersonRepository personRepository)
    {
        this.personRepository = personRepository;
    }

    public void With(string name)
    {
        var person = new Person(Guid.NewGuid(), name);
        personRepository.Create(person);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look at that! We refactored the implementation without having to update our test. It still passes without any changes.&lt;/p&gt;
&lt;p&gt;This was a contrived example to illustrate the point but I hope this tip helps you write more maintainable tests.&lt;/p&gt;
&lt;h2&gt;Tips 2: Use in-memory dependencies&lt;/h2&gt;
&lt;p&gt;You have already seen &lt;code&gt;InMemoryPersonRepository&lt;/code&gt; so this tip should be less verbose to explain. The claim is simply that the maintainability of your tests can be increased by using in-memory versions of your dependencies a little more and using mocking frameworks a little less.&lt;/p&gt;
&lt;p&gt;I find in-memory versions of something like a repository that speaks to a database preferable to mocking frameworks for a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They tend to be easier to update than a mocking framework, especially if creation of the mocks is done in every test or fixture&lt;/li&gt;
&lt;li&gt;Coupled with some tooling (see next tip) they lead to far easier setup and readability&lt;/li&gt;
&lt;li&gt;They are simple to understand&lt;/li&gt;
&lt;li&gt;Great debugging tool&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the down side, they do take a little time to create.&lt;/p&gt;
&lt;p&gt;Let&apos;s take a quick look at what the one looks like for our code so far:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class InMemoryPersonRepository : IPersonRepository
{
    private IDictionary&amp;lt;Guid, Person&amp;gt; data;

    public InMemoryPersonRepository(IDictionary&amp;lt;Guid, Person&amp;gt; data)
    {
        this.data = data;
    }

    public IReadOnlyCollection&amp;lt;Person&amp;gt; All()
    {
        return new List&amp;lt;Person&amp;gt;(data.Values);
    }

    public void Create(Person person)
    {
        data.Add(person.Id, person);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Super simple! Put in the work and give it a try, it may not be as sexy as a mocking framework but it really will help make your test suite more manageable.&lt;/p&gt;
&lt;h2&gt;Tip 3: Build up test tooling&lt;/h2&gt;
&lt;p&gt;Test tooling in this context means utility classes to make readability and maintainability of the tests easier. A big part of this is about making your tests clear about the setup while still keeping it concise.&lt;/p&gt;
&lt;p&gt;Let&apos;s discuss a few helpers you should have in any project...&lt;/p&gt;
&lt;h3&gt;In-memory dependencies&lt;/h3&gt;
&lt;p&gt;This was already discussed above. I can&apos;t stress enough how much this improves maintenance and simplifies reasoning about tests.&lt;/p&gt;
&lt;h3&gt;Builders&lt;/h3&gt;
&lt;p&gt;Builders can be used as an easy way to setup test data. They are a great way of simultaneously avoiding dozens of different setup methods for your tests and a way to make it clear what the actual setup of your test is without diving into some setup method that looks like all the other setup methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class InMemoryPersonRepositoryBuilder
{
    IDictionary&amp;lt;Guid, Person&amp;gt; data = new Dictionary&amp;lt;Guid, Person&amp;gt;();
    
    public InMemoryPersonRepositoryBuilder With(params PersonBuilder[] people)
    {
        foreach (Person p in people)
        {
            data.Add(p.Id, p);
        }
        return this;
    }

    public InMemoryPersonRepository Build()
    {
        return new InMemoryPersonRepository(data);
    }

    public static implicit operator InMemoryPersonRepository(InMemoryPersonRepositoryBuilder builder)
        =&amp;gt; builder.Build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A little trick is to put an &lt;code&gt;implicit&lt;/code&gt; conversion to the class you are building up. Also take a look at &lt;a href=&quot;https://github.com/nrjohnstone/Fluency&quot;&gt;Fluency&lt;/a&gt; for helping with the creation of builders.&lt;/p&gt;
&lt;p&gt;A final note on this point. Just because I use builders a lot does not mean I completely throw mocking frameworks out the window. I just tend to use mocking frameworks for things I really don&apos;t care about and really aren&apos;t likely to change. I also tend to use them within other builders rather than directly in tests. This gives way more control over the grammar that you use to setup your tests.&lt;/p&gt;
&lt;h3&gt;Accessors&lt;/h3&gt;
&lt;p&gt;Not sure what else to call these but it is useful to have a static class that makes access to builders and other types you would use in setup simple. Typically I have &lt;code&gt;Given&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;/// &amp;lt;summary&amp;gt;
/// Handles creation of instances useful to testing like entites, value objects, settings, etc.
/// &amp;lt;/summary&amp;gt;
public static class A
{
    public static PersonBuilder Person =&amp;gt; new PersonBuilder();
}

/// &amp;lt;summary&amp;gt;
/// Handles the creation of builders that build external services for testing
/// &amp;lt;/summary&amp;gt;
public static class Given
{
    public static InMemoryPersonRepositoryBuilder People =&amp;gt; new InMemoryPersonRepositoryBuilder();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows me to write some very concise setup code. For example if I needed to populate my person repository with 3 random people I could do so like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;InMemoryPersonRepository people = Given.People.With(A.Person, A.Person, A.Person);
// if i wanted another with a specific name
people.Create(A.Person.With(name: &amp;quot;Bob&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For completeness the &lt;code&gt;PersonBuilder&lt;/code&gt; implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class PersonBuilder
{
    private Guid id;
    private string name;

    public PersonBuilder()
    {
        id = Guid.NewGuid();
        name = $&amp;quot;name {Guid.NewGuid()}&amp;quot;;
    }

    public PersonBuilder With(Guid id)
    {
        this.id = id;
        return this;
    }

    public PersonBuilder With(string name)
    {
        this.name = name;
        return this;
    }

    public Person Build()
    {
        return new Person(id, name);
    }

    public static implicit operator Person(PersonBuilder builder) =&amp;gt; builder.Build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;So those are my 3 tips for making your tests more maintainable. I encourage you to give them a try. Without investing in the maintainability of your tests they can quickly become a burden rather than a boon. I have seen the practices above improve things not only in my teams but other colleagues have converged on similar learnings with the same positive results. Let me know if you find this helpful, or even if there are any points you strongly disagree with. I would love to discuss in the comments. Happy coding!&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/managing-code-complexity/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/managing-code-complexity/"/>
    <title>Managing Code Complexity</title>
    <updated>2018-04-06T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/managing-code-complexity/</uri>
    </author>
    <summary type="html">&lt;p&gt;When we write code it is often easy to get caught up in the implementation details. Communicating intent is imperative to making code understandable, and keeping code understandable is important for handling complexity.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Even if you don&apos;t practice DDD (or the problem space does not warrant it) and functional programming there are a few lessons to be learned from these disciplines that can be brought into any codebase.&lt;/p&gt;
&lt;h2&gt;Tip 1: Describe the workflow at your entry point&lt;/h2&gt;
&lt;p&gt;We have all heard the phrase &amp;quot;code is read many more times than it is written&amp;quot;. What else is read a lot more than it is written? A book. Code is information dense and in any information dense book we have a Table of Contents.
In your entry point to executing some use-case against your system it is important that there is a high-level workflow that gives an overview of the the complete use-case. This gives a developer reading from the entry point a &amp;quot;Table of Contents&amp;quot; to drill down into whatever step they need to.&lt;/p&gt;
&lt;p&gt;In this context a workflow is the steps needed to do the work of the use-case. This entry point could be a controller or a program main. A pattern we use at work is to create a use-case specific class with a &lt;code&gt;Do()&lt;/code&gt; or &lt;code&gt;Execute()&lt;/code&gt; method on it. Play around with the naming though. I like the class to describe the use-case while the method that causes execution to say something about the command coming in as a parameter eg. &lt;code&gt;new CalculateSomething().For(command.SomeNumber)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/use-case.jpg&quot; alt=&quot;use-case&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An easily understood use-case makes a great entry point for exploring a codebase&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inside the method on your use-case you should strive to lay out the code in the steps needed to complete that use-case. Try keep these steps at the same high-level of abstraction but not too high-level. What do I mean by too high? Be sure to describe actual meaningful steps that avoid steps that doing multiple things and all you can describe them is as &lt;code&gt;ProcessX&lt;/code&gt;. If you find yourself naming a step like that it is probably worth breaking that step into smaller more meaningful steps within the use-case.&lt;/p&gt;
&lt;p&gt;What you really want to avoid here is scattering the steps needed to complete a use-case throughout an object hierarchy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/logic-stack.jpg&quot; alt=&quot;scattered logic&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sprinkling important application logic throughout a hierarchy makes it difficult to reason about&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By spreading the workflow through the hierarchy it is really difficult to see at a glance what the workflow does and then drill down from there into how. It also makes it difficult to compose in new functionality. If it is within the hierarchy you will often find yourself putting code for new features in weird places because that is where the data is available in the call chain.&lt;/p&gt;
&lt;h2&gt;Tip 2: Prefer a longer workflow to a deep dependency chain&lt;/h2&gt;
&lt;p&gt;This one builds on the previous tip but where the previous tip focused on describing a workflow at the entry point, this one is more about cognitive load. Each step allows you to step into it and see the details. Each of these steps might itself have a few dependencies as well as mini-workflows captured in each of those dependencies. This is just a rule-of-thumb but if the depth of a single steps dependency hierarchy exceeds the width of the steps in a workflow, at least ask the question of whether that should maybe be 2 steps.&lt;/p&gt;
&lt;p&gt;Why is this important? You do not want to have to dive very deep to understand what happens in a single step. Remember that the entry point gives a complete overview of all high-level steps. If a hierarchy is too deep if might become hard to reason about. This is of course just a rule-of-thumb and any single step could of course warrant a deep hierarchy to implement it well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/etl-workflow.jpg&quot; alt=&quot;scattered logic&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a rule-of-thumb; keep your workflow longer than it is deep&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 3: Make your external dependencies visible&lt;/h2&gt;
&lt;p&gt;External dependencies like databases, files, and/or webservices make things difficult to reason about if they are nested deep in the dependency hierarchy where it is often unclear that they are being called. Not only that but it forces excessive use of abstractions purely for testing, which causes test induced damage to the code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/deeply-nested-dep.jpg&quot; alt=&quot;deeply nested external dependencies&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deeply nested external dependencies make code more difficult to reason about and test&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By making your external dependencies part of the high-level workflow you communicate the dependencies clearly. This makes it clear what is required for the system as a whole but also what data is needed to complete the use-case. This might mean thinking a little differently about the problem. Instead of querying for something the moment you need it, you might try fetch it at the start. You might say that seems wasteful as some validation might fail. That argument could be turned around though and it could be argued that there is no point in validating input if the external dependencies needed to complete a use-case are not available.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/highlight-dependencies.jpg&quot; alt=&quot;highlight dependencies&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make your external dependency calls clear in your high-level workflow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 4: Push your external dependencies to the boundary&lt;/h2&gt;
&lt;p&gt;Obviously every use-case is different but if at all possible push your external dependencies to the beginning and the end of your workflow. This is taking a page out of functional programming where purity matters. What is meant by purity? Basically we strive to have all functions results be determined only by the value of the arguments passed in. This makes functions easy to reason about as well as easy to test.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/dependencies-on-boundary.jpg&quot; alt=&quot;dependencies on the boundary&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Calls to databases, files, and webservices should be pushed to the boundary of the workflow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I highly recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=cxs7oLGrxQ4&quot;&gt;From Dependency injection to dependency rejection by Mark Seemann&lt;/a&gt; to see a detailed discussion on the topic.&lt;/p&gt;
&lt;h2&gt;Tip 5: Bring business concepts up, push technical implementations down&lt;/h2&gt;
&lt;p&gt;Keep checking that you have important code that shows the details of business logic as close to the root of the object hierarchy as possible. The business logic is what developers should see first, while the implementation details are deep or at least on the boundary of the workflow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/business-concepts-up.jpg&quot; alt=&quot;business concepts up implementation detail down&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Favour business concepts further up the dependency hierarchy and implementation details lower down&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 6: Use abstraction judiciously&lt;/h2&gt;
&lt;p&gt;Abstractions are something you want at the seams of your application modules/components. Obviously you can use them elsewhere, certain design patterns call for them. The important thing is to use them where needed and not by default.&lt;/p&gt;
&lt;p&gt;From a clean architecture point of view you would use them to implement Ports and Adapters as a nice way of keeping your domain logic clean of implementation details. Abstractions are part of your domain, implementations are specific and live in specific infrastructure dedicated to that implementation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/abstractions.jpg&quot; alt=&quot;abstractions&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Place abstractions at the seams&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 7: Use honest rather than simple types&lt;/h2&gt;
&lt;p&gt;Create types to represent things like entity identity. &lt;a href=&quot;http://devonburriss.me/honest-arguments/&quot;&gt;There is a whole series on this&lt;/a&gt; but if you do nothing else don&apos;t let your codebase be littered with &lt;code&gt;Guid&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; or whatever else you use as entity identity or reference. When your code relies on &lt;code&gt;invoiceId&lt;/code&gt; and &lt;code&gt;invoiceLineId&lt;/code&gt; and etc. it becomes too easy to swap 2 integers. Not only does it help prevent silly bugs but using types a little more liberally can really help convey intent. Finally, it makes finding all references where a type is used simple.&lt;/p&gt;
&lt;h2&gt;And we are done&lt;/h2&gt;
&lt;p&gt;I hope you find some of these tips useful. If you did, I would love to hear about it. If you have questions, feel free to leave a comment. If you think I am 100% wrong, I would love to hear your reasons. Above all, let&apos;s keep learning together and happy coding!&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/why-i-got-hooked-on-fsharp/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/why-i-got-hooked-on-fsharp/"/>
    <title>Why I got hooked on F#</title>
    <updated>2017-12-28T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/why-i-got-hooked-on-fsharp/</uri>
    </author>
    <summary type="html">&lt;p&gt;I have been asked a few times &amp;quot;how I got started with F#?&amp;quot; as more than a few people have found it difficult. I myself had a few false starts with it. It looked weird, I didn&apos;t know where or how to start, it was too different to OO with C style languages, and the tooling just was not as slick. I honestly think a better question is &amp;quot;Why did I start using F#?&amp;quot;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;The WHY of it&lt;/h2&gt;
&lt;p&gt;As I have matured as a developer I have come to appreciate coding practices that constrain my options in a way that minimizes potential errors. An infinitely flexible design is also one the allows all possible errors, known and unknown. Constraining future developers to &amp;quot;make illegal states unrepresentable&amp;quot; cannot be overstated as a design goal. I sometimes say &amp;quot;code like the future developer on this is an idiot because current you is an idiot and future you will be to&amp;quot;. To be clear, I say that to myself, about myself.&lt;/p&gt;
&lt;p&gt;In OO we do this with constructors or factories (and hidden constructors), with encapsulation and smart APIs. This is a big part of the guidelines around aggregates in Domain-Driven design (DDD) and keeping the aggregate consistent. We have a lot of patterns and practices in OO that help with this. A LOT! In fact it is quite difficult for new developers to get up to speed with them all. And since they are often struggling with the technical implementation of features they are not worrying too much about the intricacies of the design and whether it leads future developers into the pit of success. We coach, and hopefully with good coaching they learn these things faster than we did through trial and error. I cannot help but wonder if there is a simpler way to get to well designed software than absorbing all these patterns and practices? Note I said simple, not easy.&lt;/p&gt;
&lt;p&gt;Functional programming (FP) with its mathematical basis makes some claims about correctness. Correctness is hard to be certain of when global state is constantly in flux, as it is in an OO centric application. FP revolves around functions, with inputs and outputs, with the same input always yielding the same output (for pure functions).&lt;/p&gt;
&lt;p&gt;So basically the WHY can be broken down into 2 points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correctness of the program&lt;/li&gt;
&lt;li&gt;Fewer concepts need to be known to develop maintainable software&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I remember reading &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;this article of Mark Seemann&apos;s&lt;/a&gt; and thinking this seems like a problem I have but I cannot quite relate to his conclusion. As we will see in the next section, it took me 2 years to get to a place where I could read that article and nod my head instead of scratch it.&lt;/p&gt;
&lt;h2&gt;The HOW of it&lt;/h2&gt;
&lt;p&gt;I was not keeping notes so these are the highlights I remember and that I think are important.&lt;/p&gt;
&lt;p&gt;Since about 2013 I had been trying to learn and apply many of the technical approaches highlighted in DDD. This lead to much more focus on types whose instance state can only be changed in a very controlled way. Not only that but the types are descriptive of the domain and do not try be too reuseable but rather represent very specific use cases.&lt;/p&gt;
&lt;p&gt;By the time 2016 rolled around I had heard of the promises FP made and had even &amp;quot;file new project&amp;quot;&apos;ed an F# console application but with very little success. I resolved to give it a better try and started reading through &lt;a href=&quot;https://fsharpforfunandprofit.com/books/#downloadable-ebook-of-this-site&quot;&gt;fsharpforfunandprofit&lt;/a&gt; and looking at a few &lt;a href=&quot;https://www.pluralsight.com/search?q=F%23&amp;amp;categories=course&quot;&gt;Pluralsight&lt;/a&gt; videos.&lt;/p&gt;
&lt;p&gt;Then I was contacted by &lt;a href=&quot;https://www.manning.com/&quot;&gt;Manning&lt;/a&gt; to give feedback on an early draft of &lt;a href=&quot;https://www.manning.com/books/functional-programming-in-c-sharp&quot;&gt;Functional Programming in C#&lt;/a&gt;. In it Enrico Buonanno gives a really deep introduction to functional concepts and patterns, showing both the implementation and usage of FP in C#. For me this was quite nice as I could absorb concepts without getting hung up on the syntax of some new programming language. These inspired a series of posts on Honest Types, namely &lt;a href=&quot;/honest-arguments/&quot;&gt;Honest Arguments&lt;/a&gt;, &lt;a href=&quot;/honest-return-types/&quot;&gt;Honest Return Types&lt;/a&gt;, and &lt;a href=&quot;/better-error-handling/&quot;&gt;Better Error Handling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At work my code started taking on a more functional style in C# and a few of our projects started making use of &lt;a href=&quot;https://github.com/louthy/language-ext&quot;&gt;Language Extensions&lt;/a&gt;. I have a repository demonstrating some use cases &lt;a href=&quot;https://github.com/dburriss/ElevatedExamples&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By early 2017 I was writing small console apps in F# that would crunch some CSV files, or merge some PDF documents. These were not great and I realized that although I was getting used to F# syntax I was missing something key in how to structure my applications. The penny only dropped when watching a video from Mark Seemann on &lt;a href=&quot;https://www.youtube.com/watch?v=US8QG9I1XW0&quot;&gt;Functional architecture - The pits of success&lt;/a&gt;. Another good one released later is &lt;a href=&quot;https://www.youtube.com/watch?v=cxs7oLGrxQ4&quot;&gt;From Dependency injection to dependency rejection&lt;/a&gt;. Both of these talk about purity and composing applications so the code with dependencies on IO are on the outside. If this sounds like Clean/Onion/Hexagonal Architecture, you are absolutely right.&lt;/p&gt;
&lt;p&gt;Now here we are at the end of 2017 and and I have just finished &lt;a href=&quot;https://fsharpforfunandprofit.com/books/#domain-modeling-made-functional-ebook-and-paper&quot;&gt;Domain Modelling Made Functional&lt;/a&gt; by Scott Wlaschin of &lt;a href=&quot;https://fsharpforfunandprofit.com/&quot;&gt;fsharpforfunandprofit&lt;/a&gt; fame. It brings together so many deep topics in such an approachable way that it is difficult to compare to any book I have read before. It doesn&apos;t assume any knowledge and yet I learned some F#, some FP, and some DDD even though I have read multiple books dedicated to each of these topics. Scott develops a feature from beginning to end in a practical way that distills and teaches the core concepts of these advanced topics without getting bogged down in theory. I realize I am sounding like a fan boy here but I would honestly recommend this book to teach FP and F# OR DDD. It teaches both brilliantly.&lt;/p&gt;
&lt;p&gt;This December I posted &lt;a href=&quot;/argument-for-fp/&quot;&gt;my first F# themed blog post&lt;/a&gt; as part of the &lt;a href=&quot;https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/&quot;&gt;FsAdvent Calendar 2017&lt;/a&gt;. I submitted &lt;a href=&quot;https://github.com/giraffe-fsharp/giraffe-template/pull/4&quot;&gt;my first PR to an F# open source project&lt;/a&gt; and now I am winding down on my 2nd FP related blog post. I am looking forward to what the next year brings and all I have to learn.&lt;/p&gt;
&lt;h2&gt;Further Reading (posts)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Mark Seemann has a brilliant posts on how a &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;language can reduce the potential for errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scott Wlaschin on &lt;a href=&quot;https://fsharpforfunandprofit.com/learning-fsharp/&quot;&gt;learning F#&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Further watching (videos)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Mark has an excellent talk on &lt;a href=&quot;https://www.youtube.com/watch?v=US8QG9I1XW0&quot;&gt;falling into the pit of success&lt;/a&gt; and another on &lt;a href=&quot;https://www.youtube.com/watch?v=cxs7oLGrxQ4&quot;&gt;Dependency Rejection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vimeo.com/162209391&quot;&gt;Designing with Capabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vimeo.com/113707214&quot;&gt;Railway oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Recommended books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/books/#domain-modeling-made-functional-ebook-and-paper&quot;&gt;Domain Modelling Made Functional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/books/#downloadable-ebook-of-this-site&quot;&gt;fsharpforfunandprofit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/functional-programming-in-c-sharp&quot;&gt;Functional Programming in C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/real-world-functional-programming&quot;&gt;Real-World Functional Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Header photo by &lt;a href=&quot;https://unsplash.com/@johnmarkarnold&quot;&gt;John Mark Arnold&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/argument-for-fp/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/argument-for-fp/"/>
    <title>An argument for functional programming</title>
    <updated>2017-12-08T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/argument-for-fp/</uri>
    </author>
    <summary type="html">&lt;p&gt;Have you ever thought you have the perfect tool for the job at work but it is not on the allowed list of languages or frameworks? At this stage you have a decision to make. Are you going to just move on and pick something that will meet less resistance or are you going to do the work to drive some change? In this post I make my case for functional programming in enterprise development, specifically &lt;strong&gt;F#&lt;/strong&gt; if your current team expertise is .NET. The same arguments could be leveled for JVM based languages like Scala if your experience is in Java.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post is part of &lt;a href=&quot;https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/&quot;&gt;FsAdvent Calendar 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;In this post I drill down through the different reasons why a business (applies to individual developers too) should consider broadening their language range in a carefully considered way. First I argue that being open to multiple languages can benefit your companies hiring as well as the experience pool. Secondly I argue that functional programming opens up new perspectives while increasing the correctness of your applications in less time. As a bonus functional programming filters even better in the hiring process for top developers. Lastly I make the case that if you already have .NET experience the F# is a natural choice for a functional language.&lt;/p&gt;
&lt;p&gt;If this is all you are going to read I want to leave you with an excerpt from a study done over 728 projects on Github. I link to the full article at the end of the post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The data indicates that functional languages are better than procedural languages; it suggests that disallowing implicit type conversion is better than allowing it; that static typing is better than dynamic; and that managed memory usage is better than unmanaged.&amp;quot; - A Large-Scale Study of Programming Languages and Code Quality in GitHub&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;An argument for language diversity&lt;/h2&gt;
&lt;img src=&quot;../img/posts/2017/scrolls.jpg&quot; alt=&quot;Scrolls&quot; class=&quot;img-rounded pull-left&quot; width=&quot;290&quot; style=&quot;margin-right: 1em;&quot;&gt;
Firstly I would like to make the case for why you should consider using different languages in your environment. Even if you don&apos;t buy that, I will make a case for at the very least hiring outside of the language expertise you need on the job.
&lt;h3&gt;Slim pickings&lt;/h3&gt;
&lt;p&gt;Good developers are in short supply and the market is competitive. By opening up your hiring to other languages, or actually using multiple languages, you &lt;strong&gt;expand the pool of developers by a multiple of the number of languages you are willing to consider&lt;/strong&gt;. This can be a huge advantage in the number of applicants you receive. Obviously sheer number of applicants is not the only concern and I will address this in a later point. The important point to buy in to here though is that a good developer in any language is a better pick than a poor or average developer in your language of choice. Language specific skills can be ramped up fairly quickly. Experience and professionalism on the other hand is hard earned and hard to come by. In my opinion the quality of a developer always trumps the language they use.&lt;/p&gt;
&lt;h3&gt;Swag&lt;/h3&gt;
&lt;p&gt;Let&apos;s face it. Your reputation as a company influences who you attract. For professional, open-minded developers that are not fan boys of a specific language, &lt;strong&gt;a company that is focused on hiring on quality and principles is far more appealing than a company that religiously hires on technical stack&lt;/strong&gt;. &lt;strong&gt;Polyglot&lt;/strong&gt; (fluent in multiple languages) is one of those &lt;strong&gt;buzzwords&lt;/strong&gt; that started doing the rounds a while back in the programming space (in this case specific to programming languages). &lt;strong&gt;Being able to use it honestly in your recruitment is a real bonus&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Skin the cat&lt;/h3&gt;
&lt;p&gt;Different experience and different language features allow for different ways of solving problems. Often just having &lt;strong&gt;someone with a different background look at a problem allows them to come up with a solution in a new (for the team) and elegant way&lt;/strong&gt;. This can have huge benefits to the team and company as a whole.&lt;/p&gt;
&lt;h3&gt;Mindset is key&lt;/h3&gt;
&lt;p&gt;At the rate that information based industries change it is impossible knowing everything. More important is that you can acquire new skills efficiently and effectively. Selecting for people who pick up new languages is &lt;strong&gt;selecting for people who actively pursue skill acquisition&lt;/strong&gt;. This is often the number one identifier I see in hiring between average developers and awesome developers. When those languages span different programming paradigms like imperative and functional, then you have someone who is really pushing their comfort zones to find better solutions. That mindset is hard to teach and one you really want on your team. At the very least it is someone who is willing to pick up what needs to be done on the job.&lt;/p&gt;
&lt;h2&gt;An argument for functional programming&lt;/h2&gt;
&lt;img src=&quot;../img/posts/2017/eye.jpg&quot; alt=&quot;Eye&quot; class=&quot;img-rounded pull-left&quot; width=&quot;280&quot; style=&quot;margin-right: 1em;&quot;&gt;
When I was new to software development I was always looking for new and shiny ways to do things. Waiting for that new feature. Over the years I have come to appreciate a more minimal and opinionated approach. Some tools are great for edge-cases but are often not worth the hassle they cause when used liberally where they should not be used. Minimizing language features that allow you to make mistakes increases productivity and helps you fall into the pit of success. My path to functional programming was paved in development pain and failure. How so? When something seemed painful I would look for ways to close that path in general development so the mistake was not made by me, or any other future developer again. Functional programming increases the constraints in a good way.
&lt;h3&gt;Choice of 2, take it or leave it&lt;/h3&gt;
&lt;p&gt;Most of the mainstream enterprise languages out there have the concept of &apos;null&apos;. This has been described as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;billion dollar mistake&lt;/a&gt;. Functional programming has more &lt;strong&gt;elegant ways of representing the absence of data&lt;/strong&gt; that encourages you to make unrepresentable states unrepresentable. This is of course not the sole domain of the functional paradigm (I have &lt;a href=&quot;/honest-return-types&quot;&gt;written about it in the past for C#&lt;/a&gt;) but null based exceptions are rare to find in functional languages and if found are usually because of interop concerns. Minimizing the chance of null removes a whole class of exceptions that can possibly occur.&lt;/p&gt;
&lt;h3&gt;Who moved my cheese?&lt;/h3&gt;
&lt;p&gt;Another point were I experienced pain was with erratic or incorrect programs due to unintended state changes. Functional programming on the other hand pushes you toward immutability. A function has an input and an output and that output does not have a reference to the input. This makes code far more predictable. &lt;strong&gt;Immutability removes a whole class of errors that can occur due to unintended side-effects&lt;/strong&gt;, which are often hard to find and fix.&lt;/p&gt;
&lt;h3&gt;The I is an illusion&lt;/h3&gt;
&lt;p&gt;In the age of cloud computing, auto-scaling, and concurrency, &lt;strong&gt;not having state means concurrency becomes almost as simple as concurrent&lt;/strong&gt; since there is no state to lock around. This makes functional programming great for scale as it keeps things simple for the developer. As a developer you don&apos;t need to be an expert in concurrency to get it right. Again, a whole host of concurrency bugs are not representable (in state).&lt;/p&gt;
&lt;h3&gt;Purity matters&lt;/h3&gt;
&lt;p&gt;Functional programming values something called purity. This is basically the characteristic that you pass something into a function and get something out, and no state has been mutated inside. So for each input value you will always get the same output value. Valuing purity means code that is not pure is pushed to the boundaries of the application, which is good. &lt;strong&gt;Purity ensures that the bulk of your codebase is easily testable&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;The new goto&lt;/h3&gt;
&lt;p&gt;Since functional programming encourages purity, throwing exceptions is not something you regularly do. It only happens in exceptional cases. Functional languages make this less &lt;a href=&quot;/better-error-handling&quot;&gt;clunky than doing it in an OO first language like C#&lt;/a&gt;. What this means for code is &lt;strong&gt;there are no breaks in control flow so it is easier to reason about&lt;/strong&gt;. Easier to reason about means easier to maintain and less bugs.&lt;/p&gt;
&lt;h3&gt;Signature move&lt;/h3&gt;
&lt;p&gt;I have written before about &lt;a href=&quot;/honest-arguments&quot;&gt;honest arguments&lt;/a&gt; and &lt;a href=&quot;/honest-return-types&quot;&gt;honest return types&lt;/a&gt; and it is something I have witnessed make a difference in code. &lt;strong&gt;Not only is the code more descriptive but correctness is reinforced by the compiler&lt;/strong&gt;. Functional programming brings the signatures of functions front and center. Once again, more possible errors negated.&lt;/p&gt;
&lt;h3&gt;Expanding horizons&lt;/h3&gt;
&lt;p&gt;I touched on this in the section on language diversity but encouraging developers to learn &lt;strong&gt;a new paradigm equips them with more tools in the toolbox&lt;/strong&gt;. I am not talking about a new framework or pattern but a new perspective at looking at a problem. A new perspective may yield a better solution to a problem.&lt;/p&gt;
&lt;h3&gt;Short and sweet&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Functional languages usually allow you to do more with less code&lt;/strong&gt;. This is because it is declarative rather than imperative. This means your code reads like a sentence telling you what it does rather than a list of commands telling you each and every task to do.&lt;/p&gt;
&lt;h2&gt;An argument for F#&lt;/h2&gt;
&lt;img src=&quot;../img/posts/2017/fsharp512.png&quot; alt=&quot;fsharp&quot; class=&quot;img-rounded pull-left&quot; width=&quot;280&quot; style=&quot;margin-right: 1em;&quot;&gt;
So hopefully by this point I have convinced you (or you have convinced your boss) that having multiple languages is good. Not only that but choosing a functional first language makes good sense. My final step will be to convince you that F# should be that language.
&lt;h3&gt;No cold turkey necessary&lt;/h3&gt;
&lt;p&gt;Although F# is a functional first language, it is actually multi-paradigm. &lt;strong&gt;F# supports both functional and object oriented paradigms. It has to since it interops easily with C#&lt;/strong&gt;. So technically developers could code in an OOP style while they learned the F# language. This is absolutely an option and a pretty low risk way of introducing F#. The down side will be you might not reap the majority of the benefits I have mentioned thus far.&lt;/p&gt;
&lt;h3&gt;Protect the ecosystem&lt;/h3&gt;
&lt;p&gt;Part of what makes C# and .NET in general great is the tooling and libraries built up around it. &lt;strong&gt;Runtimes, IDEs, BCL, and library packages, they are all still available to you in F#&lt;/strong&gt; since it is a .NET based language.&lt;/p&gt;
&lt;h3&gt;Protect the investment&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Your existing investment in libraries and business logic can be re-used as is without a re-write&lt;/strong&gt;. You might want to write a small functional wrapper around them to make them fit in the new functional paradigm but that is a nice to have. This means your current code is re-usable and future code can still be written in whatever a team is comfortable in and still interop in the same solution.&lt;/p&gt;
&lt;h3&gt;Leading the pack&lt;/h3&gt;
&lt;p&gt;F# has been ahead of the curve in the .NET ecosystem in a lot of ways. So many of the great language features since C#&apos;s initial Java clone have been inspired by F#. Current &lt;strong&gt;features like generics, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, auto-property initializers, exception filters, expression-bodied function members, and pattern-matching were all in F# first&lt;/strong&gt;(or &lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2011/03/15/netc-generics-history-some-photos-from-feb-1999/&quot;&gt;worked on by the creator of F#&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Shoulders of giants&lt;/h3&gt;
&lt;p&gt;Although F# has been leading the charge with Open Source for longer than probably any other Microsoft endeavour, it still has the backing of Microsoft as well as an active OSS community. F# was released by Microsoft Research in 2005 and has been on Github since 2010. It is lead by the &lt;a href=&quot;http://foundation.fsharp.org/&quot;&gt;FSharp Foundation&lt;/a&gt; that is dedicated to advancing the language.&lt;/p&gt;
&lt;p&gt;Then there is the actual OSS community. There are too many to name individually but some that you will either use or stand out because of their ambition are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ionide.io/&quot;&gt;Ionide&lt;/a&gt; - An IDE plugin for Visual Studio Code and Atom that has been ahead of Visual Studio in supporting F# features, especially with the new &lt;code&gt;netstandard&lt;/code&gt; stuff&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharp.github.io/FSharp.Data/&quot;&gt;F# Data&lt;/a&gt; - is a useful library for working with data from varied sources&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://suave.io/&quot;&gt;Suave&lt;/a&gt; - An ambitious and full-featured web library and server that provides a functional-first programming model for web development&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dustinmoris/Giraffe&quot;&gt;Giraffe&lt;/a&gt; - a micro web framework that wraps the Asp.Net Core functionality for a more functional-first programming model&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;mbrace.io&quot;&gt;MBrace&lt;/a&gt; - provides a simple programming model that opens up cloud computing in a way that initially seems like magic&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is far from an exhaustive list. The point is there are mature and well supported projects out there because the F# community is dedicated and enthusiastic. The FsAdvent Calendar initiative is a great example of this.&lt;/p&gt;
&lt;h2&gt;Caution&lt;/h2&gt;
&lt;p&gt;It would be remiss of me not to leave you with a few cautionary points.&lt;/p&gt;
&lt;h3&gt;Learning curve&lt;/h3&gt;
&lt;p&gt;Functional programming, especially with non C like languages can be pretty mind bending when you first start. I wish I could find the quote but I think it was one of the JVM functional language designers (Scala or Clojure) who said something like &amp;quot;sacrificing future power and expressiveness for beginner ease of use is one of the worst traps language designers can fall into&amp;quot;. I like the sentiment but in terms of language popularity it seems to have some unfortunate downsides. However, those who stick with it and start becoming fluent are usually die hard converts because they have realized the usefulness of the paradigm. On the other hand if most give up, the pool of developers will mostly consists of the smartest or most determined.&lt;/p&gt;
&lt;h3&gt;Maturity of the team&lt;/h3&gt;
&lt;p&gt;Language diversity requires a high level of maturity in your development team. A team lacking in maturity is more likely to pick something based on what they feel like using rather than assessing fitness of the tool for the solution. Hiring in at least one for two experienced people to lead would probably be a good idea.&lt;/p&gt;
&lt;h3&gt;Ramp up&lt;/h3&gt;
&lt;p&gt;Ramping up slowly and allowing more people in the organization to get experience on low risk projects could be a low risk way of introducing F#. &lt;a href=&quot;https://youtu.be/qPlYbHKvk4g?t=376&quot;&gt;A developer could learn the syntax this way without taking the productivity hit of learning a new paradigm&lt;/a&gt;. Mark Seemann has talked about how he initially just did OOP with F# and slowly incorporated functional ideas. In Mark&apos;s case I think he was leaning toward functional concepts anyway. Without a push to do so a developer could remain a 100% OO programmer while using F#. Even worse, a developer doing this might then decide that F# provides no benefits. So a slow ramp up comes with it&apos;s own risks.&lt;/p&gt;
&lt;h3&gt;Maturity of deployment&lt;/h3&gt;
&lt;p&gt;With a new language you might need new deployment pipelines so make sure you have this sorted on a technology you are familiar with before going crazy with choices.&lt;/p&gt;
&lt;h3&gt;Pick smart&lt;/h3&gt;
&lt;p&gt;Although I argue for a polyglot environment I am not making the case for ALL languages being allowed. These projects still need to be supported by the organization. Pick a small set of languages after considering a few aspects of them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Maturity of the language, ecosystem, and the community&lt;/li&gt;
&lt;li&gt;Popularity of the language (no point jumping on a sinking ship)&lt;/li&gt;
&lt;li&gt;Availability of developers&lt;/li&gt;
&lt;li&gt;Expected salaries (you need to be competitive)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So I covered reasons why you should consider more languages, why one of those should be functional, and hopefully convinced you to &lt;a href=&quot;http://fsharp.org/&quot;&gt;give F# a try&lt;/a&gt;. This actually isn&apos;t an exhaustive list. Personally, I have found other reasons why learning F# has been great. Learning F# made it easier for me to jump into even more languages. Elm for instance was super low resistance. Also F# has a bunch of really cool features like Type Providers, Computation Expressions, and more that blow your mind when you come across them.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/fulltext&quot;&gt;A Large-Scale Study of Programming Languages and Code Quality in GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://evelinag.com/blog/2014/06-09-comparing-dependency-networks/&quot;&gt;Comparing F# and C# with dependency networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mark Seemann has a brilliant posts on how a &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;language can reduce the potential for errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mark has an excellent talk on &lt;a href=&quot;https://www.youtube.com/watch?v=US8QG9I1XW0&quot;&gt;falling into the pit of success&lt;/a&gt; and another on &lt;a href=&quot;https://www.youtube.com/watch?v=cxs7oLGrxQ4&quot;&gt;Dependency Rejection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scott Wlaschin has an excellent &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/low-risk-ways-to-use-fsharp-at-work/&quot;&gt;series on low risk ways to start using F# at work&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Header photo by &lt;a href=&quot;https://unsplash.com/@nhoizey&quot;&gt;Nicolas Hoizey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social photo by &lt;a href=&quot;https://unsplash.com/@groosheck&quot;&gt;Michał Grosicki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scrolls photo by &lt;a href=&quot;https://unsplash.com/@sindreaalberg&quot;&gt;Sindre Aalberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eye photo by &lt;a href=&quot;https://unsplash.com/@amandadalbjorn&quot;&gt;Amanda Dalbjörn&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/touched-by-god/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/touched-by-god/"/>
    <title>Touched by God</title>
    <updated>2017-11-02T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/touched-by-god/</uri>
    </author>
    <summary type="html">&lt;p&gt;In science and life, sometimes things happen that we cannot explain. Just a few hundred years ago most of what could not be explained was attributed to the supernatural. Thankfully a lot of that mystery has been peeled back, opening us up to bigger and more fundamental questions about the universe. Compared to areas like cosmology and particle physics, things like the human mind and consciousness remain relatively unexplored by science. This leaves some questions unanswered about our place in this expanding universe. In this post I explore and contrast some of my early religious spiritual experiences to my recent self-observations in mindfulness.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;A brief history...&lt;/h2&gt;
&lt;p&gt;I grew up in a Christian household, going to church for as far back as I can remember. As a teenager I started attending a more charismatic church with some friends, which I will go into in a bit. After school I studied computer science and physics with a few other things thrown in. After university I also spent a year studying theology part-time. It was while studying theology that I realized I believed what I was raised to believe and I should look at both the religious and scientific alternatives to my world view. &lt;em&gt;The Truth&lt;/em&gt; would of course hold up to any scrutiny.&lt;/p&gt;
&lt;h2&gt;Touched by God&lt;/h2&gt;
&lt;img src=&quot;../img/posts/2017/touched-by-god-flame.jpg&quot; alt=&quot;Fire&quot; class=&quot;img-rounded pull-left&quot; width=&quot;280&quot; style=&quot;margin-right: 1em;&quot;&gt;
For those who have never been involved in this sort of thing it is hard to explain. A meeting at a charismatic Christian event usually goes something like this. The minister will open with a prayer and a reading from the Bible. We would then launch into around 40 minutes of &quot;Praise and Worship&quot;. This would usually start as vibrant upbeat music and end off with more emotive music. These times would often correspond with feelings of joy and awe as it felt like the Holy Spirit was among us. They could often get quite weird for the uninitiated as people would laugh uncontrollably, jump around, and speak out in &quot;tongues&quot;(odd sounds that only angels and those gifted with the ability could understand). The service would then continue with a short sermon and then we would go into a period of &quot;ministry&quot;. This usually entailed people coming to the front and being prayed for while the band softly played in the background. The weirdness of the &quot;praise and worship&quot; is usually overshadowed in this &quot;ministry&quot; time for those who are not accustomed to it. People would laugh and cry uncontrollably. People would gather and pray in &quot;tongues&quot; for each other. People would prophesize about the future of the people standing there, and probably most extraordinary to the uninitiated people would be those &quot;slain in the spirit&quot;. This is a phenomenon where people would fall over backward and then either just lie there basking in the magnificence of God, maybe laughing at the wonder of it, or crying as you are overwhelmed, or convulse as demons flee before the Holy Spirit.
&lt;p&gt;I wanted to give you a brief picture of what it is like to be in that setting. These few words do not bring the full reality of what it feels like to be involved in this. To those who have experienced it, the absolute reality of it is difficult to explain with anything other than the supernatural. There are of course psychological explanations for these effects but I instead wanted to look at them in light of a more recent experience...&lt;/p&gt;
&lt;h2&gt;Within myself&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2017/sand-hand.jpg&quot; alt=&quot;Sand hand&quot; class=&quot;img-rounded pull-left&quot; width=&quot;280&quot; style=&quot;margin-right: 1em;margin-bottom: 1em;&quot;&gt;A few years back I started practicing mindfulness. At the time it was infinitely valuable in coping with a new job in a new city and a way more skeptical view of the metaphysical. This skepticism had a profound effect on my view of mortality which all of a sudden became very cognizant, causing a lot of anxiety. Mindfulness helped me come to terms with this using &lt;a href=&quot;https://en.wikipedia.org/wiki/Maranasati&quot;&gt;Maranasati&lt;/a&gt;. This is a practice where you contemplate and visualize the reality of dying, death, and all that comes after. To be clear, I did not have any dead bodies to look at. Only imagination.&lt;/p&gt;
&lt;p&gt;I keep notes on sessions that stand out. Or just capture how I was feeling before and after my meditation. I also &lt;a href=&quot;https://www.heartmath.com/science/&quot;&gt;measure&lt;/a&gt; my heart rate variability (HRV) while meditating.
I would like to compare the &amp;quot;spiritual&amp;quot; experience recounted earlier against more recent &amp;quot;no-metaphysics-here&amp;quot; experiences. Here is the quote from the notes after the experience I want to recount.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Started off stressed. Was a good session. At the end I started a weird feedback loop where I was aware of being a consciousness in my head and started an elation feedback loop that I could imagine getting quite... spiritual...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was a strange experience to say the least. All of a sudden I really felt like I was observing my thoughts arise and disappear as I chose not to follow them. Not only that but after a while I felt like I had hooks into my mental state with levers attached that I could pull on. So I pulled. I cranked up my feeling of peace and euphoria and lo and behold I felt those things acutely. With absolute clarity of mind I was sitting cross-legged on my bed laughing wholeheartedly at the elation I was feeling. When I realized the weirdness of the situation I flipped the lever and turned it off. Let&apos;s take a look at the graph of my meditation at the time of this. Typically the graph drops down into the red by the 10 minute mark because after settling in for a few minutes I start a &amp;quot;loving kindness meditation&amp;quot; exercise. By the end of that I have moved into wishing happiness onto people who can sometimes aggravate me so things have gone downhill by this point.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2017/meditation-results1.png&quot; alt=&quot;Meditation Results 1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One more thing to mention about the graphs. These graphs in themselves don&apos;t measure anything directly related to the mind. They are just a helpful indicator of calm and focus. For me personally a 7 is an extremely high level of coherence.&lt;/p&gt;
&lt;p&gt;As you can see this feeling of peace and euphoria lasts less than a minute before I am shocked out of it. At this point I contemplate what has just happened. What was that? That reminds me a lot of metaphysical experiences I had at charismatic religious events. Can I control it? Although there are many similarities to the previous church experiences the obvious presence of mind and control was in stark contrast to those experiences. At this point my interest was piqued as to how much control I had of this experience, so I dove back in. Here is the graph continued...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2017/meditation-results2.png&quot; alt=&quot;Meditation Results 2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I could reproduce it! As you can see this time I was not as easily scared off by the experience and allowed myself to linger in that state for a little while.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So what does this mean?&lt;/em&gt; I have been able to reproduce this on most of the subsequent times I have tried since then. This has not been very many times, as after the initial novelty wore off I didn&apos;t see too much value other than the insights that the experience gave me over the control I can exercise over my own emotions and state of mind. The euphoria generated from this is much the same as the previous religious experiences and the significance only slightly more. Much like the religious experience the transcendent nature of the experience quickly fades and leaves little impact after the feeling has passed other than renewed assuredness of the &amp;quot;reality&amp;quot; of the spiritual to affect the natural world. The meditative experience however did teach me something about the degree to which I can exercise control over my own emotions and give me a glimpse at what is possible at the extremes of emotion in a controlled and contemplative state. Of course maybe this is just another delusion but at least I am willing to entertain that possibility now.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I recently read Lawrence Krauss&apos; &lt;strong&gt;&lt;a href=&quot;http://www.simonandschuster.co.uk/books/The-Greatest-Story-Ever-Told-So-Far/Lawrence-Krauss/9781471158377&quot;&gt;The Greatest Story Ever Told...So Far&lt;/a&gt;&lt;/strong&gt; and he does an awesome job of capturing the incremental nature of how science has built it&apos;s current edifice of knowledge over hundreds of years. This is in the realm of physics alone. Questions about the soul, consciousness, freewill, and &lt;a href=&quot;/moral-behavior-is-rewarded&quot;&gt;morality&lt;/a&gt; tend to be ignored by science and fall to philosophers, mystics, religious leaders, and sometimes the odd psychologist. Neuroscientists and psychologists seem to be gaining more interest in answering these questions but the field is still young and hesitant to tread in the domain of the religious. That does not mean we need to wait for science to tell us how our mind works. We can start right now to explore it in a subjective way that can still possibly yield objective facts. Each mind is unique in many ways and although we all fall prey to the same biases to one degree or another we can start investigating the nature of those similarities and differences right now. Not only that but we can exercise the &amp;quot;muscles&amp;quot; of our mind and thus learn to exercise some measure of control over our thoughts.&lt;/p&gt;
&lt;p&gt;If your interest was piqued by this post I highly recommend you read &lt;a href=&quot;https://www.samharris.org/waking-up&quot;&gt;Waking Up&lt;/a&gt; by Sam Harris or if reading is not your thing (well done on getting this far) he has an awesome free &lt;a href=&quot;https://www.samharris.org/podcast&quot;&gt;podcast&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Header photo by &lt;a href=&quot;https://unsplash.com/@grakozy&quot;&gt;Greg Rakozy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social photo by &lt;a href=&quot;https://unsplash.com/@viniciusamano&quot;&gt;Vinicius Amano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Content photo &lt;a href=&quot;https://unsplash.com/@kunjparekh&quot;&gt;Kunj Parekh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/moral-behavior-is-rewarded/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/moral-behavior-is-rewarded/"/>
    <title>Hypothesis: Moral behavior is rewarded</title>
    <updated>2017-10-19T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/moral-behavior-is-rewarded/</uri>
    </author>
    <summary type="html">&lt;p&gt;I don&apos;t consider myself an immoral person. Unless you count those days when I thought there was an all seeing being in the sky watching that I didn&apos;t break the archaic rules laid out by men thousands of years ago who also thought it was ok to own slaves and commit genocide. Since then I have not given too much thought to morality other than my general rule of &amp;quot;Don&apos;t be a dick&amp;quot;. A few weeks back I made a commitment to hold myself to a higher moral standard. Not only that but I laid out some experimental guidelines of rules that I would follow and a hypothesis of what I expect. Finally, I would tell people about it so they could hold me to my commitments.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;A few months back I read &lt;a href=&quot;https://www.samharris.org/books/the-moral-landscape&quot;&gt;The Moral Landscape&lt;/a&gt; by Sam Harris and was really challenged by the idea of using the wellbeing of sentient beings as a measure of morality. I found it not only compelling but also something concrete to measure myself against that didn&apos;t resort to mysticism. It is a brilliant read and I highly recommend it. My own life was silhouetted against the moral landscape. It is up to me decide just how bright to make it. I figured I would map out my path in the hope others might find it useful for their own wellbeing.&lt;/p&gt;
&lt;h2&gt;Hypothesis&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Moral integrity will increase my wellbeing and the wellbeing of those around me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is there any reason to think this is reasonable? Most people want wellbeing but we are poorly wired for it. That doesn&apos;t mean we don&apos;t want it for ourselves, our loved ones, and the human race in general. Of course there are just some people who behave like dicks and don&apos;t have the self awareness to care that they hurt others. Then of course there are sociopaths and psychopaths. This is a dysfunction compared to normal human behavior and experience so lets discount that.&lt;/p&gt;
&lt;p&gt;Human civilization has become more and more... civilized over time. We treat each other better and care more about peoples wellbeing. I don&apos;t think it is unreasonable then that we can attribute that to a move away from violence to discourse. A move to attributing respect and equality to others. I come from South Africa and now live in The Netherlands. The differences in wellbeing I see are like night and day. And I attribute this largely to the respect and equality given to each citizen in a civil society.&lt;/p&gt;
&lt;h3&gt;Expectations&lt;/h3&gt;
&lt;p&gt;I had listed a few expectations when I decided to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It would lead to some awkwardness&lt;/li&gt;
&lt;li&gt;I would be happier with myself&lt;/li&gt;
&lt;li&gt;People would like me more because I am trustworthy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Guidelines&lt;/h3&gt;
&lt;p&gt;The guidelines lay out some clear action plans that I can follow when situations arise. This ends up being quite an important point as it is easy to convince yourself to try take an easy way out of a difficult situation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I will not lie in any circumstance other than a life threatening situation.&lt;/li&gt;
&lt;li&gt;I will not engage in gossip.&lt;/li&gt;
&lt;li&gt;I will try my utmost to treat everyone respectfully at all times.&lt;/li&gt;
&lt;li&gt;I will not steal.&lt;/li&gt;
&lt;li&gt;I will try maintain my equanimity at all times.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Lying&lt;/h4&gt;
&lt;p&gt;This isn&apos;t something that I felt I engaged in a lot. Mostly it was in the context of &lt;em&gt;gossip&lt;/em&gt;. That would lead to having to pretend you don&apos;t know something you do. Other things like being non-committal on things to avoid an uncomfortable discussions. Half-truths to save face. Platitudes to avoid hurting peoples feelings. This last one might have you wondering &amp;quot;Surely that is ok?!&amp;quot;. I maintain not as it is a slippery slope. This is not to say that you should be hurtful. You can still speak the truth while being compassionate and respectful of the other persons feelings. I honestly believe feedback is good for most people (if in a really unhealthy state you might want to pull back even more). Even in the case of someone in a fragile state of mind rather than &amp;quot;You really could have done better at that.&amp;quot; you could just say &amp;quot;Let&apos;s book some time when you are feeling better. It isn&apos;t important now.&amp;quot;&lt;/p&gt;
&lt;h4&gt;Gossip&lt;/h4&gt;
&lt;p&gt;This was the main point that really started to make me uncomfortable about my conduct. I work in a large organization and someone is always frustrated by someone else, myself included. This would often lead to complaining, mostly of the non-constructive sort. At first I thought it cathartic but the more I reflected on it, it actually seemed a toxic part of my life.&lt;/p&gt;
&lt;p&gt;Sometimes in work or personal life talks about others is inevitable. My commitment here has been to not say or agree with anything I have not already said to someones face, or will schedule something to say to their face after these things have been said and agreed with. Knowing you will have to say things to someones face is a great way of moderating yourself and having a constant prompt of whether you want to actually be engaging in a conversation.&lt;/p&gt;
&lt;h4&gt;Respect&lt;/h4&gt;
&lt;p&gt;If the goal is wellbeing for all, treating people well is paramount. I don&apos;t have too much more to say on this. My original guideline of &amp;quot;Don&apos;t be a dick&amp;quot; works well enough for me. The only extra thing I find useful to meditate on as often as possible here is that everyone has a story and is generally just trying to do the best they can just like you. This means people are doing things for reasons that are important to themselves even if they are difficult for you (or sometimes even themselves) to articulate. Remember: you are nothing special, just like me ;)&lt;/p&gt;
&lt;h4&gt;Stealing&lt;/h4&gt;
&lt;p&gt;This is a subtle one. Obviously I am not out there robbing banks. If I was I &lt;a href=&quot;https://www.youtube.com/watch?v=Do3PQR6Tvss&quot;&gt;definitely would not be blogging about it&lt;/a&gt;! There are other ways this could be interpreted, such as taking credit for something someone else has done.&lt;br /&gt;
Not only that but in this digital age it is really easy to share or download media that you do not own. This is a tough one for some. Myself included.&lt;/p&gt;
&lt;h4&gt;Equanimity&lt;/h4&gt;
&lt;p&gt;I had actually found Sam Harris as an author through his neuroscience and mediation interests rather than his challenges against religious ideology that he is (in)famous for. I am not going to get into discussions of &lt;em&gt;self&lt;/em&gt; here but being self aware forms a big part on following through on all the other points mentioned here not to mention it does wonders for your own wellbeing. Just observing your thoughts, learning techniques for focusing your attention, and &lt;em&gt;deciding&lt;/em&gt; to act with intent can result in dramatic improvements in wellbeing.&lt;/p&gt;
&lt;h2&gt;Results so far&lt;/h2&gt;
&lt;p&gt;So one thing I can say for sure is this has lead to some hard conversations. I will also say it gets easier. I still mess up on these points often but I definitely believe it is having a curbing effect on my behavior in these areas.&lt;/p&gt;
&lt;p&gt;Subjective observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am much more cognizant of what I say which I think has curtailed the amount of things I say that I later regret.&lt;/li&gt;
&lt;li&gt;I am more aware in difficult conversations that there is more than just my side in an argument. I think this has actually made me more effective at convincing people of the merits of my own points.&lt;/li&gt;
&lt;li&gt;I believe my feedback, even in difficult conversations has been appreciated. I have actually received this feedback directly.&lt;/li&gt;
&lt;li&gt;I seem to be perceived as trustworthy. This was said to me today which I really appreciated.&lt;/li&gt;
&lt;li&gt;I am starting to find the small blunt responses to questions that lead to awkwardness easier to just say and not worry about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will see if I can get some data on this from friends and coworkers. It would be interesting to actually be able to plot perception. I will also try post my own subjective experience of this further down the road.&lt;/p&gt;
&lt;h3&gt;Credit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.samharris.org/&quot;&gt;Sam Harris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Photo by Jens Lelie on &lt;a href=&quot;https://unsplash.com/photos/u0vgcIOQG08&quot;&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/stop-comparing-eq-and-iq/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/stop-comparing-eq-and-iq/"/>
    <title>Stop comparing EQ and IQ</title>
    <updated>2017-10-17T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/stop-comparing-eq-and-iq/</uri>
    </author>
    <summary type="html">&lt;p&gt;I see this comparison come up online and at work a lot. The implication being that if we want success we look for people with good EQ skills and if they have weak technical skills we can teach them. Sure. These are both skills but if everyone is good at communicating but rubbish at the technical stuff, guess what the quality is like...&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;em&gt;These ideas are my own and do not represent the views of my employer.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I realise that this post has the potential to annoy or offend. Sadly I also don&apos;t expect to change too many minds. I guess I am hoping for this to be cathartic and that it will allow me to move on without being triggered in the future (I should meditate more). The idea that general intelligence is fixed and is decided for us in a genetic lottery does not sit well with us. Including me. Although I would like to be smarter I think (with my limited intellect) that the closer you align your reality with actual reality, the less suffering you will inflict on yourself and others.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;IQ vs EQ is a nonsensical comparison. EQ is dependent on mental facilities correlated to IQ such as verbal comprehension, working memory, perceptual organization, and processing speed. EQ is also very dependent on skills learned while IQ is correlated with the speed and proficiency of skill acquisition. In this post I build on this to try show that IQ should be a fairly good indicator of potential EQ. It should not be surprising that both IQ and EQ are good indicators of success. They are likely BOTH found in successful individuals.&lt;/p&gt;
&lt;h2&gt;Setting the ground work&lt;/h2&gt;
&lt;p&gt;First let me make a few assertions. These are assertions that are either consensus in the SCIENTIFIC community or seem to be the view of the majority of publishing EXPERTS in the related fields. I contrast this to the general public where there is plenty of myth and confusion. Things like &amp;quot;the 8 intelligences&amp;quot;, &amp;quot;street smart&amp;quot;, and &amp;quot;EQ&amp;quot; resonate with our desire to be able to work hard and be better. I do not wish to undermine this and I am by no means asserting IQ is the sole determining trait for success. I really mean this because if I did think about it often, I would seldom assume myself the smartest person in any given room. Which could be depressing. Instead, learning is important. That aside; when confronted with facts versus what I wish was true, on a good day I try choose the facts (or as close to we have them from science when studying the brain).&lt;/p&gt;
&lt;h3&gt;Assertion 1: Everything about us has a physical explanation&lt;/h3&gt;
&lt;p&gt;No metaphysics apply. There is no soul that makes us think a certain way. All our thinking happens in our brain due to biological processes that are possibly mysterious to us but are due to physical systems within our body.&lt;/p&gt;
&lt;h3&gt;Assertion 2: Intelligence is explained by genetics&lt;/h3&gt;
&lt;p&gt;IQ is a fairly good normalized measure of general intelligence. Following on from assertion 1 it is a trait about us that is coded into our DNA. To make this practical. For the smartest people of our time, it was clear that they were special by as early as 2 years of age. Kim Ung-Young for example, with an IQ of 210, was fluent in four languages by age 2. There is little chance that child rearing was the only factor in this.&lt;/p&gt;
&lt;h3&gt;Assertion 3: IQ is a good indicator of ability for skill acquisition&lt;/h3&gt;
&lt;p&gt;Studies show a very positive correlation between IQ and skill acquisition. This is in both physical and mental skills. Again we are not dealing in absolutes here but the studies do show positive correlations.&lt;/p&gt;
&lt;h3&gt;Assertion 4: Skill acquisition is a major contributor to success in life&lt;/h3&gt;
&lt;p&gt;I don&apos;t have a study to back this one up. There do seem to be ones directly linking IQ, and I am hypothesizing this is due to the skills that a high IQ would allow you to quickly learn and master.&lt;/p&gt;
&lt;h3&gt;Assertion 5: EQ is dependent on IQ (or at least correlated)&lt;/h3&gt;
&lt;p&gt;So if EQ is made up of problem solving, perception, verbal communication and comprehension, and many other things along these lines it shouldn&apos;t be hard to accept that EQ correlates to general intelligence, which is what the science shows.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It seems reasonable then that there is a casual (or not so casual) relationship between IQ and EQ.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It therefore follows that IQ is a good indicator of either having high EQ or being able to quickly improve EQ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Life is messy and for all our advances we are still in the dark on a lot of the processes that operate in our brain. So this is not supposed to be a post saying that the smart are destined to succeed and the rest are just here to witness it. Far from it! Determination, creativity, compassion, and many other traits make us who we are and allow us to achieve great things.&lt;/p&gt;
&lt;p&gt;As a software developer though, stop telling me I don&apos;t need to work with smart people, just good communicators. It takes a lot to convince me that someone with poor people skills is smart. So stop making this a zero sum game. It is not. Or maybe it is and I am just not smart enough to realise it, and I am so poor at communicating I can&apos;t convince anyone otherwise.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.psych.utoronto.ca/users/reingold/courses/intelligence/cache/1198gottfred.html&quot;&gt;psych.utoronto.ca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://theconversation.com/what-chess-players-can-teach-us-about-intelligence-and-expertise-72898&quot;&gt;theconversation.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/publication/307874653_The_relationship_between_cognitive_ability_and_chess_skill_A_comprehensive_meta-analysis&quot;&gt;researchgate.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S1877042813017096&quot;&gt;sciencedirect.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.memory-key.com/research/news/correlation-between-emotional-intelligence-and-iq&quot;&gt;memory-key.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/yoda-wants-you-to-be-a-functional-programmer/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/yoda-wants-you-to-be-a-functional-programmer/"/>
    <title>Yoda wants you to be a functional programmer</title>
    <updated>2017-06-10T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/yoda-wants-you-to-be-a-functional-programmer/</uri>
    </author>
    <summary type="html">&lt;p&gt;This one is just for laughs but technical writing doesn&apos;t always have to be serious.&lt;br /&gt;
I was double checking a Yoda quote for my previous post and it got me thinking about how many Yoda quotes could be applied to the functional programming (FP) paradigm.&lt;br /&gt;
Star wars and programming are meant to go together.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Size matters not. Look at me. Judge me by my size, do you? Hmm? Hmm. And well you should not.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functional programming involves small building blocks of functions that you compose to make more specific functions and so on. The functions and the types tend to be small and stay small.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Do. Or do not. There is no try.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functions always return a value. No &lt;code&gt;void&lt;/code&gt; here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Much to learn you still have…my old padawan. This is just the beginning!” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;FP is a new paradigm. Learning a new paradigm is way harder than learning a new language. It is a very useful tool to have in your toolbox though.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Truly wonderful, the mind of a child is.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;When learning FP, don&apos;t bring your object-oriented baggage. Embrace that this is something different.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Always pass on what you have learned.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another reference (pun intended wink wink) to functions in FP always returning something.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Once you start down the dark path, forever will it dominate your destiny, consume you it will.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;This one was tough. Do I use this to represent that once you grok a paradigm and see it&apos;s merits, you can&apos;t unlearn that. I think instead this should be a warning against letting yourself think any one paradigm is the best or only one that matters (I am looking at OOP).&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Mind what you have learned. Save you it can.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;FP is a new paradigm and will make you a better developer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“You will find only what you bring in.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;In FP you don&apos;t usually store state. You pass along what you need in arguments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Attachment leads to jealously. The shadow of greed, that is.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;I could make a point here about storing state but I think it is more important to reiterate the warning about the dark side of being too attached to just one paradigm. Find balance in the force.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that&apos;s it for Yoda on functional programming. Hope it made you think and I hope it made you smile.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/productivity-tips-1/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/productivity-tips-1/"/>
    <title>Productivity Tips</title>
    <updated>2017-06-09T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/productivity-tips-1/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“Do. Or do not. There is no try.” - Yoda&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Time has become a precious commodity for me lately. Between management meetings, team meetings, and then actually trying to improve small things in process and code, it is easy to loose track of things. Even worse is that it is easy to loose track of what is important. So I am finding myself going back to some old habits that died off during different shifts in my career and apply many of them again.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Productivity tips&lt;/h1&gt;
&lt;p&gt;Most of these tips revolve around focus. When things get busy it is easy to loose focus and that is when productivity drops.&lt;/p&gt;
&lt;h2&gt;All the things&lt;/h2&gt;
&lt;p&gt;Ubiquitous capture. Write down anything that you aren&apos;t going to do now as soon as you become aware of it. An email comes in that you need to action. Capture it on your TODO list. Once it is down on paper, you are much less likely to worry about it and you can&apos;t forget about it.&lt;/p&gt;
&lt;h3&gt;How you capture&lt;/h3&gt;
&lt;p&gt;The list. How you capture is less important than being consistent. When trying out things I find todo lists can actually make things worse for a while before they become better. The reason for this is I am not capturing in a single place. Trying to minimize the number of mediums you use to capture tasks is important. I tried and like the idea of a notebook but I just didn&apos;t carry it around enough. I have settled on &lt;a href=&quot;https://todoist.com&quot;&gt;Todoist&lt;/a&gt; because I can have it open on my laptop and my phone. It also has integrations with tools I use like Slack. I will discuss this a bit more in the next section. Start off simple. Don&apos;t have too many categories/projects etc. Just capture everything that comes in.&lt;/p&gt;
&lt;h3&gt;Revue and rate&lt;/h3&gt;
&lt;p&gt;Go over your list often and prioritize it. Make sure you are doing the most important things first. Creating a habit of going through your list every morning will make sure it is current as well as keep in mind the most important things only.&lt;/p&gt;
&lt;h2&gt;Remind me&lt;/h2&gt;
&lt;p&gt;Set reminders if you need to. I use bots in Slack to remind me to do things at specific times. I also use it to remind others. Just be careful of information overload. If you use it too prolifically people will start to ignore the reminders, especially if it is for things they don&apos;t find too important.&lt;/p&gt;
&lt;h2&gt;Pomodoro&lt;/h2&gt;
&lt;p&gt;Many people find the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Pomodoro Technique&lt;/a&gt; really useful. It is especially useful when you have lots of little things that can distract you. Switching focus often can kill productivity so committing to spend at least a little time focused on one thing can make a huge difference. I use an app called &lt;a href=&quot;http://tide.moreless.io/en/&quot;&gt;Tide&lt;/a&gt; that does the job for me. It has a timer and can play music or white noise. This is perfect for when working in a noisy environment. As I write this I am in a noisy cafe but am listening to birds chirping, which I find less distracting than multiple conversations, moving chairs, and clinking cups.&lt;/p&gt;
&lt;h2&gt;Clear your mind&lt;/h2&gt;
&lt;p&gt;Meditation has a bad reputation among many people as the pastime of hippies and mystics but it is a useful skill to develop for those who value focus and clarity of thought. There are many practices you can use to achieve different things. I will briefly touch on a few that I use. There are many others and I encourage you to explore the options. I will mention some resources at the end of this section where you can start. Also note that I will only talk from my experience so what I write might not be 100% what you might find out in the wild, or even what you may experience yourself. Meditation is about as personal as it gets as it is your consciousness observing itself.&lt;/p&gt;
&lt;h3&gt;Focused attention&lt;/h3&gt;
&lt;p&gt;Here you focus on something in an effort to still your monkey mind. This isn&apos;t an evolutionary reference but more a comment on how our mind works. Just observe your inner monologue and attention as you read this. &amp;quot;What is this guy on about? Meditaiton! Really?&amp;quot;, &amp;quot;Maybe I should try this?&amp;quot;, &amp;quot;Can I move things with my mind?&amp;quot;, &amp;quot;It seems really boring... I could do other things...I need to go to the shops... do I have milk in the fridge...&amp;quot;. And so our mind goes on ceaselessly. We usually about as in control of our thoughts as a leaf in a river.&lt;/p&gt;
&lt;p&gt;So in focused attention I focus on my breath. First I scan through my body and try release any tension felt with each out breath. As the mind goes off I bring it back to the breath and just focus on the up and down. The sensation around my nostrils. Sometimes I only hold my attention for a few seconds before it goes off again for a few minutes on some train of thought. When you realise you bring it back to the breath, and try again. This isn&apos;t a fight you are trying to win. You are just slowly training the brain to focus on what you want it to focus on. Not only that, your brain and your body will appreciate the moments of peace where you are not lost in thought.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Benefits: Increase mental focus, relax the body, decrease stress&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Loving kindness&lt;/h3&gt;
&lt;p&gt;Loving kindness is a technique for developing compassion for yourself and the people around you. This can have a profound impact on how you treat yourself and others.&lt;/p&gt;
&lt;p&gt;As I near the end of my meditation I spend a few minutes cycling through the people in my life. I start with those most beloved to me and move out to colleagues and acquaintances, and eventually just general humanity. I visualize the person, or people (hard for all of humanity), and try generate feelings of compassion toward them while repeating the phrase &amp;quot;I am grateful for person X. I wish them peace, happiness, and freedom from suffering&amp;quot;. That is it!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Benefits: Increase compassion for others, increase personal well-being, mend and tend relationships&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Appreciation&lt;/h3&gt;
&lt;p&gt;I tend to lump this one in with my loving kindness but it is a distinct practice. After being appreciative of the people in my life I also make a point of reminding myself of other things I have to be appreciative of such as things, opportunities, and health.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Benefits: Peace and happiness&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Resources for meditation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.samharris.org/podcast/item/mindfulness-meditation&quot;&gt;Sam Harris has some guided meditation recordings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.headspace.com/register&quot;&gt;Headspace is a subscription service to teach meditation but has a 10 day trial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.audible.com/pd/Self-Development/Practicing-Mindfulness-An-Introduction-to-Meditation-Audiobook/B00DDVQQLA/&quot;&gt;Practicing Mindfulness audible book from The Great Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.audible.com/pd/Self-Development/The-Science-of-Mindfulness-Audiobook/B00MEQRUG0/&quot;&gt;The Science of Mindfulness audible book from The Great Courses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Calendar blocks&lt;/h2&gt;
&lt;p&gt;This is a real simple one but it can be very helpful to block time in your calendar to do specific important tasks. This is useful if your calendar can quickly fill up with meeting requests. I block time to just be available for my team as well as for specific tasks.&lt;/p&gt;
&lt;p&gt;Another little tip is to not accept meetings until you have been furnished with an agenda. This allows you to determine whether you really are the best person to be at that meeting, or if invitees are missing.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Although I stated productivity comes down to focus, we explored how to increase it from multiple prongs. Techniques and tips, training, and tools. Use what works for you but please try give all of them an honest try. I would love to hear what you use to keep focused. Please let me know in the comments below.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/agile-is-a-characteristic/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/agile-is-a-characteristic/"/>
    <title>Agile is a Characteristic</title>
    <updated>2017-03-22T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/agile-is-a-characteristic/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pragdave.me/blog/2014/03/04/time-to-kill-agile.html&quot;&gt;Agile is dead&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I see more and more posts and talks claiming that Agile is dead. Broad statements like this are obviously just for effect but even if just click-bait, the sentiment is coming from somewhere. In this post I dig into reasons to say this and why we can still have hope.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Agile is dead&lt;/h1&gt;
&lt;p&gt;Let&apos;s take a look at the ways it dies and why it can never truly die.&lt;/p&gt;
&lt;h2&gt;Still-born&lt;/h2&gt;
&lt;p&gt;So sometimes agile was never alive at a company anyway. I have walked into companies where they declare to me &amp;quot;We tried Agile and it doesn&apos;t work&amp;quot;, or just &amp;quot;Agile sucks!&amp;quot;. When you drill into what they actually did though, agility was never there. They had no process, and no way of improving the process. They knew they needed something. So they slapped the word &amp;quot;Scrum&amp;quot; on what they did. Occasionally they had a standup where people would stand up and look at their toes, and then go about their business as usual. Agile never drew it&apos;s first breath here...&lt;/p&gt;
&lt;h2&gt;Lemmings&lt;/h2&gt;
&lt;p&gt;Some young team hears about this new shiny thing that all the cool companies are doing, they grab a bunch of processes off a website and the start applying them. No matter that they don&apos;t know why. No matter that there are only 2 developers. They slog through for months but eventually it fades out because they don&apos;t see any value. They tried the processes without understanding the spirit of it. Hell it&apos;s not the spirit of the word... it is the actual word... Agile.&lt;/p&gt;
&lt;p&gt;Another flavour here is teams that actually implement SCRUM by the book. They experience moderate success and so they double down on the processes. Soon the processes become an institution unto themselves. Recipes to be applied rather than a gifted chef tasting and experimenting with a dish.&lt;/p&gt;
&lt;p&gt;Agile has become a label now to be stuck on things like tags at an estate sale. The Sprint has changed from a fluffy cushion that protects the developers to the Great Wall of China, keeping the stakeholders out. Demos are immovable institution that represent the success or failure of a team. And cancelling a sprint because requirements have changed becomes anathema to the Agile adherents as they follow their rituals off the cliff... or is that a waterfall?&lt;/p&gt;
&lt;h2&gt;Darwin award&lt;/h2&gt;
&lt;p&gt;Large companies struggle to overcome the inertia required to change to agile processes. Even if a development department manages to adopt, if the whole company doesn&apos;t evolve to the new way of working, the initiative is doomed to die. Not only will it die but all those involved will develop a distrust for the agile initiative. Buy in from all levels of stakeholders (decision makers, middle management, developers, etc.) is important before you even start.&lt;/p&gt;
&lt;h2&gt;Immortal&lt;/h2&gt;
&lt;p&gt;So why do I believe agile will never die? At it&apos;s core, agility is a characteristic of the team developing a product, not the processes they adopt to do that. And at the core of software development is what got us to the point that software development is even a thing. Adaptability. Evolution. It is why we went from hiding in a cave from predators stronger and faster than us to the dominant animal on the planet. More than any other animal on the planet we can look at our situation and we can improve it. Then we look at it and we improve it again. Sometimes we fail. Sometimes badly. Over the long game though we have trended to improvement. Although we borrow much from other production disciplines, ours is but an infant. And unless we fail morally and bring forth Skynet... we are going to grow up and get better. It is determined. It is in our genes...&lt;/p&gt;
&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S0164121216300826&quot;&gt;Challenges and success factors for large-scale agile transformations: A systematic literature review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/aspect-rating/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/aspect-rating/"/>
    <title>Aspect Rating</title>
    <updated>2017-03-21T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/aspect-rating/</uri>
    </author>
    <summary type="html">&lt;p&gt;I recently ran a retrospective with a team of 11 (including myself). With that many people getting focused feedback is important or meetings can drag out. I found this exercise quite useful and the rest of the team seemed to as well. See &lt;a href=&quot;/check-in-check-out&quot;&gt;this post for the Check-in/Check-out&lt;/a&gt; I ran before and after.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;The first step is measure&lt;/h1&gt;
&lt;p&gt;The idea is simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put some aspects of team interaction along the top of the board or wall. I used the following and I suggest this order (see Analysis for why):
&lt;ul&gt;
&lt;li&gt;Direction&lt;/li&gt;
&lt;li&gt;Progress&lt;/li&gt;
&lt;li&gt;Process&lt;/li&gt;
&lt;li&gt;Team work&lt;/li&gt;
&lt;li&gt;Learning&lt;/li&gt;
&lt;li&gt;Enthusiasm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Draw an arrow up, labelling the bottom 1 and the top 5 (see image below)&lt;/li&gt;
&lt;li&gt;Ask the team to put their name on 6 post-its&lt;/li&gt;
&lt;li&gt;Explain that they need to put 1 post-it under each aspect rating that aspect of the team&lt;/li&gt;
&lt;li&gt;Discuss&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;/img/posts/2017/aspect-rating.jpg&quot; alt=&quot;Aspect Rating Example&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;em&gt;Aspect Rating board: Note the order is different to my recommendations&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What you want to focus on next is up to you. Be sure to celebrate the good but depending on the state of the team you may not want to spend too much time on it. We had 1 hour and we needed 5 to 10 minutes for the &lt;a href=&quot;/check-in-check-out&quot;&gt;Check-in/Check-out&lt;/a&gt;. We then spent some time celebrating the good by allowing people to explain why they voted for those items.&lt;/p&gt;
&lt;p&gt;My suggestion at this point is to focus on the lowest one from here and work your way up, time permitting. Unless something is systemically wrong with the team there should be quick wins to raise things that are a 1.&lt;/p&gt;
&lt;p&gt;If things degenerate into technical discussions interject and ask to take it offline.&lt;/p&gt;
&lt;h2&gt;Aspects&lt;/h2&gt;
&lt;p&gt;Let&apos;s walk through what each aspect is in case this isn&apos;t clear from the label.&lt;/p&gt;
&lt;h3&gt;Direction&lt;/h3&gt;
&lt;p&gt;This is the direction of the team. Do they know what they are building? Do they know why they are building it? Do they know how they are going to build it?&lt;/p&gt;
&lt;h3&gt;Progress&lt;/h3&gt;
&lt;p&gt;How does the team rate its progress in building what it should be building? This comes after direction because if you don&apos;t know what you are building you are unlikely to feel like you are progressing toward it. This project in particular had a rocky start due to a dependence on an external party, so direction was low. Feelings of progress varied based on whether a team member was focusing on infrastructure or feature implementation.&lt;/p&gt;
&lt;h3&gt;Process&lt;/h3&gt;
&lt;p&gt;Here you are trying to find out the team&apos;s buy in to a process or feelings that the process is lacking. Again, the direction contributed but with a new team I was introducing processes as the team requested them. This is usually not a good idea unless you have an experienced agile team who are capable of raising issues proactively and self-organsing. Although a newly formed team it is comprised of experienced members so this was low risk.&lt;/p&gt;
&lt;h3&gt;Team work&lt;/h3&gt;
&lt;p&gt;How well does the team feel it is collaborating? Are they pair-programming? Are they stepping on each others toes? Are they aware of what each team member is doing? It was mentioned to me by &lt;a href=&quot;https://www.erikheemskerk.nl/&quot;&gt;a very astute team member&lt;/a&gt; that teamwork is very difficult, if not impossible, to get right if the team does not have clear direction. See my &lt;a href=&quot;/big-agile-teams&quot;&gt;post on big agile teams&lt;/a&gt; for some ideas of facilitating team communication.&lt;/p&gt;
&lt;h3&gt;Learning&lt;/h3&gt;
&lt;p&gt;Is the team challenged? Are they learning new things? This is important for cultivating an autonomous, self organising team as well as for enthusiasm.&lt;/p&gt;
&lt;h3&gt;Enthusiasm&lt;/h3&gt;
&lt;p&gt;Are team members excited to come to work? Excited to work on the project/product? Happy to work together? This forms a symbiotic relationship with all the others and will go down if any of the others stay down and when it does go down, all the others will drop even faster from the feedback effect. It is the canary, so watch it well.&lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;This was from the team&apos;s first retrospective and as mentioned the direction was shaky from the start, so this was actually better than expected from a young team (with experienced members). If anything surprises you be sure to spend a large amount of time drilling into what is going on there. From this retrospective we implemented a few more process items that showed immediate benefit. I cannot stress the significance of this enough.&lt;/p&gt;
&lt;p&gt;The team identified a problem, and an agile process (think demo, refinement, etc.) was introduced because the pain was felt and a balm was applied. How many things do you do and care about in your life that have no benefit to you or anyone you care about? Why should development be any different? Only solve problems that exist. Before Agile was a label, &lt;a href=&quot;agile-is-a-characteristic&quot;&gt;agile was a characteristic&lt;/a&gt; of a team.&lt;/p&gt;
&lt;img src=&quot;/img/posts/2017/aspect-rating-2017-03-17.jpg&quot; alt=&quot;Aspect Rating Chart&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;em&gt;Aspect Rating analysis&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Great snapshot of the team&apos;s perception of itself&lt;/li&gt;
&lt;li&gt;Identify things to celebrate&lt;/li&gt;
&lt;li&gt;Identify problem areas and provide a forum to start discussing&lt;/li&gt;
&lt;li&gt;Seemed to eliminate personal rants and every team member repeating the same thing that often seems to happen with some other formats&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bottom line is that it really focuses the discussion into narrow, helpful, actionable bands.&lt;/p&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It really focuses the discussion into narrow, helpful, actionable bands. Sometimes you want to generate more free form discussion or drill into technical details or inter-personal conflicts within the team. I can&apos;t say for sure but this does not seem suited.&lt;/li&gt;
&lt;li&gt;The team really needs to get involved in discussing the aspects or this is going to be a very short meeting&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think I will be using this regularly to document the teams progression on these aspects. I won&apos;t use it every retrospective but maybe every 2nd or 3rd. As this is something new I am experimenting with so please note that this is early stage beta so take it with a pinch of salt. I will try report back with more data once I have more. Did you find this useful? Do you have your own methods that you use regularly for retrospectives that gives you measurable insight? Let me know in the comments below.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/big-agile-teams/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/big-agile-teams/"/>
    <title>Big Agile Teams</title>
    <updated>2017-03-20T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/big-agile-teams/</uri>
    </author>
    <summary type="html">&lt;p&gt;As a team grows it becomes more difficult to apply some agile practices effectively. SCRUM meetings like standup and retrospectives become drawn out, the number of stories becomes hard to manage, and the communication within the team can easily break down.&lt;br /&gt;
Currently I have a team of 10 and I am experimenting with ways of tackling these issues. Hopefully this will turn into a loose series of posts surrounding my experiences with a larger team. I won&apos;t go into the why suffice to say it is a project rather than a product but we don&apos;t want to go waterfall.&lt;/p&gt;
&lt;h1&gt;Big team tactics&lt;/h1&gt;
&lt;p&gt;Most of these tactics focus on communication of what the team is working on but there are a few process items. Some of these tactics are taken from previous smaller teams and are by no means only for large teams. By the time you have 9+ people social bonding, communication, and working memory are all suffering so these need to be focused on.&lt;/p&gt;
&lt;h2&gt;Cells&lt;/h2&gt;
&lt;p&gt;The team is broken up into 2s. These 2 developers are responsible for keeping eachother abreast of their own progress. This is more than just an informal pairing. If possible they work in related areas. They are preferred for peer review and pair-programming. Most notably they are responsible for reporting progress for each other at the standup. See next point for details...&lt;/p&gt;
&lt;h2&gt;Developers are chickens too&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A Pig and a Chicken are walking down the road.&lt;br /&gt;
The Chicken says: &amp;quot;Hey Pig, I was thinking we should open a restaurant!&amp;quot;&lt;br /&gt;
Pig replies: &amp;quot;Hm, maybe, what would we call it?&amp;quot;&lt;br /&gt;
The Chicken responds: &amp;quot;How about &apos;ham-n-eggs&apos;?&amp;quot;&lt;br /&gt;
The Pig thinks for a moment and says: &amp;quot;No thanks. I&apos;d be committed, but you&apos;d only be involved.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cell members alternate between being &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Chicken_and_the_Pig&quot;&gt;chickens and pigs&lt;/a&gt;. At a standup only the pigs report on progress but will do it for the fellow cell chicken. This keeps everyone informed but the number of active participants smaller. Not only that but the nominated pig needs to at least understand what the chicken did well enough to explain it. Hat-tip to the Feynman Technique ;)&lt;/p&gt;
&lt;h2&gt;Present the plan&lt;/h2&gt;
&lt;p&gt;Before implementing a complete story developers are encouraged to discuss how they will be implementing a given story before implementation is underway (or very far). This gives others a chance to weigh in on the implementation details and bubble up any hidden knowledge or pitfalls. I suggest a regular prompt for this, possibly straight after standup.&lt;/p&gt;
&lt;h2&gt;Technical demos&lt;/h2&gt;
&lt;p&gt;This is not a stakeholder demo. Plan regular (2 weeks seems good) demos where the developers can deep-dive on what they have been working on with the others in a bit more of a formal way. One or two slides, some live demos of code and functionality, and a Q&amp;amp;A afterward.&lt;/p&gt;
&lt;h2&gt;Dedicated learning time&lt;/h2&gt;
&lt;p&gt;It is easy for people to get lost in the group and fall behind and as a team lead it is difficult to spend time with everyone. Dedicating a regular afternoon to discussing new technologies or methodologies is good for moral as well as raising the skills of the team.&lt;/p&gt;
&lt;h2&gt;Socialize&lt;/h2&gt;
&lt;p&gt;Getting the team to bond is even more important when it is bigger. Lunching together, non-work activities, or even retrospectives can help bring together. A focus on sharing feelings at points in the retrospective can help others understand how others they are not close to in the team are feeling.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope some of these suggestions are helpful and if you have any of your own please let me know in the comments below. These are all a work in progress and I will hopefully report back in a later post.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/check-in-check-out/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/check-in-check-out/"/>
    <title>Check-in and Check-out</title>
    <updated>2017-03-20T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/check-in-check-out/</uri>
    </author>
    <summary type="html">&lt;p&gt;Someone must have thought of this before but I have not read this anywhere so I thought I would jot it down. I recently ran a retrospective that I thought went really well, and apparently so did everyone else...&lt;/p&gt;
&lt;h1&gt;Measure with Check-in and Check-out&lt;/h1&gt;
&lt;p&gt;if you don&apos;t measure something how can you know if it improving? It is a staple of development so why shouldn&apos;t we apply it to our meetings as well. It is really easy.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the start of the retrospective ask everyone to write down a single word (or phrase) that sums up there feeling about how things are going&lt;/li&gt;
&lt;li&gt;Ask if anyone would like to share what they wrote down (can be more than one or even everybody)&lt;/li&gt;
&lt;li&gt;Do your retrospective&lt;/li&gt;
&lt;li&gt;Repeat step 1 at the end of the retrospective and see if anything changed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Easy!&lt;/p&gt;
&lt;img src=&quot;/img/posts/2017/check-in-out.jpg&quot; alt=&quot;Check-in-Check-out&quot; class=&quot;img-thumbnail&quot;&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/better-error-handling/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/better-error-handling/"/>
    <title>Better error handling</title>
    <updated>2017-03-19T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/better-error-handling/</uri>
    </author>
    <summary type="html">&lt;p&gt;In my &lt;a href=&quot;/honest-return-types&quot;&gt;previous post&lt;/a&gt; I discussed handling &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;Exception&lt;/code&gt; in the return type. In this post I will discuss returning logic errors.&lt;/p&gt;
&lt;h1&gt;Handling errors&lt;/h1&gt;
&lt;p&gt;There are times when valid errors can occur but are not exceptional. Validation is a common example of this and where a validation result is often the go to type. Wouldn&apos;t it be nice if we could apply the same pattern as with exceptions?&lt;/p&gt;
&lt;h2&gt;Either: Errors or no errors&lt;/h2&gt;
&lt;p&gt;Functional languages define a type with the following form: &lt;code&gt;Either&amp;lt;Left, Right&amp;gt;&lt;/code&gt;. &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; can be anything but in the case of error handling &lt;code&gt;Left&lt;/code&gt; is the unhappy path and &lt;code&gt;Right&lt;/code&gt; is the happy path. Let&apos;s assume we have an &lt;code&gt;Error&lt;/code&gt; type for representing errors that occurred, then using &lt;code&gt;Either&lt;/code&gt; to represent error handling could look something like this: &lt;code&gt;Either&amp;lt;IEnumerable&amp;lt;Error&amp;gt;, T&amp;gt;&lt;/code&gt;. &lt;code&gt;Error&lt;/code&gt; has an implicit conversion to &lt;code&gt;string&lt;/code&gt; so let&apos;s work with &lt;code&gt;string&lt;/code&gt; for demonstration purposes below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;Func&amp;lt;int, int, Either&amp;lt;IEnumerable&amp;lt;string&amp;gt;, int&amp;gt;&amp;gt; divide =
    (i, d) =&amp;gt;
    {
        if (d == 0)
            return List(&amp;quot;Cannot divided by zero.&amp;quot;);

        return (i / d);
    };

Either&amp;lt;IEnumerable&amp;lt;string&amp;gt;, int&amp;gt; divideByZeroResult = divide(1, 0);
divideByZeroResult.Match(
    Left: errors =&amp;gt; errors.ToList().ForEach(x =&amp;gt; Console.WriteLine(x)),
    Right: i =&amp;gt; Console.WriteLine($&amp;quot;Answer is {i}&amp;quot;)
);
//Cannot divide by zero.

Either&amp;lt;IEnumerable&amp;lt;string&amp;gt;, int&amp;gt; twoResult = divide(4, 2);
twoResult.Match(
    Left: errors =&amp;gt; errors.ToList().ForEach(x =&amp;gt; Console.WriteLine(x)),
    Right: i =&amp;gt; Console.WriteLine($&amp;quot;Answer is {i}&amp;quot;)
);
//Answer is 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works great but &lt;code&gt;Either&amp;lt;IEnumerable&amp;lt;string&amp;gt;, int&amp;gt;&lt;/code&gt; is quite a verbose return type definition. If we know we are always going to use &lt;code&gt;IEnumerable&amp;lt;string&amp;gt;&lt;/code&gt; as &lt;code&gt;Left&lt;/code&gt; why not specify that in the type? Before we do that, we are going to take a quick dive into some functional programming ideas.&lt;/p&gt;
&lt;h2&gt;Functional side-bar&lt;/h2&gt;
&lt;p&gt;Lets go through a couple concepts that will come up. Hopefully you read the previous post that introduced &lt;em&gt;Elevated types&lt;/em&gt;. Here I will quickly go through working with elevated types.&lt;/p&gt;
&lt;h3&gt;Return: To the world of elevated types&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Return&lt;/em&gt; is raising to the world of elevated types. You have already seen examples of return already in this post. &lt;code&gt;Some&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; for &lt;code&gt;Either&amp;lt;L, R&amp;gt;&lt;/code&gt; are just some &lt;em&gt;return&lt;/em&gt; operations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;//return - elevate an int to Option&amp;lt;int&amp;gt;
Option&amp;lt;int&amp;gt; optInt = Option&amp;lt;int&amp;gt;.Some(1);
// Some(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Apply - just this part&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Apply&lt;/em&gt; unpacks a function and applies the first argument then returns an elevated function representing the result.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;//apply
Func&amp;lt;int, int, int&amp;gt; add = (a, b) =&amp;gt; a + b;//function 
Option&amp;lt;int&amp;gt; addOpt = Some(add);//elevate function

var increment = addOpt.Apply(1) ;//apply: b =&amp;gt; 1 + b
increment.Apply(5);
// Some(6)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Map: ol&apos; switch-a-roo&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Map&lt;/em&gt; applies the function to the value contained in the elevated value and returns the elevated result. In C# terms &lt;em&gt;Map&lt;/em&gt; like LINQ&apos;s &lt;code&gt;Select&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;Func&amp;lt;int, string&amp;gt; intToString = (i) =&amp;gt; i.ToString();
Option&amp;lt;int&amp;gt; optInt = Option&amp;lt;int&amp;gt;.Some(1);
//map - apply function to inner value
Option&amp;lt;string&amp;gt; optString = optInt.Map(intToString);
// Some(&amp;quot;1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Bind: functions in the darkness&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;... and in the darkness bind them&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sorry that was a Lord of the Rings reference. My 2nd name is legally Aragorn (from birth), I didn&apos;t stand a chance...&lt;br /&gt;
&lt;em&gt;Bind&lt;/em&gt; allows you to compose (bind) functions in an elevated world. It is analogous to &lt;code&gt;SelectMany&lt;/code&gt; from LINQ fame.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;Func&amp;lt;string, Option&amp;lt;int&amp;gt;&amp;gt; ifEvenInt = (s) =&amp;gt;
{
    if (int.TryParse(s, out int i))
    {
        return (i % 2 == 0) ? Some(i) : None;
    }
    else
    {
        return None;
    }
};

Func&amp;lt;int, Option&amp;lt;int&amp;gt;&amp;gt; doubleIt = (i) =&amp;gt; Some(i * 2);
Func&amp;lt;int, Option&amp;lt;int&amp;gt;&amp;gt; exp = (i) =&amp;gt; Some(i * i);

Option&amp;lt;string&amp;gt; optString = optInt.Map(&amp;quot;2&amp;quot;);

//bind - passes inner value to a function that returns an elevated result
Option&amp;lt;int&amp;gt; eventResult = optString.Bind(ifEvenInt);
// used to combine elevated functions
var worked = eventResult
    .Bind(doubleIt)
    .Bind(exp);
// Some(16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we changed &amp;quot;2&amp;quot; to &amp;quot;1&amp;quot; the output would be &lt;code&gt;None&lt;/code&gt; since &lt;code&gt;ifEvenInt&lt;/code&gt; would return &lt;code&gt;None&lt;/code&gt; which would short-circuit all the &lt;code&gt;Bind&lt;/code&gt; calls.&lt;/p&gt;
&lt;h2&gt;Match: what goes up must come down&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Match&lt;/em&gt; is the yin to &lt;em&gt;Return&lt;/em&gt;&apos;s yang. Where &lt;em&gt;Return&lt;/em&gt; operations elevate values to the elevated world, &lt;em&gt;Match&lt;/em&gt; drops an elevated value back to the real world.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;//match
Option&amp;lt;int&amp;gt; optInt = Option&amp;lt;int&amp;gt;.Some(1);
optInt.Match(
    Some: x =&amp;gt; Console.WriteLine(x),
    None: () =&amp;gt; Console.WriteLine(&amp;quot;Nothing&amp;quot;)
);
// 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we can get to the elevated world, do what we need to do and then return back through the cupboard, let us get back to the business at hand. Validation!&lt;/p&gt;
&lt;h2&gt;Validation: Your result (might have errors)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You can find the &lt;code&gt;Validation&lt;/code&gt; type in &lt;a href=&quot;https://github.com/dburriss/HonestTypes#return-types&quot;&gt;HonestTypes.Returns&lt;/a&gt; package&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So let&apos;s define a type &lt;code&gt;Validation&amp;lt;T&amp;gt;&lt;/code&gt; that is &lt;code&gt;Either&amp;lt;IEnumerable&amp;lt;Error&amp;gt;, T&amp;gt;&lt;/code&gt;? That would remove some of the verbosity of the return type as well as give a clearer semantic to the type name.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;using static F;

public Validation&amp;lt;Person&amp;gt; Validate(Person person)
{
    if (person == null)
        return Error(&amp;quot;Person is null&amp;quot;);

    //short circuit on error
    return Valid(person)
        .Bind(ValidateFirstNames)
        .Bind(ValidateLastName)
        .Bind(ValidateEmail);
}

private Validation&amp;lt;Person&amp;gt; ValidateFirstNames(Person person)
{
    if (string.IsNullOrWhiteSpace(person.FirstNames))
        return Invalid(Error($&amp;quot;{nameof(person.FirstNames)} cannot be empty&amp;quot;));

    return person;
}

private Validation&amp;lt;Person&amp;gt; ValidateLastName(Person person)
{
    if (string.IsNullOrWhiteSpace(person.LastName))
        return Invalid(Error($&amp;quot;{nameof(person.LastName)} cannot be empty&amp;quot;));

    return person;
}

private Validation&amp;lt;Person&amp;gt; ValidateEmail(Person person)
{
    if (string.IsNullOrWhiteSpace((string)person.Email))
        return Invalid(Error($&amp;quot;{nameof(person.Email)} cannot be empty&amp;quot;));

    return person;
}

//usage
var validatedPerson = service.Validate(person);

validatedPerson.Match(
    Valid: p =&amp;gt; Console.WriteLine($&amp;quot;{p.LastName}, {p.FirstNames} &amp;lt;{p.Email}&amp;gt;&amp;quot;),
    Invalid: err =&amp;gt; err.ToList().ForEach(x =&amp;gt; Console.WriteLine(x.Message))
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above uses &lt;code&gt;Bind&lt;/code&gt; and short-circuits on the first error. This might not be the desired behaviour. What if we want to check all validations? Here is a version that does that...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public Validation&amp;lt;Person&amp;gt; Validate(Person person)
{
    if (person == null)
        return Error(&amp;quot;Person is null&amp;quot;);

    //collect all errors
    return Valid(Person.Create)
        .Apply(ValidateFirstNames(person.FirstNames))
        .Apply(ValidateLastName(person.LastName))
        .Apply(ValidateEmail(person.Email));
}

Func&amp;lt;FirstNames, Validation&amp;lt;FirstNames&amp;gt;&amp;gt; ValidateFirstNames =&amp;gt; firstNames =&amp;gt;
{
    if (string.IsNullOrWhiteSpace(firstNames))
        return Invalid(Error($&amp;quot;{nameof(firstNames)} cannot be empty&amp;quot;));

    return firstNames;
};

Func&amp;lt;LastName, Validation&amp;lt;LastName&amp;gt;&amp;gt; ValidateLastName =&amp;gt; lastName =&amp;gt;
{
    if (string.IsNullOrWhiteSpace(lastName))
        return Invalid(Error($&amp;quot;{nameof(lastName)} cannot be empty&amp;quot;));

    return lastName;
};

Func&amp;lt;Email, Validation&amp;lt;Email&amp;gt;&amp;gt; ValidateEmail =&amp;gt; email =&amp;gt;
{
    if (string.IsNullOrWhiteSpace((string)email))
        return Invalid(Error($&amp;quot;{nameof(email)} cannot be empty&amp;quot;));

    return email;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code uses &lt;code&gt;Apply&lt;/code&gt; and is applicative so all errors are returned. Notice how the return result is actually a &lt;code&gt;Func&lt;/code&gt; that performs the validation.&lt;/p&gt;
&lt;p&gt;if you don&apos;t like the &lt;code&gt;Func&lt;/code&gt; style you can continue to use the &lt;code&gt;Bind&lt;/code&gt; syntax but with the applicative nature using &lt;code&gt;Validation&lt;/code&gt; types &lt;code&gt;Join&lt;/code&gt; method...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;//collect all errors
return Valid(person)
    .Join(ValidateFirstNames(person))
    .Join(ValidateLastName(person))
    .Join(ValidateEmail(person));
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And there you have some neat validation logic. If you have any comments or suggestions please leave them below. If you found this useful, please share it with someone who you think might also find it useful.&lt;/p&gt;
&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/elevated-world/&quot;&gt;Elevated world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/rop/&quot;&gt;Railway oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/honest-return-types/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/honest-return-types/"/>
    <title>Honest Return Types</title>
    <updated>2017-03-14T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/honest-return-types/</uri>
    </author>
    <summary type="html">&lt;p&gt;In &lt;a href=&quot;/honest-arguments&quot;&gt;Part 1&lt;/a&gt; we looked at ways of making your code more descriptive by using custom types instead of simple types like &lt;code&gt;string&lt;/code&gt;. In this article we will look at what your return type can tell you about a method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Updated: 19 March 2017&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h1&gt;Honest Return Types&lt;/h1&gt;
&lt;p&gt;For most of this post let us build on the example of a &lt;code&gt;Person&lt;/code&gt; repository. We are not going to dive into implementation but instead focus on the descriptiveness of the return type. Our starting point is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public interface IQueryPerson
{
    Person Get(Email email);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The return type should be honest about what can happen when you call a method. Does this repository method return &lt;code&gt;null&lt;/code&gt; if no record is found? Does it throw and exception? Does it return a &lt;a href=&quot;https://martinfowler.com/eaaCatalog/specialCase.html&quot;&gt;special case&lt;/a&gt; subtype? Wouldn&apos;t it be nice if your return type could tell you this instead of you having to dig into the implementation to find out.&lt;/p&gt;
&lt;p&gt;My 2 criteria are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A return type should be really descriptive of what the possible outcomes are&lt;/li&gt;
&lt;li&gt;The interface for interacting with a type should make it difficult for developers to do the wrong thing&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Result: A first try&lt;/h2&gt;
&lt;p&gt;One solution is a &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt; or some such flavour. It might look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class Result&amp;lt;T&amp;gt;
{
    public T Value { get; set; }
    public bool IsSuccess { get; set; }
    public IEnumerable&amp;lt;string&amp;gt; Errors { get; set; }
    public Result()
    {
        Errors = new List&amp;lt;string&amp;gt;();
    }

    public Result(T value)
    {
        if(value == null)
        {
            IsSuccess = false;
        }
        else
        {
            IsSuccess = true;
            Value = value;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This could be written in slightly different ways, with error codes instead of string for Errors, or even &lt;code&gt;Exception&lt;/code&gt;. Let&apos;s discuss the pros and cons of this.&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It does acknowledge that something could go wrong&lt;/li&gt;
&lt;li&gt;Can return some error and state information without throwing an exception (read unexplicit &lt;code&gt;goto&lt;/code&gt; statement)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It is not descriptive about what represents a failure&lt;/li&gt;
&lt;li&gt;Value can be accessed without checking for success&lt;/li&gt;
&lt;li&gt;The type doesn&apos;t convey whether &lt;code&gt;null&lt;/code&gt; could still be a valid value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it is something but doesn&apos;t really fulfill either of my criteria very well. We are going to have to take a quick sidebar and talk about representing &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt; doesn&apos;t tell us whether we should expect &lt;code&gt;T&lt;/code&gt; to be &lt;code&gt;null&lt;/code&gt; and whether that is valid.&lt;/p&gt;
&lt;h2&gt;Functional side-bar&lt;/h2&gt;
&lt;p&gt;In functional terms an elevated type is like a wrapper. It is a higher level of abstraction that allows us to work with the type in a predictable way. &lt;code&gt;IEnummerable&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Exception&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Either&amp;lt;L. R&amp;gt;&lt;/code&gt;, &lt;code&gt;Validation&amp;lt;T&amp;gt;&lt;/code&gt; are all examples of elevated types.&lt;/p&gt;
&lt;h2&gt;Option: &lt;code&gt;null&lt;/code&gt; is None&lt;/h2&gt;
&lt;p&gt;&amp;quot;It depends&amp;quot; is something you hear a lot in development, and wouldn&apos;t it be great if a type conveyed this? &lt;code&gt;Option&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt; are types often found in more functional languages that highlight the fact that a value could not be present. It allows you to say that there is &lt;code&gt;Some&lt;/code&gt; value, or the value is &lt;code&gt;None&lt;/code&gt;. This is probably easier to demonstrate...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am using &lt;a href=&quot;https://github.com/louthy/language-ext&quot;&gt;LanguageExt&lt;/a&gt; to get some more functional types. This one is mature and fully featured but pick whatever works for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public Option&amp;lt;Person&amp;gt; Get(Email email)
{
    Person person = QueryByEmail(email);//person could be null if no matching email found in the datasource
    return person;
}

//usage example
var person1 = personRepository.Get(email);

//print out last name if person was found otherwise print &amp;quot;Nobody&amp;quot;
person1.Match(
    Some: p =&amp;gt; Console.WriteLine(p.LastName),
    None: () =&amp;gt; Console.WriteLine(&amp;quot;Nobody&amp;quot;)
);

//return fullname or Nobody if no one was found
var person1Name = person1.Match(
    Some: p =&amp;gt; $&amp;quot;{p.FirstNames} {p.LastName}&amp;quot;,
    None: () =&amp;gt; &amp;quot;Nobody&amp;quot;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The implementation uses &lt;code&gt;implicit&lt;/code&gt; conversion to return &lt;code&gt;None&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; otherwise the &lt;code&gt;Person&lt;/code&gt; is elevated with Some.&lt;br /&gt;
I explicitly elevate the result to demonstrate what is happening. Let&apos;s also add some error-handling as this will show a problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;using static LanguageExt.Prelude;
public Option&amp;lt;Person&amp;gt; Get(Email email)
{
    try
    {
        Person person = QueryByEmail(email);
        if(person == null)
            return None;
        return Some(person);
    }
    catch (Exception)
    {
        return None;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this is looking a little better.&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Return type is explicit about possibility of no value being returned&lt;/li&gt;
&lt;li&gt;The API of the type encourages handling of branch between happy and unhappy path&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We cannot differentiate between no value and an exception&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exception: return don&apos;t throw&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The following &lt;code&gt;Exceptional&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Validation&amp;lt;T&amp;gt;&lt;/code&gt; types are defined in &lt;a href=&quot;https://github.com/dburriss/HonestTypes&quot;&gt;HonestTypes&lt;/a&gt;. Check the project page for installation instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So our type needs to be a bit more explicit about what can happen. Let&apos;s introduce an &lt;code&gt;Exceptional&amp;lt;T&amp;gt;&lt;/code&gt; type.
This is similar to &lt;code&gt;Option&amp;lt;Person&amp;gt;&lt;/code&gt; but instead of &lt;strong&gt;Some&lt;/strong&gt; and &lt;strong&gt;None&lt;/strong&gt; it has &lt;strong&gt;Exception&lt;/strong&gt; and &lt;strong&gt;Success&lt;/strong&gt;.&lt;br /&gt;
For those of you familiar with functional programming it is basically &lt;code&gt;Either&amp;lt;Exception, T&amp;gt;&lt;/code&gt; with left set to &lt;code&gt;Exception&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public Exceptional&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt; Get(Email email)
{
    try
    {
        Person person = QueryByEmail(email);
        Option&amp;lt;Person&amp;gt; result = person;
        return result;
    }
    catch (DbException ex)//only catch expected exceptions
    {
        return ex;
    }
}

//usage
var person1 = personRepository.Get(email);

person1.Match(
    Exception: ex =&amp;gt; Console.WriteLine($&amp;quot;Exception: {ex.Message}&amp;quot;),
    Success: opt =&amp;gt; opt.Match(
        None: () =&amp;gt; Console.WriteLine(&amp;quot;Person: Nobody&amp;quot;),
        Some: p =&amp;gt; Console.WriteLine($&amp;quot;Person: {p.FirstNames} {p.LastName}&amp;quot;)
    )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One important point in the repository implementation is you need to assign it to &lt;code&gt;Option&amp;lt;Person&amp;gt;&lt;/code&gt; before returning it which implicitly converts to &lt;code&gt;Exceptional&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt;&lt;/code&gt;.
You can&apos;t go directly from &lt;code&gt;Person&lt;/code&gt; to &lt;code&gt;Exceptional&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt;&lt;/code&gt; unfortunately.&lt;/p&gt;
&lt;p&gt;The difference in this implementation is in the exception handling. See how we just return the exception? The exception has an implicit conversion to the elevated type of &lt;code&gt;Exceptional&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Return type is very explicit about both errors and no value&lt;/li&gt;
&lt;li&gt;API of return type encourages good handling of code paths&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;With the nested generics the type declaration is quite verbose&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So with a bit of borrowing from functional programming and some added verbosity to our method signature we managed to move from an admittedly simple signature to a slightly more verbose one that is brutally honest about the possible outcomes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;Person Get(Email email);
Result&amp;lt;Person&amp;gt; Get(Email email);
Option&amp;lt;Person&amp;gt; Get(Email email);
Exceptional&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt; Get(Email email);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope you found something useful in this and if you did I cannot recommend enough the brilliant &lt;a href=&quot;https://www.manning.com/books/functional-programming-in-c-sharp&quot;&gt;Functional Programming in C#&lt;/a&gt; from Manning. I must warn that some of the chapters in this book are heavy going. Not because they are badly written but because as a C# and Java developer the concepts are so foreign that they take a while to sink in. Like most things worthwhile it takes effort and determination but you will be a better developer for it.&lt;/p&gt;
&lt;p&gt;In my following post I will discuss &lt;a href=&quot;/better-error-handling&quot;&gt;error handling&lt;/a&gt; and how logic/validation errors can be represented as return types following the same criteria as in this post.&lt;/p&gt;
&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/elevated-world/&quot;&gt;Elevated world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/rop/&quot;&gt;Railway oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/honest-arguments/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/honest-arguments/"/>
    <title>Honest Arguments</title>
    <updated>2017-03-10T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/honest-arguments/</uri>
    </author>
    <summary type="html">&lt;p&gt;One of the benefits of statically typed languages is that we can rely on more than the method and parameter names for information on what is expected and what is returned. A well designed method should be about more than naming. Too often we give up on this type safety and expressiveness for the ease of instantiating primitives and &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Expressively typed parameters&lt;/h1&gt;
&lt;p&gt;Consider the following 2 tips for message choice. To be fair I chose less than expressive names to demonstrate that even if a developer doesn&apos;t pick the best names (which they should of course try to do and should be fixed), the types of the argument provide all the intent needed. The parameter names could be &apos;l&apos;, &apos;f&apos;, and &apos;e&apos; and a developer could still infer the usage from the types.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2017/primitive-typed-method.jpg&quot; alt=&quot;primitive parameters&quot; /&gt;
&lt;em&gt;Figure 1: Using simple type parameters&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2017/expressively-typed-method.jpg&quot; alt=&quot;expressive parameters&quot; /&gt;
&lt;em&gt;Figure 2: Using expressive type parameters&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So how would we represent something like a name as a type instead of a &lt;code&gt;string&lt;/code&gt; but still have it play nice with the capture in a client or storage of an instance in a database?
The trick is with the &lt;code&gt;implicit&lt;/code&gt; or &lt;code&gt;explicit&lt;/code&gt; keywords.&lt;/p&gt;
&lt;h2&gt;Lose the primitives (but play nice)&lt;/h2&gt;
&lt;p&gt;For types that are always a direct conversion with no chance of failing, use the &lt;code&gt;implicit&lt;/code&gt; keyword.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class FirstNames
{
    string Value { get; }
    public FirstNames(string value) { Value = value; }

    public static implicit operator string(FirstNames c)
        =&amp;gt; c.Value;
    public static implicit operator FirstNames(string s)
        =&amp;gt; new FirstNames(s);

    public override string ToString() =&amp;gt; Value;
}

//usage
FirstNames name = &amp;quot;Devon Aragorn&amp;quot;;
string nameAsString = name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the other hand when you start adding a bit of behaviour into your class, there is a chance that the conversion can fail. Take for instance an &lt;code&gt;Email&lt;/code&gt; type that has some validation of the email address.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class Email
{
    private const string regexPattern = @&amp;quot;\A(?:[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z&amp;quot;;
    private string Value { get; }

    public Email(string value)
    {
        if(!Regex.IsMatch(value, regexPattern, RegexOptions.IgnoreCase))
        {
            throw new ArgumentException($&amp;quot;{value} is not a valid email address.&amp;quot;, nameof(value));
        }
        Value = value;
    }

    public static explicit operator string(Email c)
        =&amp;gt; c.Value;
    public static explicit operator Email(string s)
        =&amp;gt; new Email(s);

    public override string ToString() =&amp;gt; Value;
}

//usage
Email email = (Email)&amp;quot;test@test.com&amp;quot;;
string emailAsString = (string)email;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are using the &lt;code&gt;explicit&lt;/code&gt; keyword because the constructor can throw an exception if the string is not a valid email address.&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;p&gt;Let&apos;s list some reasons why you would want to do this with simpler types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;strong&gt;expressive types reveal intent&lt;/strong&gt; to consumers (other developers and future you)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finding usage&lt;/strong&gt; of particular concepts can be done by type rather than searching text&lt;/li&gt;
&lt;li&gt;If doing domain modelling you can now &lt;strong&gt;group behavior and data&lt;/strong&gt; to have a descriptive model&lt;/li&gt;
&lt;li&gt;Once assigned to an expressive type they &lt;strong&gt;provide type safety&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Creation of more &lt;strong&gt;targeted extension methods&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;p&gt;As with most things in programming, #ItDepends. There are some down sides to using types this way...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More code&lt;/strong&gt; to write and maintain&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serialization&lt;/strong&gt; requires a bit more work to do&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ORM mapping&lt;/strong&gt; could be more complicated&lt;/li&gt;
&lt;li&gt;Implicit conversion means you lose some type safety&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me quickly discuss a few of these cons and how they can be mitigated.&lt;/p&gt;
&lt;h4&gt;More Code&lt;/h4&gt;
&lt;p&gt;Not much to do about the maintainability part. I will say that these are relatively simple and are unlikely to change or have far reaching effects due to dependencies. To address the effort of actually creating these see &lt;a href=&quot;/visual-studio-implicit-snippet&quot;&gt;Visual Studio Implicit Snippet&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Serialization&lt;/h4&gt;
&lt;p&gt;For some help easily serializing these types check out the &lt;a href=&quot;https://github.com/dburriss/HonestTypes&quot;&gt;Honest Types repository&lt;/a&gt;. That package provides a Json.NET Converter like &lt;code&gt;new SimpleJsonConverter&amp;lt;LastName, string&amp;gt;()&lt;/code&gt; that can be supplied to the settings when serializing and deserializing.&lt;/p&gt;
&lt;h4&gt;ORM Mapping&lt;/h4&gt;
&lt;p&gt;If you are modelling your domain (like with DDD) which is likely the case if you are using types this way, then you shouldn&apos;t be using your domain models for persistence. This tends to tie your domain models to the underlying data model and you will find the schema requirements will start leaking into your domain model. So create models for your data layer and map from them to your domain models in the repository.&lt;/p&gt;
&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://enterprisecraftsmanship.com/2015/03/07/functional-c-primitive-obsession/&quot;&gt;Functional C#: Primitive obsession&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/visual-studio-implicit-snippet/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/visual-studio-implicit-snippet/"/>
    <title>Visual Studio Implicit Snippet</title>
    <updated>2017-03-08T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/visual-studio-implicit-snippet/</uri>
    </author>
    <summary type="html">&lt;p&gt;Sometimes you want to create a &lt;a href=&quot;/honest-arguments&quot;&gt;descriptive type&lt;/a&gt; to better represent a concept such as an email (rather than a &lt;code&gt;string&lt;/code&gt;) but what stops you is the effort in creating this type. Here is a quick snippet to allow you to quickly generate these types reliably.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;What will we be generating?&lt;/h1&gt;
&lt;p&gt;What we are trying to generate is a class that ends up looking something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class LastName
{
    string Value { get; }
    public LastName(string value) { Value = value; }

    public static implicit operator string(LastName c)
        =&amp;gt; c.Value;
    public static implicit operator LastName(string s)
        =&amp;gt; new LastName(s);

    public override string ToString() =&amp;gt; Value;
    public override int GetHashCode() =&amp;gt; Value.GetHashCode();
    public override bool Equals(object obj)
    {
        if (Value == null || obj == null)
            return false;

        if (obj.GetType() == typeof(string))
        {
            var otherString = obj as string;
            return string.Equals(Value, otherString, StringComparison.Ordinal);
        }

        if (obj.GetType() == this.GetType())
        {
            string otherString = string.Format(&amp;quot;{0}&amp;quot;, obj);
            return string.Equals(Value, otherString, StringComparison.Ordinal);
        }

        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This class will implicitly convert between &lt;code&gt;LastName&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; and compares like a value type. So two different instances of the same last name will be equivalent.&lt;/p&gt;
&lt;h2&gt;Visual Studio Snippet&lt;/h2&gt;
&lt;p&gt;If you are using &lt;a href=&quot;https://www.jetbrains.com/resharper/features/code_templates.html&quot;&gt;Resharper&lt;/a&gt; or another development productivity extension, creating snippets is fairly easy. In Visual Studio without a productivity extension it takes a little more effort but not much.&lt;/p&gt;
&lt;p&gt;First you will need to create the snippet. Open up your favourite editor (&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;I use Visual Studio Code&lt;/a&gt;) and create a file called &lt;em&gt;impl.snippet&lt;/em&gt; and save it somewhere. You will be importing it into Visual Studio later so remember where you put it. Also be aware that it will actually be copied to &lt;em&gt;C:\Users{user}\Documents\Visual Studio 2017\Code Snippets\Visual C#\My Code Snippets&lt;/em&gt; when you import it and the one you saved is not the one that Visual Studio uses. So if make changes to the original you will need to re-import it and if you edit the imported one it seems VS needs a restart.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;  
&amp;lt;CodeSnippets  
    xmlns=&amp;quot;http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet&amp;quot;&amp;gt;  
    &amp;lt;CodeSnippet Format=&amp;quot;1.0.0&amp;quot;&amp;gt;  
        &amp;lt;Header&amp;gt;  
            &amp;lt;Title&amp;gt;Class with implicit string operator&amp;lt;/Title&amp;gt;  
            &amp;lt;Author&amp;gt;Devon Burriss&amp;lt;/Author&amp;gt;  
            &amp;lt;Description&amp;gt;Creates a class that can implicitly convert to and from string.&amp;lt;/Description&amp;gt;
            &amp;lt;Shortcut&amp;gt;impl&amp;lt;/Shortcut&amp;gt;
        &amp;lt;/Header&amp;gt;
        &amp;lt;Imports&amp;gt;  
            &amp;lt;Import&amp;gt;  
                &amp;lt;Namespace&amp;gt;System&amp;lt;/Namespace&amp;gt;  
            &amp;lt;/Import&amp;gt;  
        &amp;lt;/Imports&amp;gt;  
        &amp;lt;Snippet&amp;gt;
            &amp;lt;Declarations&amp;gt;  
                &amp;lt;Literal&amp;gt;  
                    &amp;lt;ID&amp;gt;name&amp;lt;/ID&amp;gt;   
                    &amp;lt;ToolTip&amp;gt;Name of the class.&amp;lt;/ToolTip&amp;gt;   
                    &amp;lt;Default&amp;gt;MyImplicitType&amp;lt;/Default&amp;gt;   
                &amp;lt;/Literal&amp;gt;
            &amp;lt;/Declarations&amp;gt;
            &amp;lt;Code Language=&amp;quot;csharp&amp;quot;&amp;gt;  
                &amp;lt;![CDATA[
                    public class $name$
                    {
                        string Value { get; }
                        public $name$(string value) { Value = value; }

                        public static implicit operator string($name$ c)
                            =&amp;gt; c.Value;
                        public static implicit operator $name$(string s)
                            =&amp;gt; new $name$(s);

                        public override string ToString() =&amp;gt; Value;
                        public override int GetHashCode() =&amp;gt; Value.GetHashCode();
                        public override bool Equals(object obj)
                        {
                            if (Value == null || obj == null)
                                return false;

                            if (obj.GetType() == typeof(string))
                            {
                                var otherString = obj as string;
                                return string.Equals(Value, otherString, StringComparison.Ordinal);
                            }

                            if (obj.GetType() == this.GetType())
                            {
                                string otherString = string.Format(&amp;quot;{0}&amp;quot;, obj);
                                return string.Equals(Value, otherString, StringComparison.Ordinal);
                            }

                            return false;
                        }
                    }
                ]]&amp;gt;  
            &amp;lt;/Code&amp;gt;  
        &amp;lt;/Snippet&amp;gt;  
    &amp;lt;/CodeSnippet&amp;gt;  
&amp;lt;/CodeSnippets&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Xml file: &lt;em&gt;impl.snippet&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;Header&amp;gt;&lt;/code&gt; element defines some generic information about the snippet. It is all self explanatory. I do want to just point out the &lt;code&gt;&amp;lt;Shortcut&amp;gt;&lt;/code&gt; element. This is what you will edit if you want anything other than typing &lt;strong&gt;impl&lt;/strong&gt; and then hit the &lt;strong&gt;Tab&lt;/strong&gt; button to activate the snippet.&lt;/p&gt;
&lt;p&gt;The interesting bit is the &lt;code&gt;&amp;lt;Literal&amp;gt;&lt;/code&gt; element. It has an &lt;code&gt;&amp;lt;ID&amp;gt;&lt;/code&gt; element which is used in the snippet template to be the replacement variable. So when you hit &lt;strong&gt;Tab&lt;/strong&gt; you can type a name for the class and it will be inserted into all the relevant places.&lt;/p&gt;
&lt;h2&gt;Import into Visual Studio&lt;/h2&gt;
&lt;p&gt;Once you have created your snippet and saved it somewhere, go to Visual Studio (if that isn&apos;t what you used to create the snippet).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to &lt;em&gt;Tool &amp;gt; Code Snippets Manager...&lt;/em&gt; (or press Ctrl+K, Ctrl+B).&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Import...&lt;/em&gt; (you can choose C# language to be safe but it seems to pick it up from the snippet)&lt;/li&gt;
&lt;li&gt;Browse to the &lt;em&gt;impl.snippet&lt;/em&gt; file you created earlier an click &lt;em&gt;Open&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Make sure &lt;strong&gt;My Coded Snippets&lt;/strong&gt; is selected and click &lt;em&gt;Finish&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you are done. Now to create the class you can type &lt;code&gt;impl&lt;/code&gt; in any .cs file and hit &lt;strong&gt;Tab&lt;/strong&gt; and it will generate the class&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you find yourself creating repetitive classes, or avoiding to create classes because they are repetitive. Consider automating it to a degree by using a snippet.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms165396.aspx&quot;&gt;How to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms242312.aspx&quot;&gt;Snippet functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms171418.aspx&quot;&gt;Schema Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/cake-build/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/cake-build/"/>
    <title>Building a Cake Script</title>
    <updated>2017-03-04T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/cake-build/</uri>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://cakebuild.net/&quot;&gt;CAKE&lt;/a&gt; is a great automation DSL that uses C#. Not only is it comfortable for C# developers to script automation tasks in, it has a stack of built in functionality and a great ecosystem of addins that give you a great jumpstart for just about anything you would like to automate.&lt;/p&gt;
&lt;p&gt;This is a quick tip on how to create a Visual Studio Code task that will build your Cake script. This is a great way of verifying your scripts without actually running Cake tasks.
Also make sure you have the Visual Studio Code extension for Cake installed to give you syntax highlighting.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Creating a tasks.json file&lt;/h2&gt;
&lt;p&gt;Press &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and type &lt;strong&gt;Tasks:C&lt;/strong&gt; and hit enter or click &apos;Tasks: Configure Task Runner&apos;. If the file does not exist it will be created. If there is an existing build task be sure to replace it. Note that that this is building the cake script, not building whatever project your Cake script is probably meant to build. That being said, if you are using Cake to build something, this task described here should probably be a custom task, not the build task.&lt;/p&gt;
&lt;h2&gt;Adding our Cake build task&lt;/h2&gt;
&lt;p&gt;Now that we have  add the following task to the json tasks array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;taskName&amp;quot;: &amp;quot;Build&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;powershell&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    &amp;quot;args&amp;quot;: [&amp;quot;.\\build.ps1 -Whatif&amp;quot;],
    &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
    &amp;quot;isBuildCommand&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cake works by running a powershell script (default is &lt;em&gt;build.ps1&lt;/em&gt;) that uses Roslyn to compile the Cake file. What our script does is execute the build script and trigger a compile but without actually executing any tasks. Not even the Default one. This is done by adding the &lt;code&gt;-Whatif&lt;/code&gt; argument flag.&lt;br /&gt;
In the example above the &lt;code&gt;isBuildCommand&lt;/code&gt; is set to &lt;strong&gt;true&lt;/strong&gt; so that &lt;strong&gt;Ctrl+Shift+B&lt;/strong&gt; can be used to build the &lt;em&gt;build.cake&lt;/em&gt; file.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Automating your builds, testing and deployment is important but don&apos;t stop there. Making sure your workspace feedback cycle is fast can also be a great way to increase productivity and decrease frustration. Hope this quick tip helps someone. Leave a comment if you have any of your own Cake tips.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/ddd-glossary/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/ddd-glossary/"/>
    <title>Domain-Driven Design Glossary</title>
    <updated>2017-02-14T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/ddd-glossary/</uri>
    </author>
    <summary type="html">&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-xs-6 col-md-3&quot;&gt;
    &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=as_sl_pc_tf_mfw?&amp;linkCode=wey&amp;tag=wwwnervstucoz-20&quot; class=&quot;thumbnail&quot;&gt;
      &lt;img src=&quot;/img/posts/2017/blue-book.jpg&quot;/&gt;
    &lt;/a&gt;
  &lt;/div&gt;
DDD cannot be summarized in a few paragraphs. In fact it would take a few books to cover it thoroughly. 
Even then like anything worthwhile it requires much practice and many mistakes to start to become proficient at it.
This is how it is with most skills that add a lot of value.
&lt;p&gt;A good start would be reading Eric Evans&apos; &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=as_sl_pc_tf_mfw?&amp;amp;linkCode=wey&amp;amp;tag=wwwnervstucoz-20&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is worthwhile being familiar with some of the common terms thrown around in DDD.&lt;/p&gt;
&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2&gt;What is DDD not?&lt;/h2&gt;
&lt;p&gt;DDD is not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calling your area of work a Domain&lt;/li&gt;
&lt;li&gt;Modelling the state of objects required into a bunch of &lt;a href=&quot;http://www.martinfowler.com/bliki/AnemicDomainModel.html&quot;&gt;anemic models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Services containing logic that act on the anemic models&lt;/li&gt;
&lt;li&gt;A giant ball of interconnected objects where every class in your project has a reference somehow to every other&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is DDD?&lt;/h2&gt;
&lt;p&gt;DDD is about modelling, and more. It encompasses common language, techniques, patterns, and architecture. It puts the focus on the business and modelling the problems you are solving. All the while giving developers techniques for minimizing the complexity and driving collaboration.
It is about taking requirements and really mapping the business processes to the model using the same language the business uses in your code.
It also gives us a common technical language to use for the different categories of classes we create while modelling our problem space.&lt;/p&gt;
&lt;h2&gt;Glossary of terms&lt;/h2&gt;
&lt;h3&gt;Ubiquitous language&lt;/h3&gt;
&lt;p&gt;The term &lt;em&gt;Ubiquitous language&lt;/em&gt; is thrown out occasionally in DDD discussions but ironically itself is often not discussed. It is also the part often left out from the development side which means the heart of DDD is not being followed and instead some of it&apos;s technical approaches used (often incorrectly).&lt;br /&gt;
It is the practice of &lt;strong&gt;using the terms used throughout the business within the codebase&lt;/strong&gt;, and working new terms from the modeling back into the business. Language often evolves and the codebase should evolve with the language. The essence really of DDD is that your code models the processes within the business and if you are not starting with the same language then how descriptive can it really be. If a product owner is looking at the application code he should recognise the classes, methods, and variables as models, workflows, and actions that actually occur.&lt;/p&gt;
&lt;p&gt;It is not a one-way street however. Often the business has over-loaded terms, or a multiplicity of terms used for the same thing. Work with the them to define a glossary of terms that is used everywhere (ubiquitously).&lt;/p&gt;
&lt;h3&gt;Bounded context&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;Bounded context&lt;/em&gt; is the context in which the &lt;em&gt;Ubiquitous language&lt;/em&gt; and the corresponding models are valid. As developer it is a common trap to fall into to try reuse code and concepts across contexts. This is a recipe for disaster since the terms and verbs used to describe a model in one context will likely be similar but not the same. This results in blurring of the model to cater for both. This adds confusion as well as inviting changes with unintended consequences. This is especially true when a model is shared across more than one team (strongly concider whether it really is one context).&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Imagine a Product class in the Logistics domain. For tracking around the warehouse you need a barcode, for shipping you need the packaged dimensions and weight. Now think of a product for display on an e-commerce website. You need photos, description, and other specs like its actual dimensions unpacked.&lt;br /&gt;
Why would a developer need all of this at one time? Why confuse matters? Why would the clients of the code like a scanner in the warehouse or a customer on the website need both? If all that is shared is maybe a name and a SKU, is the code sharing of 2 properties worth coupling different parts of the system? Different teams together?&lt;br /&gt;
There are many reasons to want to keep these models seperated based on their context and few reasons to combine them. Yet it is a very common occurance in development. Why? Code re-use.&lt;br /&gt;
Only re-use models if they are indeed the same model.&lt;/p&gt;
&lt;h3&gt;Entities&lt;/h3&gt;
&lt;p&gt;Entities are the classes that model the domain concepts and have identity. This usually means there is a unique primary key associated with the entity. Remember that modelling in DDD takes us back to the OOP we learned in the text books... behavior and data together. This is in antithesis to the usual &lt;a href=&quot;https://martinfowler.com/bliki/AnemicDomainModel.html&quot;&gt;anemic models&lt;/a&gt; found in most software.&lt;/p&gt;
&lt;h3&gt;Value objects&lt;/h3&gt;
&lt;p&gt;Value objects are much like entities except they do not have identity. Money is the quintessential example of a model that shows intent, contains rules, but does not have identity. The important part here is using types to convey meaning as well as place logic along with the data in a very obvious way.&lt;/p&gt;
&lt;h3&gt;Aggregate&lt;/h3&gt;
&lt;p&gt;An Aggregate is a hierarchy of objects (Entities and Value objects) that make up a consistency boundary.&lt;br /&gt;
Why would we want to set a boundary rather than just reference any object needed?&lt;/p&gt;
&lt;p&gt;Minimising associations helps to prevent a reference web. This can be problematic when fetching and reconstituting a hierarchy of objects into memory. Lazy loading can quickly get out of hand, alternatively null references about and conntinually need to be checked.&lt;/p&gt;
&lt;p&gt;Let us turn the question around. What if the relationships of our object model clearly showed us the effects of change? For example, the aggregate was the scope of the transaction...&lt;/p&gt;
&lt;h4&gt;Aggregate root&lt;/h4&gt;
&lt;p&gt;The Aggregate Root is an Entity that all other Entities and Value Objects in the hierarchy hang off. For example if you have an Order with Order Lines and a Supplier, the &lt;code&gt;OrderRepository&lt;/code&gt; will return an Order with all &lt;code&gt;OrderLines&lt;/code&gt; and &lt;code&gt;OrderSupplier&lt;/code&gt; populated. If would not be possible to fetch an &lt;code&gt;OrderLine&lt;/code&gt; separately, nor a &lt;code&gt;OrderSupplier&lt;/code&gt;. If needed though you would provide methods on your &lt;code&gt;OrderRepository&lt;/code&gt; to fetch an order by Order Line Id or by Supplier Reference for example.&lt;/p&gt;
&lt;h4&gt;Points to keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Technical difficulties implementing an aggregate (like transaction issues persisting it) are usually indicative of a poorly chosen model. Put more effort refining the model rather than trying to fix a modelling problem with a technical implementation.&lt;/li&gt;
&lt;li&gt;Access to objects from outside the aggregate must occur through the Aggregate Root.&lt;/li&gt;
&lt;li&gt;Aggregates are always constructed in a consistent state.&lt;/li&gt;
&lt;li&gt;The logic is usually within the aggregate to disallow consistent state or at least check its consistency.&lt;/li&gt;
&lt;li&gt;It is better to encapsulate changes to state through method calls rather than directly mutating properties. This shows intent as well as adds an extra layer of indirection allowing implemntation changes without changing the API.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Factories&lt;/h3&gt;
&lt;p&gt;Since an aggregate should always be in a consistent state it is important that they are constructed in a consistent state to the user. Factories provide a way to &lt;strong&gt;ensure that new instances of an aggregate always start in a consistent state&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Repositories&lt;/h3&gt;
&lt;p&gt;Repositories protect us from taking a data-centric view of our code. They allow us to &lt;strong&gt;persist and retrieve aggregates&lt;/strong&gt; without dealing directly with the underlying persistence. It is however important for developers to at least be aware of the underlying implementations so as not to abuse the repository from a performance or scoping way.&lt;/p&gt;
&lt;p&gt;The abstraction of the repository is contained within the domain. This abstraction knows about the domain models within that context. More specifically it knows about the aggregate that it is returning. A repository returns an Entity (or collection of Entities) and the aggregate for wich that Entity is the Aggregate Root.&lt;/p&gt;
&lt;p&gt;The implementation of the repository abstraction does not reside in the domain. It is a Infrastructural concern and can change. What is important though is that the repository handles mapping however the data is persisted into a fully hydrated and consistent aggregate.&lt;/p&gt;
&lt;p&gt;The developer is free to add multiple query methods to the repository but the return results are always in terms of the Aggregate Root.&lt;/p&gt;
&lt;h4&gt;Points to keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The repository abstraction is part of the domain&lt;/li&gt;
&lt;li&gt;The repository implementation is NOT part of the domain&lt;/li&gt;
&lt;li&gt;The repository exposes data in terms of that repository&apos;s Aggregate Root&lt;/li&gt;
&lt;li&gt;Query methods should use the domain language&lt;/li&gt;
&lt;li&gt;If complex queries look to encapsulate in query objects using the &lt;a href=&quot;https://www.martinfowler.com/apsupp/spec.pdf&quot;&gt;Specification&lt;/a&gt; pattern&lt;/li&gt;
&lt;li&gt;Transaction should be controlled by the client code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Domain Service&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes, it just isn&apos;t a thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When modeling sometimes an operation or workflow doesn&apos;t fit into the current model. Usually this just means you are not accurately capturing the model you need to represent the business problem but every now and again it is valid to place this operation in a domain service. If placing a workflow comflates your model objects maybe a service is the way to go. Services are represented by verbs rather than nouns and speak to what the DO. An important distinction from model objects is that they are completely stateless. A service will take various other domain objects and execute some action, possibly returning some result.&lt;/p&gt;
&lt;h4&gt;Points to keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Don&apos;t give up too quickly trying to fit an operation into the model (concider a new concept that encapsulates entities and values objects... maybe this is actual aggregate root?)&lt;/li&gt;
&lt;li&gt;The Service is named after an activity (verb not noun)&lt;/li&gt;
&lt;li&gt;Services are stateless&lt;/li&gt;
&lt;li&gt;Services still use the Ubiquitous Language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Application Service&lt;/h3&gt;
&lt;p&gt;The application service is what presents an input for a use-case. It calls off to the domain for execution, calls any other services (like notifications) and returns. This could be something like a WebApi controller in .NET or you could choose to explicitly create an an application service.&lt;/p&gt;
&lt;h4&gt;Points to keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A thin layer that receives a request and passes it to the domain to processes&lt;/li&gt;
&lt;li&gt;Think use-case&lt;/li&gt;
&lt;li&gt;A good place to handle transactions&lt;/li&gt;
&lt;li&gt;Can call out to Infrastructure Services&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Infrastructure Service&lt;/h3&gt;
&lt;p&gt;This is a technical implementation for something that performs some task such as notifications (IM, email, etc.), put messages on a bus, or retrieve some data from another system.&lt;/p&gt;
&lt;h3&gt;Anti-corruption layer (ACL)&lt;/h3&gt;
&lt;p&gt;An ACL is at the very least a thin translation layer between two bounded contexts. Even if both bounded contexts are well defined, and share similar models. The models in one context should not influence the models in another and without a layer in between to translate between the two corruption will creep in. If the external system a bounded context is talking to is a legacy system with a very poor model it is even more likely it will corrupt unless the ACL acts as a strong buffer.&lt;/p&gt;
&lt;h3&gt;Modules&lt;/h3&gt;
&lt;p&gt;Modules are simply packages or assemblies. Whatever your technology&apos;s means is of bundling built code is.&lt;/p&gt;
&lt;h3&gt;Shared Kernel&lt;/h3&gt;
&lt;p&gt;Sometimes a model needs to be shared across multiple Bounded Contexts. If so a Shared Kernel can be created but in a lot of cases the coupling created between the contexts and the teams is not worth it.&lt;/p&gt;
&lt;h3&gt;Clients&lt;/h3&gt;
&lt;p&gt;This is not really a term from the &lt;em&gt;Blue Book&lt;/em&gt; (that I remember) but I find it useful when talking about DDD and Clean Architecture. Clients are the callers of the application layer. These could be another application automated service or an application been driven by a user. Regardless the clients execute the use-cases defined in the application layer.&lt;/p&gt;
&lt;h3&gt;Further reading&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://lostechies.com/jimmybogard/2010/02/04/strengthening-your-domain-a-primer/&quot;&gt;Strengthening your domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://martinfowler.com/tags/domain%20driven%20design.html&quot;&gt;Domain-Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gorodinski.com/blog/2012/04/14/services-in-domain-driven-design-ddd/&quot;&gt;Services in Domain-Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=as_sl_pc_tf_mfw?&amp;amp;linkCode=wey&amp;amp;tag=wwwnervstucoz-20&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577/ref=pd_bxgy_14_img_2?_encoding=UTF8&amp;amp;pd_rd_i=0321834577&amp;amp;pd_rd_r=P6PNCC27GC5B7Q513JJ4&amp;amp;pd_rd_w=6neVY&amp;amp;pd_rd_wg=Rn8gy&amp;amp;psc=1&amp;amp;refRID=P6PNCC27GC5B7Q513JJ4&quot;&gt;Implementing Domain-Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202/ref=as_sl_pc_tf_mfw?&amp;amp;linkCode=wey&amp;amp;tag=wwwnervstucoz-20&quot;&gt;Applying Domain-Driven Design Patterns Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/vscode-tasks/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/vscode-tasks/"/>
    <title>Visual Studio Code Tasks</title>
    <updated>2017-02-11T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/vscode-tasks/</uri>
    </author>
    <summary type="html">&lt;p&gt;I tend to try use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; for tasks and languages I don&apos;t currently use on a day to day basis. Over the last few weeks that has included Java and Delphi. Then today I was trying to launch my blog from VS Code and ran into an issue because Pretzel listens for a console key. The only fix I could find for this was to launch a new Powershell window. I thought this as good a time as any to post a few of these tasks.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Tasks&lt;/h1&gt;
&lt;p&gt;Tasks in VS Code allow you to run commands that execute and usually feedback some status. Tasks are configured in the file &lt;em&gt;/.vscode/tasks.json&lt;/em&gt; from the workspace root. Hit &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and type &lt;strong&gt;Tasks:C&lt;/strong&gt; and hit enter or click &apos;Tasks: Configure Task Runner&apos;. If the file does not exist it will be created.&lt;/p&gt;
&lt;h2&gt;Compiling a Java application&lt;/h2&gt;
&lt;p&gt;This command uses &lt;code&gt;javac&lt;/code&gt; to compile the Java application and will report on compile errors. Note that this uses a single task (others in the post have multiple tasks in the file). It assumes &lt;code&gt;javac&lt;/code&gt; is on your PATH. I also have the &lt;strong&gt;Language Support for Java&lt;/strong&gt; extension from Red Hat installed in VS Code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;javac&amp;quot;,
    &amp;quot;showOutput&amp;quot;: &amp;quot;silent&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    &amp;quot;args&amp;quot;: [&amp;quot;-d&amp;quot;,&amp;quot;${workspaceRoot}\\bin&amp;quot;,&amp;quot;${workspaceRoot}\\src\\*.java&amp;quot;],
    &amp;quot;problemMatcher&amp;quot;: {
        &amp;quot;owner&amp;quot;: &amp;quot;external&amp;quot;,
        &amp;quot;fileLocation&amp;quot;: [&amp;quot;absolute&amp;quot;],
        &amp;quot;pattern&amp;quot;: [
        {
            &amp;quot;regexp&amp;quot;: &amp;quot;^(.+\\.java):(\\d):(?:\\s+(error)):(?:\\s+(.*))$&amp;quot;,
            &amp;quot;file&amp;quot;: 1,
            &amp;quot;location&amp;quot;: 2,
            &amp;quot;severity&amp;quot;: 3,
            &amp;quot;message&amp;quot;: 4
        }]
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Control Maven for a Java project&lt;/h2&gt;
&lt;p&gt;These control different Maven phases. Note that on the &lt;code&gt;exec&lt;/code&gt; task you need to change the &lt;code&gt;me.devonburriss.App&lt;/code&gt; to the entrypoint of your application. It assumes &lt;code&gt;mvn&lt;/code&gt; is on your PATH. Not needed for this but note that I have the &lt;strong&gt;Language Support for Java&lt;/strong&gt; extension from Red Hat installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;mvn&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
    &amp;quot;suppressTaskName&amp;quot;: true,
    &amp;quot;echoCommand&amp;quot;: true,
    &amp;quot;tasks&amp;quot;: [
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;verify&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;-B&amp;quot;, &amp;quot;verify&amp;quot;],
            &amp;quot;isBuildCommand&amp;quot;: true
        },
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;test&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;-B&amp;quot;, &amp;quot;test&amp;quot;],
            &amp;quot;isTestCommand&amp;quot;: true
        },
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;clean install&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;clean install -U&amp;quot;]
        },
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;exec&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;-B&amp;quot;, &amp;quot;exec:java&amp;quot;, &amp;quot;-D&amp;quot;, &amp;quot;exec.mainClass=\&amp;quot;me.devonburriss.App\&amp;quot;&amp;quot;]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Delphi (Free Pascal) Build&lt;/h2&gt;
&lt;p&gt;This is using the Free Pascal compiler to compile Delphi code. It assumes that &lt;code&gt;fpc&lt;/code&gt; is on your PATH. You can get it &lt;a href=&quot;http://www.freepascal.org/download.var&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
This only compiles a single unit, not a complete project. Not needed for this to work but for syntax highlighting I have the OmniPascal extension installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;fpc&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
    &amp;quot;suppressTaskName&amp;quot;: true,
    &amp;quot;echoCommand&amp;quot;: true,
    &amp;quot;tasks&amp;quot;: [
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;Compile Unit&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;-Sd&amp;quot;, &amp;quot;${file}&amp;quot;],
            &amp;quot;isBuildCommand&amp;quot;: true
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Powershell, Cake, Pretzel blog Build&lt;/h2&gt;
&lt;p&gt;This is one I use to call PS, which executes my Cake build and and run this blog locally. The targets for that are Bake and Taste (from Pretzel). See &lt;a href=&quot;http://devonburriss.me/pretezel-blog-appveyor-deployment/&quot;&gt;this post&lt;/a&gt; for details on that.&lt;/p&gt;
&lt;p&gt;I use a &lt;em&gt;run.ps1&lt;/em&gt; file because I needed to launch a new Powershell window so Pretzel can wait and watch for changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;tasks&amp;quot;: [
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;Build&amp;quot;,
            &amp;quot;command&amp;quot;: &amp;quot;powershell&amp;quot;,
            &amp;quot;isShellCommand&amp;quot;: true,
            &amp;quot;args&amp;quot;: [&amp;quot;.\\pretzel.ps1&amp;quot;],
            &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
            &amp;quot;isBuildCommand&amp;quot;: true
        },
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;Run&amp;quot;,
            &amp;quot;command&amp;quot;: &amp;quot;powershell&amp;quot;,
            &amp;quot;isShellCommand&amp;quot;: false,
            &amp;quot;args&amp;quot;: [&amp;quot;.\\run.ps1&amp;quot;],
            &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
            &amp;quot;isTestCommand&amp;quot;: true
        }
    ]    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just a note that I have the Powershell extension from Microsoft for VS Code installed. Not needed for the task to run but it gives nice support for ps1 files.&lt;/p&gt;
&lt;h2&gt;Extra: F5 Launch of Pretzel Blog&lt;/h2&gt;
&lt;p&gt;If you want to use &lt;strong&gt;F5&lt;/strong&gt; to run the blog you can press &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and type &lt;strong&gt;launch&lt;/strong&gt;. If it doesn&apos;t exist a &lt;em&gt;launch.json&lt;/em&gt; file will be created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;PowerShell&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;PowerShell Launch (Script)&amp;quot;,
            &amp;quot;script&amp;quot;: &amp;quot;${workspaceRoot}/run.ps1&amp;quot;,
            &amp;quot;args&amp;quot;: [],
            &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceRoot}&amp;quot;        
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where my &lt;em&gt;run.ps1&lt;/em&gt; looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Start-Process powershell &amp;quot;.\pretzel.ps1 -target Taste -Wait&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Visual Studio Code is a great editor and has plenty of extension points. If you have any great tips I would love to hear about them in the comments.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/pretezel-blog-appveyor-deployment/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/pretezel-blog-appveyor-deployment/"/>
    <title>Deploying a Pretzel generated static site to Github Pages using Appveyor</title>
    <updated>2017-01-31T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/pretezel-blog-appveyor-deployment/</uri>
    </author>
    <summary type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;I was using &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; and &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to build and host this blog up until a few days ago.
Getting Jekyll running on Windows (more specifically Ruby) is a gamble and running it in a Docker container just led me down Ruby gem issues with my theme.&lt;br /&gt;
Finally I decided to stick with the statically generated site but move away from Jekyll. Enter Pretzel...&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;Github Pages allows you to host static websites and comes in 2 flavours. It natively supports building Jekyll source into a static site and deploying it.&lt;/p&gt;
&lt;h3&gt;Organisation/User site&lt;/h3&gt;
&lt;p&gt;This one runs off a separate repository with the special convention based name of &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; and hosts any static content (or Jekyll) that is committed to &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;
&lt;h3&gt;Repository site&lt;/h3&gt;
&lt;p&gt;These allow a website to be hosted per repository. Think documentation and marketing site for the product being built in that repository. These are built from a special orphaned branch named &lt;strong&gt;gh-pages&lt;/strong&gt; usually but can be set to &lt;strong&gt;master&lt;/strong&gt; or a &lt;code&gt;/docs&lt;/code&gt; folder.&lt;/p&gt;
&lt;h2&gt;Pretzel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Code52/pretzel&quot;&gt;Pretzel&lt;/a&gt; is a .NET based tool for generating a static, blog aware site. If you have used Jekyll, it is that without all the gem hell.&lt;br /&gt;
Installing it locally is as easy as: &lt;code&gt;choco install pretzel&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that I used a plugin called &lt;a href=&quot;https://github.com/k94ll13nn3/Pretzel.Categories&quot;&gt;Pretzel.Categories&lt;/a&gt; to provide tag and category pages. You may need to explicitly add the dll to your repository as your global .gitignore may specify *.dll.  &apos;git add ._plugins\Pretzel.Categories.dll -f&apos;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Approach&lt;/h1&gt;
&lt;p&gt;Since I am no longer using Jekyll, Github pages can no longer build my site so I need to do that outside. I wanted to keep the same workflow of just being able to commit my changes and the content on the site is updated.&lt;/p&gt;
&lt;p&gt;The solution needed to satisfy the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;develop locally and view my changes before pushing the commit&lt;/li&gt;
&lt;li&gt;only 1 repository that represented my blog&lt;/li&gt;
&lt;li&gt;a commit should trigger a build and deployment of the updated content&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;Let&apos;s tackle each of these requirements one at a time. First off create a branch &lt;strong&gt;source&lt;/strong&gt;. &lt;strong&gt;master&lt;/strong&gt; will be reserved for our auto-generated content (we will get to this at the end of the post).&lt;br /&gt;
&lt;code&gt;git checkout --orphan source&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Local development&lt;/h2&gt;
&lt;p&gt;For local development I have a task setup in a &lt;a href=&quot;http://cakebuild.net/&quot;&gt;Cake build&lt;/a&gt; for building and running the Pretzel tool. This wouldn&apos;t give too much benefit over just command lining the 2 commands needed.
Which commands? Well Pretzel gives us a few. The 2 important ones for us though are:
&lt;code&gt;pretzel.exe bake&lt;/code&gt; - this will build our static website and since we provided no output folder it puts it in a folder &lt;em&gt;_sites/&lt;/em&gt;. This is important to remember later&lt;br /&gt;
&lt;code&gt;pretzel.exe taste --port 5001&lt;/code&gt; - this will serve up the site and launch the site in the browser so you can admire your work&lt;/p&gt;
&lt;p&gt;Why do I put these 2 simple commands in a build script? Well I have a transformation against the &lt;em&gt;_config.yml&lt;/em&gt; that will swap out my domain name and &lt;em&gt;localhost:5001&lt;/em&gt; depending on whether I am building for Debug or Release. It always use localhost when I am tasting since I don&apos;t use pretzel to serve the files.&lt;/p&gt;
&lt;p&gt;If you are following along converting your own blog then and have not used Cake don&apos;t worry, it is super simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the Powershell build script: &lt;code&gt;Invoke-WebRequest http://cakebuild.net/download/bootstrapper/windows -OutFile pretzel.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This Powershell creates a ps1 fiel for &lt;em&gt;build.ps1&lt;/em&gt; usually but we specified &lt;em&gt;pretzel.ps1&lt;/em&gt; so on line 43 change &lt;em&gt;build.cake&lt;/em&gt; to &lt;em&gt;pretzel.cake&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Create a file called &lt;em&gt;pretzel.cake&lt;/em&gt; that looks like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Updated: 2017-03-19 with new &lt;em&gt;Pretzel.exe&lt;/em&gt; install path&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/c7871549c2788c0dca507a2d24c683ed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;With this setup we can build using &lt;code&gt;.\pretzel.ps1&lt;/code&gt; and preview locally with &lt;code&gt;.\pretzel.ps1 -target Taste&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to check-in what you have so far delete the &lt;em&gt;_sites/&lt;/em&gt; folder before adding the file to source control on the branch &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Single repository&lt;/h2&gt;
&lt;p&gt;This one was a bit of a head-scratcher for me but then I remembered Github submodules. These allow you to map a folder in your repository to another repository. What I thought I would try was create an orphaned branch in my blog repository that contains the pretzel source and link the &lt;em&gt;_sites/&lt;/em&gt; folder to the &lt;strong&gt;master&lt;/strong&gt; branch which is where Github pages expects the static contents if you are not using Jekyll.&lt;/p&gt;
&lt;h3&gt;Some quick housekeeping&lt;/h3&gt;
&lt;p&gt;If you have run the Pretzel build but have not added anything to the Github repository (even locally) then just delete the &lt;em&gt;_sites/&lt;/em&gt; folder before continuing.&lt;br /&gt;
If you have checked in the &lt;em&gt;_sites/&lt;/em&gt; folder run the following git command to remove it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rm -r _sites&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git commit -m &amp;quot;Remove _sites (preparing for submodule)&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you might need to remove from the index as well with &lt;code&gt;git rm -r --cached _sites&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Creating the submodule&lt;/h3&gt;
&lt;p&gt;Next we are going to create the submodule that links back to the &lt;strong&gt;master&lt;/strong&gt; branch where the static content is expected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the following command uses https and not git protocol. This is important and you will get an error later in the CD process if you use git protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;git submodule add -b master https://github.com/dburriss/dburriss.github.io.git _site&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git commit -m &amp;quot;_sites submodule&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Continuous Delivery&lt;/h2&gt;
&lt;p&gt;I use AppVeyor to pickup changes to the &lt;strong&gt;source&lt;/strong&gt; branch. It uses Choclatey to install Pretzel. It then uses Pretzel to generate the static site into &lt;em&gt;_sites/&lt;/em&gt; folder.&lt;br /&gt;
The &lt;em&gt;_sites/&lt;/em&gt; folder you will remember is actually a submodule linked back to the &lt;strong&gt;master&lt;/strong&gt; branch of the same repository. We will push the generated changes to &lt;strong&gt;master&lt;/strong&gt;, thus updating the blog with the latest content.&lt;/p&gt;
&lt;p&gt;Place the following &lt;em&gt;appveyor.yml&lt;/em&gt; file in the root of your &lt;strong&gt;source&lt;/strong&gt; branch.&lt;br /&gt;
The only thing you will need to change in the &lt;em&gt;appveyor.yml&lt;/em&gt; is the url for your repository and the access token.&lt;/p&gt;
&lt;p&gt;You can get an access token in Github by:&lt;/p&gt;
&lt;h3&gt;Github token&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Profile pic dropdown top right&lt;/li&gt;
&lt;li&gt;Settings&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Personal access tokens&lt;/em&gt; at the bottom of the left menu&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See &lt;a href=&quot;https://help.github.com/articles/creating-an-access-token-for-command-line-use/&quot;&gt;here&lt;/a&gt; for detailed instructions.&lt;/p&gt;
&lt;h3&gt;Encrypt the token&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Next in AppVeyor click on the dropdown on your username on the top right&lt;/li&gt;
&lt;li&gt;Click Encrypt data&lt;/li&gt;
&lt;li&gt;Paste the Github token in and press Encrypt&lt;/li&gt;
&lt;li&gt;Copy the result into the &lt;em&gt;appveyor.yml&lt;/em&gt; on line 7&lt;/li&gt;
&lt;/ol&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/66b4809c5e534481bdc4426c1d430765.js&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And there we have it! We can commit to &lt;strong&gt;source&lt;/strong&gt; and the generated changes are committed to &lt;strong&gt;master&lt;/strong&gt;.&lt;br /&gt;
Feel free to copy my blog at https://github.com/dburriss/dburriss.github.io&lt;/p&gt;
&lt;p&gt;Please leave a comment if you found this useful or have any improvements.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/asp-net-5-tips-urlhelper/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/asp-net-5-tips-urlhelper/"/>
    <title>ASP.NET 5 Tips: UrlHelper</title>
    <updated>2016-01-18T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/asp-net-5-tips-urlhelper/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Note that this is specific to the upcoming RC 2 using the dotnet CLI. Currently in RC 1 this is not an issue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I was messing around with &lt;a href=&quot;https://github.com/davidfowl/dotnetcli-aspnet5&quot;&gt;David Fowl&apos;s repository&lt;/a&gt; that makes use of the new RC 2 bits that run on the new &lt;a href=&quot;https://github.com/dotnet/cli&quot;&gt;dotnet CLI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Everything was fine until I tried to create a TagHelper that makes use of &lt;em&gt;IUrlHelper&lt;/em&gt;.
In RC 1  &lt;em&gt;IUrlHelper&lt;/em&gt; is registered automatically with the DI system but apparently not in RC 2. After much searching I found the following &lt;a href=&quot;https://github.com/aspnet/Mvc/commit/9fc3a800562c866850d7c795cf24db7fa0354af6&quot;&gt;commit&lt;/a&gt; which explained the change.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;So what follows is how I got an &lt;em&gt;IUrlHelper&lt;/em&gt; into my TagHelper.&lt;/p&gt;
&lt;p&gt;It seems we should instead make use of &lt;em&gt;IUrlHelperFactory&lt;/em&gt; to get an instance of &lt;em&gt;IUrlHelper&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Startup.cs&lt;/strong&gt; service configuration I register &lt;em&gt;IActionContextAccessor&lt;/em&gt; and &lt;em&gt;IUrlHelperFactory&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public void ConfigureServices(IServiceCollection services)
{
  services.AddSingleton&lt;IActionContextAccessor, ActionContextAccessor&gt;();
  services.AddSingleton&lt;IUrlHelperFactory, UrlHelperFactory&gt;();
  services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I inject &lt;em&gt;IUrlHelperFactory&lt;/em&gt; into the TagHelper constructor and use the factory to create a new instance of a &lt;em&gt;IUrlHelper&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class EmailTagHelper : TagHelper
{
  private readonly IUrlHelper _urlHelper;

  public EmailTagHelper(IUrlHelperFactory urlHelperFactory, IActionContextAccessor actionContextAccessor)
  {
  	_urlHelper = urlHelperFactory.GetUrlHelper(actionContextAccessor.ActionContext);
  }
  
  //process override here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I am guessing that this article will only be useful next month when RC 2 hits but it was great to see what is coming. I am quite liking the new CLI and with a bit of digging I have managed to get most things working, so the team seems to be making great progress toward RC 2.
Please let me know below if you found this useful... or if things change :)&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/asp-net-5-tips-tempdata/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/asp-net-5-tips-tempdata/"/>
    <title>ASP.NET 5 Tips: TempData</title>
    <updated>2016-01-17T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/asp-net-5-tips-tempdata/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;NOTE: Handling TempData and Session is made easy with extension methods in the &lt;a href=&quot;https://www.nuget.org/packages/BetterSession.AspNet.Mvc/&quot;&gt;BetterSession&lt;/a&gt; Nuget package.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ASPNET 5 is designed to be configurable. It starts out with almost nothing and you choose what you need. In previous versions of MVC we got TempData out the box. Not so with the new iteration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2016/footprint-resized.jpg&quot; alt=&quot;bridge cables&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;So to enable TempData for MVC you need sessions.
In &lt;strong&gt;project.json&lt;/strong&gt; add the following lines to &lt;em&gt;dependencies&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
&quot;Microsoft.AspNet.Session&quot;: &quot;1.0.0-*&quot;,
&quot;Microsoft.Extensions.Caching.Memory&quot;: &quot;1.0.0-*&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;strong&gt;Startup.cs&lt;/strong&gt; the configuration of your services will need the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public void ConfigureServices(IServiceCollection services)
{
  services.AddCaching();
  //this is the NB line for this post
  services.AddSession(o =&gt;
  {
  	o.IdleTimeout = TimeSpan.FromSeconds(3600);
  });
  services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the app builder configuration will be something like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
{
  loggerFactory.AddConsole(Configuration.GetSection(&quot;Logging&quot;));
  loggerFactory.AddDebug();
  //this is the NB line for this post
  app.UseSession();
  app.UseIISPlatformHandler();
  app.UseStaticFiles();
  app.UseMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then accessing TempData is done through the dependency injection/service locator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class TempController : Controller
{
  private const string key = &quot;name&quot;;
  private readonly ITempDataDictionary _tempData;

  public TempController(ITempDataDictionary tempData)
  {
  	this._tempData = tempData;
  }

  public IActionResult Index()
  {
    _tempData[key] = &quot;Devon&quot;;
    return RedirectToAction(&quot;Carry&quot;);
  }

  public IActionResult Carry()
  {
  	return View(&quot;Index&quot;, _tempData[key]);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
var tempData = HttpContext.RequestServices.GetRequiredService&lt;ITempDataDictionary&gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE 1: When using ITempDataDictionary in a custom &lt;strong&gt;ActionResult&lt;/strong&gt; I needed to mark the class with &lt;strong&gt;IKeepTempDataResult&lt;/strong&gt; for it to work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE 2: I am not sure if this is going to change but currently the implementation for ITempDataDictionary only accepts primitive values (and string). I got around this by serializing to and from json. If you want to do this, you might find these extension methods useful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public static void SetAsJson&lt;T&gt;(this ITempDataDictionary tempData, string key, T data)
{
  var sData = JsonConvert.SerializeObject(data);
  tempData[key] = sData;
}

public static T GetFromJson&lt;T&gt;(this ITempDataDictionary tempData, string key)
{
  if(tempData.ContainsKey(key))
  {
  	var v = tempData[key];

    if(v is T)
    {
    	return (T)v;
    }

    if(v is string &amp;&amp; typeof(T) != typeof(string))
    {
      var obj = JsonConvert.DeserializeObject&lt;T&gt;((string)v);
      return obj;
    }
  }
  return default(T);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So hope you and future me finds this post useful. I am going to try blog little things like this as I work more with ASP.NET 5. Please let me know in the comments below if you did find it useful or if I missed anything. Also let me know if there are other topics you want me to cover.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/aspnet-vsonline-ci/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/aspnet-vsonline-ci/"/>
    <title>ASP.NET 5 CI from Git to Azure without Visual Studio</title>
    <updated>2015-09-10T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/aspnet-vsonline-ci/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Using Visual Studio Online Build Services for a MSBuild/xproj free deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So my laptop was in for repairs so I decided to dust off my old Macbook Pro. I upgraded to Yosemite, downloaded &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt; and ran through the the &lt;a href=&quot;http://docs.asp.net/en/latest/getting-started/installing-on-mac.html&quot;&gt;setup for DNX&lt;/a&gt; on Mac. Very quickly I started to wonder about deploying to &lt;a href=&quot;http://azure.microsoft.com/en-us/get-started/&quot;&gt;Azure&lt;/a&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;I had previously used the steps described &lt;a href=&quot;https://msdn.microsoft.com/Library/vs/alm/Build/azure/deploy-aspnet5&quot;&gt;here&lt;/a&gt; to deploy a Visual Studio 2015 ASP.NET 5 project from Git but that relied on an xproj file for publishing.&lt;/p&gt;
&lt;p&gt;The other option is publishing to Azure via source control as described &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wanted something similar to the 1st option but for a solution created in VSCode and the aspnet &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/generator-aspnet&quot;&gt;generator&lt;/a&gt; though so what follows is what I have come up with so far.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE: The project structure could use some work but the scripts work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/guy-on-mac_800.jpg&quot; alt=&quot;guy on mac&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Step 1: Project Setup&lt;/h3&gt;
&lt;p&gt;The publish script uses the &lt;code&gt;global.json&lt;/code&gt; file to determine the version and runtime. In the root is also &lt;code&gt;Publish.ps1&lt;/code&gt; and &lt;code&gt;Upload.ps1&lt;/code&gt; powershell scripts.
&lt;a href=&quot;https://github.com/dburriss/vsfree-azure-deploy/tree/master/example&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Global&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/155c693de8f534bd1536.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Setup the &lt;code&gt;global.json&lt;/code&gt; file with properties needed for the publish.&lt;/p&gt;
&lt;h4&gt;Publish script&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/ea01dad652e00b480a7a.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;This script does a couple things along the way to publishing a folder for deployment.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bootstraps DNVM into the Powershell session&lt;/li&gt;
&lt;li&gt;Installs DNX on the build host&lt;/li&gt;
&lt;li&gt;Restores the packages for the project using &lt;code&gt;dnu restore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Packages the project using &lt;code&gt;dnu package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copies the runtime foler into the package (I think dnu restore is supposed to do this but at time of writing it was not)&lt;/li&gt;
&lt;li&gt;Sets the &lt;strong&gt;web.config&lt;/strong&gt; DNX version and runtime&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Upload Script&lt;/h4&gt;
&lt;p&gt;This is a script found here &lt;a href=&quot;https://gist.github.com/davideicardi/a8247230515177901e57&quot;&gt;davideicardi/kuduSiteUpload.ps1 &lt;/a&gt; which worked like a charm.
&lt;strong&gt;UPDATE:&lt;/strong&gt; &lt;em&gt;I changed this script to stop the website before upload and start it again after as deployment was failing regularly with a 500 server error. My guess is locked files.&lt;/em&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/af2e1593543b36b1ee23.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;VSOnline Build Setup&lt;/h4&gt;
&lt;h5&gt;Step 1: Publish&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/Build1.png&quot; alt=&quot;Build step 1 - Publish&quot; /&gt;
Firstly we add a PowerShell script and point the script at our publish script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Script fielname: site/Publish.ps1&lt;/li&gt;
&lt;li&gt;Arguments: -sourceDir $(Build.SourcesDirectory)\pub&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Step 2: Upload&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/Build2.png&quot; alt=&quot;Build step 1 - Upload&quot; /&gt;
Next we setup the upload script by creating an &lt;strong&gt;Azure PowerShell&lt;/strong&gt; script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Subscription: If you do not have one setup click Manage to do so&lt;/li&gt;
&lt;li&gt;Script Path: site/Upload.ps1&lt;/li&gt;
&lt;li&gt;Arguments: -websiteName &lt;em&gt;MyWebSite&lt;/em&gt; -sourceDir $(Build.SourcesDirectory)\pub -destinationPath /site&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where &lt;em&gt;MyWebSite&lt;/em&gt; is the name of the website in Azure.&lt;/p&gt;
&lt;p&gt;Hit &lt;strong&gt;Save&lt;/strong&gt; to save the build configuration.&lt;/p&gt;
&lt;h4&gt;Step 3: Setup CI (optional)&lt;/h4&gt;
&lt;p&gt;If you want CI you can go to the &lt;strong&gt;Triggers&lt;/strong&gt; tab and set a build to trigger on commit to a branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;strong&gt;CI&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Batch changes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;I filtered on &lt;strong&gt;master&lt;/strong&gt; branch. Choose whatever is applicable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hit the &lt;strong&gt;Save&lt;/strong&gt; button.&lt;/p&gt;
&lt;h4&gt;Step 4: Test your Build&lt;/h4&gt;
&lt;p&gt;Now you can either hit &lt;strong&gt;Queue build...&lt;/strong&gt; or if you setup CI do a push to the trigger enabled branch. Note that the triggered build can sometimes take a few minutes to be queued and takes almost 5 minutes to build and deploy even for a small test site.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Thats it for deploying to Azure with a solution developed on OSX (or Linux). Just 2 scripts really.
I hope this helps someone and please leave a comment below if you have any questions or suggestions. Or just want to say it helped :)&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/installing-docker-on-hyper-v/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/installing-docker-on-hyper-v/"/>
    <title>Installing Docker on Hyper-V</title>
    <updated>2015-03-07T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/installing-docker-on-hyper-v/</uri>
    </author>
    <summary type="html">&lt;p&gt;To be clear, currently Docker containers do not run on Windows. Microsoft is working with Docker to release something with feature parity but we will be lucky if we see that in 2015 (&lt;a href=&quot;http://weblogs.asp.net/scottgu/docker-and-microsoft-integrating-docker-with-windows-server-and-microsoft-azure&quot;&gt;Blogged by Scott Gu&lt;/a&gt;). So although there is a client for Windows for managing Docker containers, we will need an Ubuntu install. &lt;a href=&quot;http://devonburriss.me/installing-ubuntu-on-hyper-v/&quot;&gt;Installing Ubuntu on Hyper-V&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/large_h.png&quot; alt=&quot;Docker logo&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Installing Docker&lt;/h1&gt;
&lt;p&gt;Most of this is straight from the &lt;a href=&quot;https://docs.docker.com/installation/ubuntulinux/&quot;&gt;Docker documentation&lt;/a&gt; but I ran into a few problems that I think may be due to this running on Hyper-V. Also I wanted a quick reference in the future.&lt;/p&gt;
&lt;p&gt;First lets update our package repositories:
&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Currently the Docker docs mention pulling from their private repos to get the latest version but that was for Ubuntu 14.04. I noticed Ubuntu 14.10 repos contain Docker 1.2 which is at time of writing good enough for me.&lt;/p&gt;
&lt;p&gt;So lets install Docker:
&lt;code&gt;sudo apt-get install docker.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then so we get bash completion we can type:
&lt;code&gt;source /etc/bash_completion.d/docker.io&lt;/code&gt;
No &lt;strong&gt;sudo&lt;/strong&gt; needed. Alternatively just reboot with:
&lt;code&gt;sudo reboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lets test our Docker install:
&lt;code&gt;sudo docker version&lt;/code&gt;
&lt;code&gt;sudo docker info&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This displays version number of the components and some basic info on the install respectively.&lt;/p&gt;
&lt;p&gt;The info will contain a line &lt;strong&gt;WARNING: No swap limit support&lt;/strong&gt; so lets fix that.
&lt;code&gt;sudo nano /etc/default/grub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Find the line &lt;strong&gt;GRUB___CMDLINE___LINUX&lt;/strong&gt; and edit it:
&lt;code&gt;GRUB_CMDLINE_LINUX=&amp;quot;cgroup_enable=memory swapaccount=1&amp;quot;&lt;/code&gt; then save and exit nano.&lt;/p&gt;
&lt;p&gt;We need to update Grub and reboot.
&lt;code&gt;sudo update-grub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo reboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now running &lt;code&gt;sudo docker info&lt;/code&gt; you will see the warning is gone.&lt;/p&gt;
&lt;p&gt;If we try download and run a docker image we are still not there yet but lets try:
&lt;code&gt;sudo docker run -i -t ubuntu /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Troubleshooting&lt;/h3&gt;
&lt;h4&gt;Unexpected EOF&lt;/h4&gt;
&lt;p&gt;This actually happens every now and again with Docker (I think if latency is bad) so just try run the command again and it will likely work.&lt;/p&gt;
&lt;h4&gt;dial tcp: lookup registery-1.docker.io: no such host&lt;/h4&gt;
&lt;p&gt;The documentation explains how to add a dns to the docker options in &lt;strong&gt;/etc/default/docker&lt;/strong&gt; but this actually didn&apos;t work for me on the Hyper-V. I had to edit &lt;strong&gt;/etc/resolv.conf&lt;/strong&gt; and add the google nameserver there (doesn&apos;t have to be google).
&lt;code&gt;sudo nano /etc/resolv.conf&lt;/code&gt;
Then add &lt;strong&gt;nameserver 8.8.8.8&lt;/strong&gt; on a new line. Save and exit.
You might need to &lt;code&gt;sudo reboot&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Finally lets run something&lt;/h3&gt;
&lt;p&gt;So now we should be ready to go. Run
&lt;code&gt;sudo docker run -i -t ubuntu /bin/bash&lt;/code&gt; again.
This should now pull down the ubuntu image and start up a container running ubuntu (yes we are running Ubuntu in a kernal process on another Ubuntu - inception right?).
The &lt;code&gt;-t&lt;/code&gt; is to assign a terminal and &lt;code&gt;-i&lt;/code&gt; is so the connection is interactive.
Once it is running a terminal prompt will be available. Type &lt;code&gt;echo &apos;Hi&apos;&lt;/code&gt;. The Ubuntu container willl say hi back :)&lt;/p&gt;
&lt;p&gt;So thats it. You have Docker running on a Hyper-V guest.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/installing-ubuntu-on-hyper-v/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/installing-ubuntu-on-hyper-v/"/>
    <title>Installing Ubuntu on Hyper-V</title>
    <updated>2015-03-06T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/installing-ubuntu-on-hyper-v/</uri>
    </author>
    <summary type="html">&lt;p&gt;The reason for this post is just to remind me of a few little things you need to do if you want to create a Generation 2 Ubuntu Virtual Machine on Hyper-V. When setting up the virtual machine in Hyper-V and you select Generation 2.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Create a Virtual Switch 1st&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/Switch1.png&quot; alt=&quot;Navigating to Virtual Switch Manager&quot; /&gt;
I have had good mileage with creating an &amp;quot;External Network&amp;quot; and settiong it to use my Wireless adapter.
&lt;img src=&quot;/images/posts/2015/Switch2-1.png&quot; alt=&quot;Virtual Switches&quot; /&gt;
For one wireless network at a coffee shop it didn&apos;t work and I had to switch to a private one which is a bit more work to create. This blog post describes that setup. One caveat was I had to disable my LAN adapter to get the private setup described to work but your mileage might vary.
See: &lt;a href=&quot;http://www.hurryupandwait.io/blog/running-an-ubuntu-guest-on-hyper-v-assigned-an-ip-via-dhcp-over-a-wifi-connection&quot;&gt;http://www.hurryupandwait.io/blog/running-an-ubuntu-guest-on-hyper-v-assigned-an-ip-via-dhcp-over-a-wifi-connection&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Create the Virtual Machine&lt;/h2&gt;
&lt;p&gt;Go ahead now and click &lt;strong&gt;New &amp;gt; Virtual Machine&lt;/strong&gt; and follow the wizard. Remeber to pick &lt;strong&gt;Generation 2&lt;/strong&gt;. Choose the virtual switch you setup previously. In &lt;strong&gt;Installation Options&lt;/strong&gt; choose the Ubuntu image you downloaded from their website. Remember that for a generation 2 it must be the 64-bit version.
&lt;img src=&quot;/img/posts/2015/Generation2.png&quot; alt=&quot;Pick Generation 2&quot; /&gt;
Here is a full walkthrough of the process if you need it: &lt;a href=&quot;http://www.servethehome.com/run-ubuntu-windows-8-hyper-v-quickly/&quot;&gt;Step by step install of Ubuntu on Hyper-V&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##Before starting it up
The final thing to remember to do before starting up the newly created virtual machine is go into its settings.
&lt;img src=&quot;/img/posts/2015/Settings1.png&quot; alt=&quot;Navigating to settings&quot; /&gt;
Make sure you uncheck Safe Boot
&lt;img src=&quot;/img/posts/2015/Settings2.png&quot; alt=&quot;Uncheck Secure Boot&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Thats it&lt;/h2&gt;
&lt;p&gt;You can now bootup you new virtual machine and Ubuntu will take you through the setup process. Hope this helped you and I am sure it will help future me when I bump up against some of these issues next time I create a new Linux Hyper-V.&lt;/p&gt;
&lt;h3&gt;Setting the resolution&lt;/h3&gt;
&lt;p&gt;One thing you may want to do is change the resolution that Ubuntu runs at. If you go into display settings you will find that you cannot change the resolution there.
It is fairly straight forward but does require some editing of config files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open up Terminal&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;sudo nano /etc/default/grub&lt;/code&gt; and enter (or you can use vi if you prefer)&lt;/li&gt;
&lt;li&gt;Find the setting &lt;strong&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/strong&gt; and add to it so it includes the resolution you want.
&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash video=hyperv_fb:1280x720&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Save and exit nano&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;sudo update-grub&lt;/code&gt; and enter (I ran into a problem here)&lt;/li&gt;
&lt;li&gt;Restart the VM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I believe that 1920 x 1080 is the max that Hyper-V supports.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo update-grub&lt;/strong&gt; was frezzing/hanging whenever I tried to run it. I suspect that this was because I had an external drive in when I created the VM and grub was searching for it.
I managed to get past this by adding the following line at the bottom of /etc/default/grub
&lt;code&gt;GRUB_DISABLE_OS_PROBER=true&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Setup:&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;This setup is valid as of Windows 8.1 running Hyper-V and installing Ubuntu 14.10 as the guest OS.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/testing-the-untestable/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/testing-the-untestable/"/>
    <title>Testing the Untestable</title>
    <updated>2015-01-27T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/testing-the-untestable/</uri>
    </author>
    <summary type="html">&lt;p&gt;If you have ever tried written unit tests for existing code you know it can be quite challenging. Not only is finding what to test difficult, the code usually just wont be testable. If it is code that you have written and you are at liberty to make some sweeping changes, then you can refactor toward testability. If not I still go through a technique at the end of this article for providing testable classes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/bridge-cables-resize.jpg&quot; alt=&quot;bridge cables&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let&apos;s first try refactor toward testablility.
Our checklist is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create integration tests&lt;/li&gt;
&lt;li&gt;Apply &lt;a href=&quot;http://devonburriss.me/single-respon/&quot;&gt;Single Responsibility Principle&lt;/a&gt; (SRP)&lt;/li&gt;
&lt;li&gt;Apply &lt;a href=&quot;http://martinfowler.com/bliki/RoleInterface.html&quot;&gt;Role Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apply Inversion of Control&lt;/li&gt;
&lt;li&gt;Last stand - &lt;a href=&quot;http://amzn.to/1EN0Ymg&quot;&gt;Extract and override&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: In the rest of this article I talk about abstractions and usually use interface as an example. A base class is often just as valid as an interface (unless it has multiple roles since the languages I use only allow one inheritence parent). The NB part is that the rest of your application is coded against the abstraction and knows nothing about the implementation class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Safety net&lt;/h2&gt;
&lt;p&gt;Your first step should be to create some high level integration tests. This will at least give you some indication that you have broken something when you do.&lt;/p&gt;
&lt;h2&gt;What is in a name?&lt;/h2&gt;
&lt;p&gt;A good measure of whether a class adheres to the SRP principle is the name. If the name doesn&apos;t exactly describe what it does, or if it contains words like &apos;manager&apos;, &apos;provider&apos;, &apos;logic&apos;, &apos;handler&apos;, it probably does more than one thing. A name should tell you exactly what a class does, and a class can only have one name...
See the SRP link for an example of splitting a class into it&apos;s various responsibilities.&lt;/p&gt;
&lt;h2&gt;Role abstraction&lt;/h2&gt;
&lt;p&gt;A good practice that can be used in conjuction with SRP is adding role interfaces to a class. Hopefully you can refactor to these roles until a class only contains the members in the abstraction but they are a start. Don&apos;t be afraid of having classes with a minimal amount of properties and/or methods on it. It means it has a very well defined role.
Even if you do not break a class into multiple classes immediately, if you can refer to them by the role interface you will have far fewer breaks in your code later when you do split it.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class CustomerManager
{
	public IEnumerable&lt;Customer&gt; GetAll()
	{
		...
	}

	public string GetOrderEmailTemplate()
	{
		...
	}

	public void SendEmail(string template, Customer customer, Order order)
	{
		...
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on what you prefer you could split this into 2 or 3 interfaces. Definitely a store for retrieving customers and one for email. Better yet would be a 3rd for testability so you can seperate out retrieving email from sending it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public interface CustomerRepository
{
	IEnumerable&lt;Customer&gt; GetAll();
}

public interface EmailStore
{
	string GetOrderEmailTemplate();
}

public interface EmailService
{
	void SendEmail(string template, Customer customer, Order order);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: This is just an example. I would usually try refactor this so that sending the email is completely unaware of the domain model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Really if you have managed to refactor this far you need just split the classes by abstraction and apply Dependency Injection to invert the dependencies and by then you likely have some easily testable classes.&lt;/p&gt;
&lt;h2&gt;Untestable I tell you!&lt;/h2&gt;
&lt;p&gt;Ok so you have looked at the above but to no avail. You have some dependencies in your class that cannot be injected. A very common reason for this is your class has a dependency on a static class that just cannot be refactored right now to an instance. Another reason is that you just cannot make changes to the public API of the class you are testing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING: Think long and hard before using static classes. The ease of use  they offer upfront comes at the dear dear price of testability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the trick to testing a class that seems untestable is &lt;a href=&quot;http://amzn.to/1EN0Ymg&quot;&gt;Extract and Override&lt;/a&gt;. The technique is as follows for the untestable Monster class:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a class &lt;strong&gt;TestableMonster&lt;/strong&gt; that inherits from &lt;strong&gt;Monster&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Now move the class within &lt;strong&gt;Monster&lt;/strong&gt; into protected virtual methods.&lt;/li&gt;
&lt;li&gt;Now you can override any par of &lt;strong&gt;Monster&lt;/strong&gt; you need to to test it.&lt;/li&gt;
&lt;li&gt;In your unit test you will test against &lt;strong&gt;TestableMonster&lt;/strong&gt; but you will call the base class for the bits you want to test on it and provide faked procedures for the parts you need to test &lt;strong&gt;Moster&lt;/strong&gt; in isolation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok so we have gone over the technique in theory, lets take a look at an example.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Here is the untestable Monster class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class Monster
{
	public void ScareAllTheChildren()
	{
		var now = DateTime.UtcNow;
		IEnumerable&lt;Child&gt; children= DataRepository.GetAllChildrenFrom(now);

		foreach (var child in children)
		{
			ScareService.Scare(child);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the actual example code is unlikely, the structure is tragically common. In less than 10 lines of code we have 3 static references. We will come back to the testable class, lets start extracting out the parts that make this class hard to test.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class Monster
{
	public void ScareAllTheChildren()
	{
		DateTime now = GetCurrentUtcDateTime();
		IEnumerable&lt;Child&gt; children = GetChildrenWithBedtimeAfter(now);

		foreach (var child in children)
		{
			ScareChild(child);
		}
	}

	protected virtual void ScareChild(Child child)
	{
		ScareService.Scare(child);
	}

	protected virtual IEnumerable&lt;Child&gt; GetChildrenWithBedtimeAfter(DateTime now)
	{
		return DataRepository.GetAllChildrenFrom(now);
	}

	protected virtual DateTime GetCurrentUtcDateTime()
	{
		return DateTime.UtcNow;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see we have made no changes to the external API of the class. The internal changes were done by wrapping the statics in a method call. Not too much there that is likely to break our production code.
So how would we use this?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class TestableMonster : Monster
{
	public DateTime TestDateTime { get; set; }
    public List&lt;Child&gt; ScaredChildren  { get; set; }
    
	protected override DateTime GetCurrentUtcDateTime()
	{
		return TestDateTime;
	}
    
    protected override void ScareChild(Child child)
	{
		ScaredChildren.Add(child);
		base.ScareChild(child);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example just shows a way to have a date that is settable in your test. You could of course override the other method to return a known list of children.
The following test is more an integration test than a unit test, as the data is not faked (unless you sent back a fake db from the method) but it demonstrates the usage.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
[TestMethod]
public void Scare_With2OutOf3ChildrenAsleep_ScareCalledOn2Children()
{
	//Arrange
	var db = InitializeNewDatabase();
	db.Children.Add(new Child { Name = &quot;Sam&quot;, LastWentToSleep = DateTime.Parse(&quot;2014-01-31 20:00&quot;) });
	db.Children.Add(new Child { Name = &quot;Sam&quot;, LastWentToSleep = DateTime.Parse(&quot;2014-01-31 20:30&quot;) });
	db.Children.Add(new Child { Name = &quot;Sam&quot;, LastWentToSleep = DateTime.Parse(&quot;2014-01-31 21:30&quot;) });
    
	var sut = new TestableMonster();
	sut.TestDateTime = DateTime.Parse(&quot;2014-01-31 20:45&quot;);
    
	//Act
	sut.ScareAllTheChildren();

	//Assert
	Assert.AreEqual(2, sut.ScaredChildren.Count);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So we went through some steps you could take to make your classes more testable. If you find you are testing a lot of static code you might want to look at the paid for version of &lt;a href=&quot;http://www.telerik.com/products/mocking.aspx&quot;&gt;JustMock&lt;/a&gt; or &lt;a href=&quot;http://typemock.com/&quot;&gt;TypeMock&lt;/a&gt; which are the only to frameworks I know of that allow mocking of statics.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: A quick note on DateTime. It is a very sneaky static that leaks into code often. Try make it team policy to not use DateTime and instead use something like this suggested by &lt;a href=&quot;http://ayende.com/blog/3408/dealing-with-time-in-tests&quot;&gt;Ayenda Rahien&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/developer-quest-variables/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/developer-quest-variables/"/>
    <title>Developer Quest II - Variables</title>
    <updated>2014-10-12T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/developer-quest-variables/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Hold this for me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The story so far&lt;/h2&gt;
&lt;p&gt;Lets go over what we have so far from &lt;a href=&quot;http://devonburriss.me/developer-quest-getting-started/&quot;&gt;Part 1&lt;/a&gt; and touch on some terminology. We have a &lt;strong&gt;namespace&lt;/strong&gt; called DeveloperQuest1. Namespaces are a way of grouping an application or parts of it. Specifically its used in the grouping of the Types that make up an application.
Then we have a &lt;strong&gt;class&lt;/strong&gt; called &lt;strong&gt;Program&lt;/strong&gt;. &lt;strong&gt;class&lt;/strong&gt; is the keyword used to define a Reference Type in C#. We will explore it in more detail later in this tutorial. Then we have the first &lt;em&gt;member&lt;/em&gt; of Program. &lt;em&gt;Main&lt;/em&gt; is the &lt;strong&gt;method&lt;/strong&gt; that is run when a console application starts. Methods are ways of grouping behaviour in a program that can be executed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/gfs_36744_2_2.jpg&quot; alt=&quot;hero enters town&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;Writing things to the screen is great but to make programming useful we need to be able to take input from somewhere, store it, manipulate it and possible then show it or save it.
You can think of variables as the buckets that we store values in while we are using them in the program.
We get 2 main categories of variables. &lt;strong&gt;Value Types&lt;/strong&gt; and &lt;strong&gt;Reference Types&lt;/strong&gt;. So every variable has a unique &lt;strong&gt;Type&lt;/strong&gt; that falls into one of these 2 categories but is always a &lt;strong&gt;Type&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Value Types&lt;/h3&gt;
&lt;p&gt;Value types fall into 2 main sub-categories :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;struct&lt;/li&gt;
&lt;li&gt;enumeration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Structs in turn fall into further categories of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numeric&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;user-defined&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I just mention this so you are aware of it when we go through examples. If it doesn&apos;t make much sense right now, don&apos;t worry about it.
So let&apos;s see an example of using a numeric value type&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
int myNumber = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This assigns the number &lt;em&gt;1&lt;/em&gt; to the &apos;bucket&apos; named &lt;em&gt;myNumber&lt;/em&gt;. The default for an &lt;em&gt;int&lt;/em&gt; is zero.
There are numerous types of numeric value types that vary in terms of the size of the number they can hold as well as the precision.
Next are boolean values. The valid options here are either true or false. The default being &lt;em&gt;false&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
bool isHero = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the full list see here: http://msdn.microsoft.com/en-us/library/bfft1t3c.aspx&lt;/p&gt;
&lt;p&gt;Finally a &lt;strong&gt;struct&lt;/strong&gt;. Structs are complex values. These can be used to store groups of values together logically. You will see that these seem a lot like reference types but differ in how they are handled in the program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the Solution Explorer &lt;strong&gt;Right-click&lt;/strong&gt; on the C# Console Project DeveloperQuest1&lt;/li&gt;
&lt;li&gt;Expand &lt;strong&gt;Add&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Class...&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Name the class &lt;strong&gt;Hero&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Ok&lt;/strong&gt;
&lt;img src=&quot;/images/posts/2014/code-change2.jpg&quot; alt=&quot;new class image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will create a new &lt;strong&gt;class&lt;/strong&gt; (will discuss later).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the &lt;strong&gt;class&lt;/strong&gt; keyword to a &lt;strong&gt;struct&lt;/strong&gt; and add the folowing 2 &lt;em&gt;fields&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Save the changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should look like this now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public struct Hero
{
    public int Health;
    public string Name;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt; is used to store text. It is a reference type but is handled in a special way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/so-far-1.jpg&quot; alt=&quot;structure of application&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You will see shortly when we explore reference types how similar they look to a &lt;strong&gt;struct&lt;/strong&gt;.
The key characteristic to understand about value types is that they always point to their own &apos;bucket&apos;.
This can be demonstrated with the following example.
Change your Main &lt;em&gt;method&lt;/em&gt; to match the code below.
Notice the &lt;strong&gt;using&lt;/strong&gt; statement at the top now. This is the &lt;em&gt;System&lt;/em&gt; namespace and allows us to remove &lt;em&gt;System&lt;/em&gt; from in front of &lt;strong&gt;Console&lt;/strong&gt;. This is because &lt;strong&gt;Console&lt;/strong&gt; is a &lt;strong&gt;class&lt;/strong&gt; in the &lt;em&gt;System&lt;/em&gt; namepspace. This makes your code simpler to work with.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
using System;
namespace DeveloperQuest1
{
    class Program
    {
        static void Main(string[] args)
        {
            System.Console.WriteLine(&quot;So you want to be a C# developer?&quot;);

            Hero hero1 = new Hero(){
                Health = 10,
                Name = &quot;Bob&quot;
            };

            Hero hero2 = hero1;
            hero2.Name = &quot;Ted&quot;;
			Type heroType = hero1.GetType();

            Console.WriteLine(&quot;Hero 1 is &quot; + hero1.Name);
            Console.WriteLine(&quot;Hero 2 is &quot; + hero2.Name);
            Console.WriteLine(&quot;Type is &quot; + heroType.Name);
            Console.WriteLine(&quot;Is value type: &quot; + heroType.IsValueType);

            Console.ReadKey();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the application by hitting &lt;strong&gt;F5&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Output should be:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;		Hero 1 is Bob
		Hero 2 is Ted
		Type is Hero
		Is value type: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;em&gt;hero1&lt;/em&gt; and &lt;em&gt;hero2&lt;/em&gt; represent 2 unique values. Changing one does not effect the other.&lt;/p&gt;
&lt;h3&gt;Reference Types&lt;/h3&gt;
&lt;p&gt;Reference types, as the name alludes to, can reference the same &apos;bucket&apos;.
Rather than the &lt;em&gt;struct&lt;/em&gt; keyword, a reference Type uses &lt;em&gt;class&lt;/em&gt;. Usually you will create a &lt;strong&gt;class&lt;/strong&gt; and the &lt;em&gt;members&lt;/em&gt; of the &lt;strong&gt;class&lt;/strong&gt; are comprised of value and reference types. &lt;strong&gt;Members&lt;/strong&gt; can be &lt;em&gt;fields&lt;/em&gt;, &lt;em&gt;properties&lt;/em&gt;, or &lt;em&gt;methods&lt;/em&gt; on a Type. &lt;em&gt;Name&lt;/em&gt; and &lt;em&gt;Health&lt;/em&gt; on &lt;strong&gt;Hero&lt;/strong&gt; above are examples of &lt;em&gt;fields&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&apos;s change the Hero Type from a &lt;em&gt;value&lt;/em&gt; type to a &lt;em&gt;reference&lt;/em&gt; type.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;Hero.cs&lt;/em&gt; by double-clicking it in the Solution Explorer, or click on the tab if it is still open from when you created it.&lt;/li&gt;
&lt;li&gt;Change &lt;strong&gt;struct&lt;/strong&gt; back to &lt;strong&gt;class&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Save&lt;/li&gt;
&lt;li&gt;Hit &lt;strong&gt;F5&lt;/strong&gt; to run the application&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Output should be:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;		Hero 1 is Ted
		Hero 2 is Ted
		Type is Hero
		Is value type: False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;em&gt;hero1&lt;/em&gt; and &lt;em&gt;hero2&lt;/em&gt; both point to the same &apos;bucket&apos; now. Changing one will change the other. Because &lt;em&gt;hero2&lt;/em&gt; points at &lt;em&gt;hero1&lt;/em&gt;, when we changed 2, 1 was also changed because they are the same thing actually. This is the essential difference between a reference type and a value type. Hopefully the names make sense now?&lt;/p&gt;
&lt;h3&gt;Using our new found knowledge&lt;/h3&gt;
&lt;p&gt;We have a reference type that represents our hero. Let&apos;s add functionality to the program so we can give our hero a name.
Change the program to match the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
using System;
namespace DeveloperQuest1
{
    class Program
    {
        static void Main(string[] args)
        {
            Hero hero = new Hero();
            hero.Health = 10;
            Console.WriteLine(&quot;So you want to be a C# developer?&quot;);
            Console.WriteLine(&quot;What is your hero&apos;s name?&quot;);
            hero.Name = Console.ReadLine();

            Console.WriteLine(&quot;Your adventure begins &quot; + hero.Name);
			//to pause program
            Console.ReadKey();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So on line 1 we have the &lt;em&gt;using&lt;/em&gt; statement that imports the &lt;em&gt;System&lt;/em&gt; namespace to we can use it throughout our code without explicitly referencing it all the time.
Our program is in the &lt;em&gt;DeveloperQuest1&lt;/em&gt; namespace.
It contains a &lt;strong&gt;Type&lt;/strong&gt; called &lt;strong&gt;Program&lt;/strong&gt; (which uses the &lt;strong&gt;class&lt;/strong&gt; keyword and is such a reference type).
It contains a &lt;em&gt;method&lt;/em&gt; called &lt;strong&gt;Main&lt;/strong&gt; which is run by default by a console application. We will explore the arguments passed in as &lt;strong&gt;args&lt;/strong&gt; in a later tutorial.
The 1st statement in the Main method declares a new &lt;strong&gt;Hero&lt;/strong&gt; using the &lt;strong&gt;new&lt;/strong&gt; keyword.
We then assign a value of 10 to the hero&apos;s &lt;strong&gt;Health&lt;/strong&gt; &lt;em&gt;field&lt;/em&gt;.
We then write to the Console asking for the hero&apos;s name and read it into the &lt;strong&gt;Name&lt;/strong&gt; &lt;em&gt;field&lt;/em&gt; on the hero. This is done using a &lt;em&gt;method&lt;/em&gt; on &lt;strong&gt;Console&lt;/strong&gt; called &lt;em&gt;ReadLine&lt;/em&gt; which reads everything you type in until you hit &lt;em&gt;Enter&lt;/em&gt;.
We then write out to the console the name we stored on the hero.
Lastly we still have the &lt;em&gt;ReadKey&lt;/em&gt; call which pauses the application. Above it I show the use of comments. These are ignored by the program but can be used by you to leave instructional text. Use only when something is unclear.
Hit &lt;strong&gt;F5&lt;/strong&gt; to run it.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this tutorial we explored the Type categories you get in C# and how to create and use them. In the following tutorial we will dive into &lt;em&gt;classes&lt;/em&gt; and the various &lt;em&gt;members&lt;/em&gt; you can have on them.&lt;/p&gt;
&lt;h3&gt;Further Reading and References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://msdn.microsoft.com/en-us/library/s1ax56ch.aspx&lt;/li&gt;
&lt;li&gt;http://www.albahari.com/valuevsreftypes.aspx&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/developer-quest-getting-started/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/developer-quest-getting-started/"/>
    <title>Developer Quest I - Getting started with C#</title>
    <updated>2014-10-09T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/developer-quest-getting-started/</uri>
    </author>
    <summary type="html">&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The first thing you are going to need as a developer is an Integrated Development Environment (IDE). Technically this is not necessary, you could use a text editor and the compiler in command line but trust me, you don&apos;t want to go that route.
Head over to http://www.visualstudio.com/downloads/download-visual-studio-vs and download Microsoft Visual Studio Express for Windows Desktop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/quest-for-glory-i-so-you-want-to-be-a-hero-dos-title-73699.jpg&quot; alt=&quot;hero running from monster&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update: &lt;a href=&quot;https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx&quot;&gt;Visual Studio Community 2015&lt;/a&gt; is now available which is still free but much fuller featured.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;Your first application&lt;/h2&gt;
&lt;p&gt;We are going to be building a Console Application initially, since this is probably the easiest to get up and running with.
A console application project is what is used to create .exe programs that you may have seen or used.
Once you have Visual Studio installed, launch it and follow these steps to create the Console Application.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;File &amp;gt; New Project...&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the left-hand tree structure menu pick Visual C# and select &lt;strong&gt;Console Application&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the name field enter &lt;strong&gt;DeveloperQuest1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/new-project.jpg&quot; alt=&quot;VS New Project Window&quot; /&gt;
Visual Studio will now create a solution for you. A solution can hold many projects. A project can be a console app, a Windows Store app, a desktop application, website, etc. The solution file groups all these together for you in a way that lets you easily create references to related projects. Don&apos;t worry about it too much at the moment. We will come back to it in another tutorial.
You should now have a screen that looks similar to this (may differ slightly based on your setup and theme).
&lt;img src=&quot;/img/posts/2014/ide.jpg&quot; alt=&quot;new console application&quot; /&gt;
The IDE shows 3 main windows above.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Document Editor&lt;/strong&gt; - this is where you edit your program files. Currently it shows the Program.cs source file, which is the starting point for the console application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solution Explorer&lt;/strong&gt; - allows you to browse the contents of your solution, open files and view properties of items in the solution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output Window&lt;/strong&gt; - shows messages of what Visula Studio is doing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you hit the &lt;strong&gt;F5&lt;/strong&gt; key Visual Studio will build and run the application. Building basically means it takes your &lt;strong&gt;.cs&lt;/strong&gt; files in the solution and turns them in instructions that a computer can understand.
So lets make a change to the program and run it. Add the folowing lines within the {} in the &lt;strong&gt;Main&lt;/strong&gt; method of &lt;strong&gt;Program&lt;/strong&gt; so it looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
System.Console.WriteLine(&quot;So you want to be a C# developer?&quot;);
System.Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also remove all the &lt;em&gt;using&lt;/em&gt; statements at the top from line 1 - 5.
&lt;img src=&quot;/img/posts/2014/code-change1.jpg&quot; alt=&quot;added console writeline charp code&quot; /&gt;
Now hit &lt;strong&gt;F5&lt;/strong&gt; again to build and run the application. The console application should ask you if this is the path for you. If it is, look out for the following tutorial in this series.&lt;/p&gt;
&lt;h2&gt;Whats Next?&lt;/h2&gt;
&lt;p&gt;Next we will be looking at how you can capture input from the console application so you can interact with it.
If you have any questions or suggestions, please don&apos;t hesitate to leave a comment below. Happy coding!
&lt;a href=&quot;http://devonburriss.me/developer-quest-variables/&quot;&gt;The adventure continues here.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/software-development-is-like-a-piece-of-string/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/software-development-is-like-a-piece-of-string/"/>
    <title>Software development is like a piece of string</title>
    <updated>2014-10-03T00:00:00+00:00</updated>
    <author>
      <name></name>
      <uri>https://devonburriss.me/software-development-is-like-a-piece-of-string/</uri>
    </author>
    <summary type="html">&lt;p&gt;Software like many things in life, is one of those things that the further down a path you go, the harder it is to back out. When I think of a software project I think of a piece of string. The longer the project, the longer the string.
The string is the perfect length to reach the end. Each and every time we make a poor design decision or a bad implementation we effectively add a knot in the string. One or two of these and we might still be able to stretch it to reach the end but most likely if we want to reach the end, we are going to need to unravel the knot we created.
I see it over and over again in projects, both my own knots and the knots of colleagues. We make these knots knowingly, thinking we can come back later, or thinking they can slip by but they always hold things up somewhere.
If they don&apos;t force you to come back and undo them later, they slow the velocity of the project, negating any time you may have saved in implementation time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/yarn-800.jpg&quot; alt=&quot;library&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Bottom line. Don&apos;t take shortcuts. I am not saying it has to always be the very best implementation but it should always be something elegant. Dirty hacks always fester eventually.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/testing-your-data-repositories/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/testing-your-data-repositories/"/>
    <title>Testing your data repositories</title>
    <updated>2014-09-07T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/testing-your-data-repositories/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Avoiding dependency on a data layer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My solution was to use an in-memory H2 database (http://www.h2database.com/html/main.html) which can be created and dropped on a per test basis. To do this I used the Command Pattern (http://en.wikipedia.org/wiki/Command_pattern) to create and then drop the table for each test. In case you are not familiar with the command pattern:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/books-800-medium.jpg&quot; alt=&quot;library&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Command Pattern&lt;/h2&gt;
&lt;p&gt;The command pattern is pretty simple. You define an interface with the method that will be called to execute some functionality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public interface Command {
	void execute() throws Exception;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;So this is what the end result looks like. How you execute you commands is up to you but in case you are looking for the details I have included them further down in the article.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class CommitteeTableCommandTest {         
	private String connectionString = &quot;jdbc:h2:~/test&quot;;     
	
	@Test    
	public void create_NewCommitteeRecord_PersistsToDb() throws Exception {                 
		try(Database database = new H2DatabaseImpl(connectionString, &quot;&quot;, &quot;&quot;)){
				Command cc = new CreateCommitteeTableCommand(database);          
				cc.execute();                         
				CommitteeEntity entity = new CommitteeEntity();            
				entity.setName(&quot;Test&quot;);    
				entity.setMandate(&quot;Blah Blah&quot;);
                
				CommitteeRepository sut = new CommitteeRepositoryImpl(database);
				sut.create(entity);
				Assert.assertNotNull(sut.getByName(&quot;Test&quot;).get(0));
				Command cd = new DropCommitteeTableCommand(database);
				cd.execute();
		}         
	
		Assert.assertTrue(true);    	
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The Details&lt;/h3&gt;
&lt;p&gt;For the creation and dropping of the table I created a generic abstract base class for each. I am using OrmLite (http://ormlite.com/) (the Java library, not C# one – which is unrelated) for my Object Relational Mapper. This gives me a database agnostic way for handling the mundane database tasks without mixing my Java and SQL. You could quite easily write SQL for this, as long as you take any differences in database providers into consideration. On to the solution…&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Base create command&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public abstract class BaseCreateTableCommand&lt;T&gt; implements Command { 
	
	private Database database;    
	private Class&lt;T&gt; typeOfT;
	
	@SuppressWarnings(&quot;unchecked&quot;)    
	public BaseCreateTableCommand(Database database){        
		this.database = database;
		ParameterizedType genericSuperclass = (ParameterizedType) getClass().getGenericSuperclass();
	    Type type = genericSuperclass.getActualTypeArguments()[0];
	    if (type instanceof Class) {
	      this.typeOfT = (Class&lt;T&gt;) type;
	    } else if (type instanceof ParameterizedType) {
	      this.typeOfT = (Class&lt;T&gt;) ((ParameterizedType)type).getRawType();
	    }
	}

	protected void createTableIfNotExists() throws Exception {        
		ConnectionSource connectionSource = new JdbcConnectionSource(database.getConnectionUri(), database.getUsername(), database.getPassword());  
		TableUtils.createTableIfNotExists(connectionSource, typeOfT);        
		connectionSource.close();    
	}  

	public void execute() throws Exception {                 
		this.createTableIfNotExists();    
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Base drop command&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public abstract class BaseDropTableCommand&lt;T&gt; implements Command {     
	private Database database;    
	private Class&lt;T&gt; typeOfT;         
	
	@SuppressWarnings(&quot;unchecked&quot;)    
	public BaseDropTableCommand(Database database){        
		this.database = database;        
		this.typeOfT = (Class&lt;T&gt;)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0];
	}

	protected void dropTable(Boolean ignoreErrors) throws Exception {

		ConnectionSource connectionSource = new JdbcConnectionSource(database.getConnectionUri(), database.getUsername(), database.getPassword()); 
		TableUtils.dropTable(connectionSource, typeOfT, ignoreErrors);
		connectionSource.close();
	}     
	
	@Override    
	public void execute() throws Exception {
		this.dropTable(true);    
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we inherit from these two classes to flesh out the create and drop commands.
&lt;em&gt;Create command implementation&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class CreateCommitteeTableCommand extends BaseCreateTableCommand&lt;CommitteeEntity&gt; {     
	public CreateCommitteeTableCommand(Database database) {
		super(database);    
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Drop command implementation&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class DropCommitteeTableCommand extends BaseDropTableCommand&lt;CommitteeEntity&gt; {     
	public DropCommitteeTableCommand(Database database){
		super(database);
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only other piece is the Database abstraction, which I have my doubts about so I would
not recommend copying :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Database abstraction&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public abstract class Database implements AutoCloseable {

	private static final int MAX_CONNECTIONS_PER_PARTITION = 2;

	private static final int MIN_CONNECTIONS_PER_PARTITION = 1;

	private static final int LOGIN_TIMEOUT = 10;

	protected final Logger logger = LoggerFactory.getLogger(getClass());
	
	protected String connectionUri;
	protected String username;
	protected String password;
	
	protected BoneCP connectionPool = null;

	public Database() {
		super();
	}

	public Connection getConnection() throws SQLException {
		logger.trace(&quot;getConnection called.&quot;);
		return getPooledConnection();
	}
	
	public String getConnectionUri(){
		return this.connectionUri;
	}
	
	public String getUsername(){
		return this.username;
	}
	
	public String getPassword(){
		return this.password;
	}

	public abstract String getDriver();

	
	public void close() throws Exception {
		logger.trace(&quot;close called (this is close() on the database...not a single connection).&quot;);
		if(this.connectionPool != null)
			this.connectionPool.shutdown();
		
		this.connectionPool = null;
	}

	protected void setup(String driver, String connectionUri, String username, String password) throws ClassNotFoundException, SQLException {
		logger.trace(&quot;setup called.&quot;);
		try {
			Class.forName(driver);

			this.connectionUri = connectionUri;
			this.username = username;
			this.password = password;
			DriverManager.setLoginTimeout(LOGIN_TIMEOUT);

		} catch (ClassNotFoundException e) {
			logger.error(e.getMessage(), e);
			throw e;
		}
	}

	private Connection getPooledConnection() throws SQLException {
		Connection conn;

		if(connectionPool == null)
			setupConnectionPool(connectionUri, username, password);
		
		conn = connectionPool.getConnection();
		return conn;
	}

	private void setupConnectionPool(String connectionUri, String username,	String password) throws SQLException {
		
		BoneCPConfig config = new BoneCPConfig();
		config.setJdbcUrl(connectionUri);
		config.setUsername(username); 
		config.setPassword(password);
		config.setMinConnectionsPerPartition(MIN_CONNECTIONS_PER_PARTITION);
		config.setMaxConnectionsPerPartition(MAX_CONNECTIONS_PER_PARTITION);
		config.setPartitionCount(1);
		config.setLazyInit(true);
		connectionPool = new BoneCP(config);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;H2 implementation&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class H2DatabaseImpl extends Database {

	private final String driver = &quot;org.h2.Driver&quot;;
	
	public H2DatabaseImpl(String connectionUri, String username, String password) throws ClassNotFoundException, SQLException{
		super();
		this.setup(driver, connectionUri, username, password);
	}
	
	@Override
	public String getDriver() {
		return driver;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Just for kicks...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I created a command queue, which itself is a command to enumerate through and execute a list of commands. Here just because its useful, not for purposes of this example. You can chain your inserts and then your drops into two commands using this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class CommandQueue implements Command {     
	private List&lt;Command&gt; commands;    
	private Boolean breakOnError = true;         
	
	public CommandQueue(List&lt;Command&gt; commands, Boolean breakOnError){        
		if(commands == null)            
			throw new IllegalArgumentException(&quot;commands&quot;);        
		
		this.commands = commands;                 
		
		if(breakOnError != null)            
			this.breakOnError = breakOnError;    
	}    
	
	@Override    
	public void execute() throws Exception {        
		int pos = 0;        
		try {            
			pos = executeImpl(pos);
		} catch (Exception e) {            
			if(this.breakOnError)                
				throw e;        
		}    
	}    
	
	private int executeImpl(int pos) throws Exception {        
		int size = this.commands.size();        
		
		for (int i = pos; i &lt; size; i++) {            
			try {                
				this.commands.get(pos).execute();                
				pos++;            
			} catch (Exception e) {                
				if(this.breakOnError)                    
					throw e;                
				executeImpl(++pos);            
			}        
		}        
		
		return pos;    
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me know if you found this useful, or if you have a better way for testing your data persistence...&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/single-respon/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/single-respon/"/>
    <title>Single Responsibility Principle</title>
    <updated>2014-09-05T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/single-respon/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;S&lt;/strong&gt; in &lt;strong&gt;SOLID&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I had to pick one principle that had to be enforced strongly on a code base, this would be it. Most techniques for writing elegant code fall by the wayside if this principle is not followed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Layering your application.&lt;/strong&gt; Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inversion of Control.&lt;/strong&gt; Constructor injection overload!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Polymorphism.&lt;/strong&gt; I am a concrete implementation of what exactly?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t repeat yourself.&lt;/strong&gt; Well this does something slightly different…&lt;/p&gt;
&lt;p&gt;It has been a long time but I do remember a time when I was averse to lots of files in a development project. When I had god classes that contained demi-god functions. I am not sure if it is related but it may have been a side effect of programming in a dynamic language but to blame it on a language would be naïve. Besides, I learned the basics of programming in C++ and Java. I also remember a time when every little change I made in my projects broke a chain of other parts, some expected, and way too many completely unexpected. And it was exactly those circumstances that made me question how I was doing things. Enter SRP.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;Since it is a principle, rather than a rule; it doesn’t have one clear definition but as far as I can tell Robert C. Martin (http://www.objectmentor.com/omTeam/martin_r.html) coined the term and so his definition will be used:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;THERE SHOULD NEVER BE MORE THAN ONE REASON FOR A CLASS TO CHANGE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a very simple statement but one that is quite hard to get right in practice. It takes discipline to think carefully about where each piece of code is placed to make sure it belongs there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/train-track-800-slim.jpg&quot; alt=&quot;trainline into the distance&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Class Cohesion&lt;/h2&gt;
&lt;p&gt;A discussion of SRP would not be complete without mention of cohesion (http://en.wikipedia.org/wiki/Cohesion_(computer_science)). Cohesion is the measure of how well the members of a class group together. An easy tell to look for when looking for classes with low cohesion is to look for fields that are used in separate functions. If you find a field that is used in some functions, and another field that is used in others, it is likely that you need 2 classes rather than 1 for the behaviour. We will see an example of this later.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Ok. Enough talk (or writing rather…). Lets look at an example of a class that does not follow SRP and refactor it towards one that does.
The example I use is a service that processes a customer’s order.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class OrderServiceBefore : IDisposable
{
    private const string connection = @&quot;c:\Example.mdf&quot;;
    private readonly DataContext db;
    private SmtpClient emailClient;
    public OrderServiceBefore()
    {
        this.db = new DataContext(connection);
        this.emailClient = new SmtpClient();
    }

    public void Process(Order order)
    {

        //validate order            
        if (order == null)
            throw new ArgumentNullException(&quot;order&quot;);
        if (order.Customer == null)
            throw new ArgumentException(&quot;Customer cannot be null.&quot;);
        if (order.OrderLines.Count &lt; 1)
            throw new InvalidOperationException(&quot;Cannot process an order with no lineitems.&quot;);

        //save order
        db.GetTable&lt;Order&gt;().Attach(order);
        db.SubmitChanges();

        //email order form
        var email = string.Format(&quot;New order {0} place on {1} by {2}.&quot;);
        foreach (var item in order.OrderLines)
        {
            email = email + &quot;\n&quot;;
            email = email + item.Product + &quot; : &quot; + item.Quantity;
        }
        emailClient.Send(new MailMessage(&quot;me@me.com&quot;, &quot;sales@company.com&quot;));
    }

    public void Dispose()
    {
        if (this.db != null)
            this.db.Dispose();
        if (this.emailClient != null)
            this.emailClient.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the code you can see that the Process method does more than 1 thing. It checks the validity of the order, persists it to the database, and then emails sales with the order details.
Lets start refactoring this toward a cleaner implementation…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class OrderServiceIntermediate : IDisposable
    {
        private const string connection = @&quot;c:\Example.mdf&quot;;
        private readonly DataContext db;
        private SmtpClient emailClient;

        public OrderServiceIntermediate()
        {
            this.db = new DataContext(connection);
            this.emailClient = new SmtpClient();
        }

        public void Process(Order order)
        {
            OrderProcessGaurd(order);
            SaveOrder(order);
            EmailOrderToSales(order);
        }

        private void EmailOrderToSales(Order order)
        {
            var email = string.Format(&quot;New order {0} place on {1} by &quot;);
            foreach (var item in order.OrderLines)
            {
                email = email + &quot;\n&quot;;
                email = email + item.Product + &quot; : &quot; + item.Quantity;
            }

            emailClient.Send(new MailMessage(&quot;me@me.com&quot;, &quot;sales@comp&quot;));
        }

        private void SaveOrder(Order order)
        {
            db.GetTable&lt;Order&gt;().Attach(order); db.SubmitChanges();
        }
        private void OrderProcessGaurd(Order order)
        {
            if (order == null)
                throw new ArgumentNullException(&quot;order&quot;);
            if (order.Customer == null)
                throw new ArgumentException(&quot;Customer cannot be null.&quot;);
            if (order.OrderLines.Count &lt; 1)
                throw new InvalidOperationException(&quot;Cannot process an order with no lineitems.&quot;);
        }
        public void Dispose()
        {
            if (this.db != null)
                this.db.Dispose();

            if (this.emailClient != null)
                this.emailClient.Dispose();
        }

    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here all I did was extract the different activities being performed into methods. This does little else other than make the intent of the Process method clearer, which in turn highlights that this class contains implementation details outside of it’s responsibility.
So lets extract these methods into classes that are responsible for the needed functionality. We will interface each of these so we can inject the abstraction in rather than the concrete implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class OrderRepository : IOrderRepository
    {
        private const string connection = @&quot;c:\Northwnd.mdf&quot;;
        private readonly DataContext db;
        public OrderRepository()
        {
            this.db = new DataContext(connection);
        }
        public void SaveOrder(Order order)
        {
            db.GetTable&lt;Order&gt;().Attach(order);
            db.SubmitChanges();
        }
        public void Dispose()
        {
            if (this.db != null)
                this.db.Dispose();

        }
    }
    public interface IEmailService : IDisposable 
    { 
        void SendOrderToSales(Order order);    
    }

    public class EmailService : IEmailService { 

        private SmtpClient emailClient; 

        public EmailService() { 
            this.emailClient = new SmtpClient(); 
        } 
        public void SendOrderToSales(Order order)        
        {            
            var email = BuildEmailContent(order);                         
            emailClient.Send(new MailMessage(&quot;me@me.com&quot;, &quot;sales@company.com&quot;));        
        }          
        
        private string BuildEmailContent(Order order)        
        {            
            var email = string.Format(&quot;New order {0} place on {1} by {2}.&quot; );           
            foreach (var item in order.OrderLines)            
            {                
                email = email + &quot;\n&quot;;                
                email = email + item.Product + &quot; : &quot; + item.Quantity;            
            }            
            return email;        
        }          
        public void Dispose() 
        { 
            if (this.emailClient != null)                
                this.emailClient.Dispose(); 
        } 
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these new classes extracted we can now make use of them in our OrderService class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class OrderServiceAfter : IDisposable
    {
        private readonly IOrderRepository orderRepository;
        private readonly IEmailService emailService;
        public OrderServiceAfter(IOrderRepository orderRepository, IEmailService emailService)
        {
            this.orderRepository = orderRepository;
            this.emailService = emailService;
        }
        public void Process(Order order)
        {
            OrderProcessGaurd(order);
            orderRepository.SaveOrder(order);
            emailService.SendOrderToSales(order);
        }
        private void OrderProcessGaurd(Order order)
        {
            if (order == null)
                throw new ArgumentNullException(&quot;order&quot;);
            if (order.Customer == null)
                throw new ArgumentException(&quot;Customer cannot be null.&quot;);
            if (order.OrderLines.Count &lt; 1)
                throw new InvalidOperationException(&quot;Cannot process an order with no lineitems.&quot;);
        }
        public void Dispose()
        {
            if (orderRepository != null)
                orderRepository.Dispose();
            if (emailService != null)
                emailService.Dispose();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;Lets take a quick look at what running code metrics on this in Visual Studio 2013 looks like (Analyze &amp;gt; Calculate Code Metrics for Selected Projects).
&lt;img src=&quot;/img/posts/2014/Code-Metrics-SRP.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maintainability Index&lt;/strong&gt; – Here we see a nice gain just separating out into functions, with a 1 point drop when separating out into classes. I guess Microsoft see it as less maintainable with the logic in different classes. Marginally. The gains on the other criteria more than make up for the 1 point drop though. See: &lt;a href=&quot;http://blogs.msdn.com/b/zainnab/archive/2011/05/26/code-metrics-maintainability-index.aspx&quot;&gt;http://blogs.msdn.com/b/zainnab/archive/2011/05/26/code-metrics-maintainability-index.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;&lt;strong&gt;Cyclomatic Complexity&lt;/strong&gt;&lt;/a&gt; – This basically highlights the paths through the code. It is a good measure of how complex the code is. This dropped so marginally. Typically we can see much better gains here when applying SRP on more complex problems. See: &lt;a href=&quot;http://blogs.msdn.com/b/zainnab/archive/2011/05/17/code-metrics-cyclomatic-complexity.aspx&quot;&gt;http://blogs.msdn.com/b/zainnab/archive/2011/05/17/code-metrics-cyclomatic-complexity.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Depth of Inheritance&lt;/strong&gt; – We are not using inheritance to solve this problem so not going to touch on this. See: [http://blogs.msdn.com/b/zainnab/archive/2011/05/19/code-metrics-depth-of-inheritance-dit.aspx](http://blogs.msdn.com/b/zainnab/archive/2011/05/19/code- metrics-depth-of-inheritance-dit.aspx)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Coupling_(computer_programming)&quot;&gt;&lt;strong&gt;Class Coupling&lt;/strong&gt;&lt;/a&gt; – We dropped the coupling to other classes quite substantially. This is a very good thing. The less dependencies you class has, the less likely that it breaks due to a change elsewhere in the codebase. See: &lt;a href=&quot;http://blogs.msdn.com/b/zainnab/archive/2014/02/22/10168042.aspx&quot;&gt;http://blogs.msdn.com/b/zainnab/archive/2014/02/22/10168042.aspx&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.objectmentor.com/resources/articles/srp.pdf&quot;&gt;http://www.objectmentor.com/resources/articles/srp.pdf&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/estimation/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/estimation/"/>
    <title>Estimation</title>
    <updated>2014-08-07T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/estimation/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Tackling the uncertainty of software estimation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most developers are horrible at estimation. Period. There are numerous reasons for this. Some of the responsibility falls outside of a developers control but there are still steps that a developer is obligated to take.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Under-estimating the complexity&lt;/h2&gt;
&lt;p&gt;Without actually writing the code a developer can never know every nuance of the problem and possible corresponding solutions. Not to mention the problems spawned from the chosen solutions. This gets better with experience but is not an exact science. Even with UML diagrams and use-cases, the devil is in the details. The best course of action for a developer here is to break the the problem down into such small subtasks that the possible problems start to expose themselves but even this is not a guarantee. Not to mention the time that this actually takes. It falls to management to ensure that developers have the time they need to make these estimates, as well as all the information to do so. It falls to the developers to insist on both of these. Even so. These are only estimates and should be seen as such and not taken by any stake-holders as commitments, unless the developer has committed to these times under no duress.&lt;/p&gt;
&lt;h3&gt;Solution: Break down tasks&lt;/h3&gt;
&lt;p&gt;As mentioned. Breaking down the tasks into easier to estimate chunks will go a long way in refining the schedule, as well as revealing hidden complexity.&lt;/p&gt;
&lt;h2&gt;Over-estimating ability&lt;/h2&gt;
&lt;p&gt;Often a problem seems simple and as a developer you would like to think you could implement a solution in minimal time. This often happens when problems emerge similar to ones we have solved before. Resist the urge to commit. Find out all the information. Break it down. Plan. Estimate. Do not let your ego get you into a position where you are sacrificing your health, family, and friends for a deadline you cannot realistically meet. And DO NOT sacrifice quality. There are no true shortcuts. What you gain in the short term you will lose over the length of the project with interest.&lt;/p&gt;
&lt;h3&gt;Solution: Planning Poker&lt;/h3&gt;
&lt;p&gt;Planning Poker (http://en.wikipedia.org/wiki/Planning_poker) is an estimation technique. The basics are such:
Get some developers into a room.
Discuss a task that needs implementation.
All developers write down an estimate or hold up fingers at the same time with their estimate.
If there are huge discrepancies the task is discussed more. Discussions and estimations are repeated until all developer estimations are similar.&lt;/p&gt;
&lt;p&gt;See: &lt;a href=&quot;http://www.mountaingoatsoftware.com/agile/planning-poker&quot;&gt;http://www.mountaingoatsoftware.com/agile/planning-poker&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Handed down deadlines&lt;/h2&gt;
&lt;p&gt;Sometimes deadlines are given to you from above. As an employee you will feel pressured to accept these deadlines. It is your choice whether you accept them. In The Clean Coder, “Uncle Bob” talks about the responsibilities of developers and managers. CEOs are trying to strategically grow a business, marketing is trying to win customers, project managers are trying to meet deadlines, and as a developer you are tasked with developing a quality product for the customer. By agreeing to unrealistic deadlines, you endanger the project. The earlier problems are identified, the more chance that catastrophe can be avoided.&lt;/p&gt;
&lt;h3&gt;Solution: Team discussion of workable solution&lt;/h3&gt;
&lt;p&gt;If a deadline is immovable, the team (including the customer) need to work together toward a realistic goal. Features can be cut, overtime can be worked (within reason), and additional resources can be allocated (to a point) but the end result should always be a quality solution. Cutting corners just slows down development in the long run. A project becomes a mess. Productivity grinds to a halt. It is a chore to work on and eventually developers leave the company rather than work on the project.&lt;/p&gt;
&lt;h2&gt;PERT&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Program_evaluation_and_review_technique_(PERT)&quot;&gt;Pert&lt;/a&gt; is an estimation technique developed by the U.S Navy for estimating projects. Combining it with planning poker should give a reasonable idea of when you can expect a task to be done. It works as follows.
A developer will give 3 estimates for a work item (use with Planning Poker).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O:&lt;/strong&gt; Optimistic estimate – this is the time to complete a task if the stars align and unicorns come down and help complete the code. In other words, the best case scenario.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P:&lt;/strong&gt; Pessimistic estimate – this is the time to complete a task when you have invoked the wrath of the programming gods. So. The worst case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M:&lt;/strong&gt; Most likely estimate – this is the time that a developer usually gives.&lt;/p&gt;
&lt;p&gt;Plugging these values in we can get the time estimate for a task.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;T = (O + 4M + P) ÷ 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Banking on this value would be dangerous though. Some buffer time is usually added to estimates. Rather than just thumb-sucking a buffer time, lets calculate the variance and add that to the estimate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;V = (P – O) ÷ 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Estimate = T + V&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Ok. So lets say that your team is asked to add a Quick Contact widget to an existing website. You get 3 developers in the room and ask for times.&lt;/p&gt;
&lt;p&gt;You get the following answers. 1, 3, and 4. In days.&lt;/p&gt;
&lt;p&gt;The 1 came from the developer who is going to be doing the work. 3 from the developer who did most of the existing widgets. 4 from the team lead. Due to the large discrepancies, discussions ensue. It turns out the widget creation process is non trivial but some functionality is inherited from existing widgets. So another round of planning poker gives the following values 3, 3 , and 4. You decide to go with 3.
This was for the most likely time. For the best case you get 1 day and worst case is 7 days.
&lt;strong&gt;T&lt;/strong&gt; = &lt;em&gt;(O + 4M + P) ÷ 6&lt;/em&gt; = &lt;em&gt;(1 + 12 + 7) ÷ 6 = 3.3 V&lt;/em&gt; = &lt;em&gt;(P – O) ÷ 6&lt;/em&gt; = &lt;em&gt;(7 – 1) ÷ 6&lt;/em&gt; = &lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Estimate = T + V = 4.3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So let&apos;s schedule this for a 4.5 days.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So knowing our failings, and bearing in mind the goals of management, we can mitigate potential disaster by using the techniques outlined here. Estimation is never going to be an exact science but we can go a long way in making our estimates more accurate. Hope this helps. Good luck with your next project.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>https://devonburriss.me/the-way-we-write-code/</id>
    <link type="text/html" rel="alternate" href="https://devonburriss.me/the-way-we-write-code/"/>
    <title>The way we write code…and how we talk about it</title>
    <updated>2014-07-18T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>https://devonburriss.me/the-way-we-write-code/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;The true challenge in writing good software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code takes on a life of its own. As developers we pour our time and intellect into solving problems, and the manifestation of those solutions are found in the lines of code we write. Too often though, the code is controlling us as much as it is controlling the hardware it runs on. We often fail to think about how we write our code, how we structure it, or how others may view or use it. We let one line run to the next, and the code leads us.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/typewriter-800.jpg&quot; alt=&quot;typewriter&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Over the years I became frustrated with the corners that the code led me into. Frustrated with the tangle it became. Frustrated with reading other peoples tangle. So I started down the path of clean code. I researched standards, OOP, clean coding techniques, design patterns, TDD, Agile, DDD, etc. My code got cleaner, maintenance got easier, development velocity didn’t drop as rapidly as the complexity of a project increased. Things were good. There is a problem though. All these methodologies and techniques come with their own dialect. They have terminology and language that describe a complex solution, or a particular design decision in one succinct word. The problem comes in that not every developer is on this path. Many are stuck in fire fighting mode. The overtime hours stack up, any spare minute at work is spent on Facebook trying to find out what was missed while they were working late into the night. Learning new things after all the hours at the office is very low on the their hierarchy of needs. The unfortunate thing is that it is knowledge and experience that gets you out of the fire fight. Testable code, maintainable code. Prioritizing tasks. Understanding deliverables. Managing expectations. Communicating. And slowly I learned that software development is primarily about communication. The larger the project, the more apparent this becomes. Developers, designers, architects, business analysts, project managers, customers. Everybody has a role, and the way they see the project is determined by the lens that that stakeholder dons. Recently I have been leaning more toward methodologies rather than technologies and patterns. These often address the more critical aspects in a project, like communication. I have found though that a lot of my hard won lessons do not garner the immediate appreciation I have for them. The hard learned vocabulary of patterns and methodologies are meaningless when you are working in a team that does not know the terminology nor the benefits of the practices that go with the elitist vocabulary. The vocabulary is important as it allows the succinct identification of a complex idea. It is more important though to be understood by all stakeholders. So while I work on shedding my vocabulary for one with less assumptions, I will try and write about the principles that shape the code I write and the architectural decisions I make. And hopefully I will make elitist snobs out of you who have read this rambling post to the end.&lt;/p&gt;
&lt;h2&gt;Elitist snob training&lt;/h2&gt;
&lt;p&gt;Although the lines tend to blur, I have tried to categorise as best I can.&lt;/p&gt;
&lt;h3&gt;Principles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clean code&lt;/li&gt;
&lt;li&gt;SOLID&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Design Patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Repository&lt;/li&gt;
&lt;li&gt;Factory&lt;/li&gt;
&lt;li&gt;Command&lt;/li&gt;
&lt;li&gt;Decorator&lt;/li&gt;
&lt;li&gt;Visitor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TDD&lt;/li&gt;
&lt;li&gt;DDD&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Methodologies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Agile&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
</feed>