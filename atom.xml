<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Devon Burriss' Blog</title>
  <link href="http://devonburriss.me/"/>
  <link type="application/atom+xml" rel="self" href="http://devonburriss.me/atom.xml"/>
  <updated>2018-08-11T20:35:54.7128087+00:00</updated>
  <id>http://devonburriss.me/</id>
  <author>
    <name>Devon Burriss</name>
    <email></email>
  </author>

  
  <entry>
    <id>http://devonburriss.me/acceptance-tests/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/acceptance-tests/"/>
    <title>Writing readable Acceptance tests</title>
    <updated>2018-08-11T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/acceptance-tests/</uri>
    </author>
    <summary type="html">&lt;p&gt;Acceptance tests can be a great way of making sure you are building the right thing. When used in in a way that uses natural language it also serves as a collaboration tool with stakeholders to define what should be built before it is built. This can save a great deal of development time in making sure you don&apos;t build the wrong thing and also has the added benefit of growing a developers domain knowledge as he or she collaborates with a stakeholder in fleshing out and verifying the acceptance tests. Recently we invested a fair amount of time in a team here at work iterating on the style of the acceptance tests. We figured if the goal is to allow developers and stakeholders to collaborate, then making sure the tests makes sense to both parties is important. In this post I will share some of the experiences I have gained over the years, more specifically showing how we applied this to improving our acceptance tests in my current domain. As always though this was a collaborative effort within the team.&lt;/p&gt;
&lt;h2&gt;A brief introduction&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You probably want to skip to the next section if you already have experience with the Gherkin language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Acceptance or behavior tests come in many different forms but probably the most common is those described in the &lt;a href=&quot;https://docs.cucumber.io/gherkin/reference/&quot;&gt;Gherkin&lt;/a&gt; language which is a domain specific language for writing easily readable specifications that can be executed. The most common keywords used are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Feature&lt;/code&gt;: provide a high-level description of a software feature, and to group related scenarios&lt;br /&gt;
&lt;code&gt;Scenario&lt;/code&gt;: a concrete example that illustrates a business rule. Consists of one or more steps (Given, When, Then, Examples)&lt;br /&gt;
&lt;code&gt;Given&lt;/code&gt;: describe the initial state of a system&lt;br /&gt;
&lt;code&gt;When&lt;/code&gt;: describe events or actions that occur in or against the system&lt;br /&gt;
&lt;code&gt;Then&lt;/code&gt;: describe the expected outcome of the &lt;code&gt;When&lt;/code&gt; actions against the system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Gherkin language has many different runners such as &lt;a href=&quot;https://docs.cucumber.io/&quot;&gt;Cucumber&lt;/a&gt;, &lt;a href=&quot;https://specflow.org/&quot;&gt;Specflow&lt;/a&gt;, and &lt;a href=&quot;http://behat.org/&quot;&gt;Behat&lt;/a&gt; for whatever your programming language of choice is. Using Gherkin is not the only way of writing behavior oriented tests. Many developers just use standard testing frameworks or more low level ones oriented toward behavior testing. Personally I think if you are committed to working on the tests collaboratively with stakeholders it is difficult to overestimate the benefits of a format that is readable to non-developers.&lt;/p&gt;
&lt;h3&gt;Acceptance tests vs Behavior Driven Development (BDD)&lt;/h3&gt;
&lt;p&gt;Although this is not the focus of this post I did want to mention the difference here in my mind. BDD is the practice of defining specification of how a system should behave and automating the execution of those specifications. Defining the specification of what needs to be built requires deliberate discovery of requirements, which requires collaboration between stakeholders and developers. By discovering the unknowns upfront development is more productive, with less surprises and rework throughout the development life-cycle.&lt;/p&gt;
&lt;p&gt;Acceptance tests can be an integral artifact from the process of BDD. In my mind Acceptance tests are simply the tests that answer these simple questions: &amp;quot;What must the feature do?&amp;quot;, &amp;quot;Is it done?&amp;quot;, and &amp;quot;Can I deploy it?&amp;quot;. In a perfect world with perfect confidence in your acceptance tests, they are the gate for continuous delivery of features. Once they are passing the feature is in production.&lt;/p&gt;
&lt;h2&gt;Lost in the woods&lt;/h2&gt;
&lt;p&gt;Once you sit down to write an Acceptance test you start to realise there are many ways you can write them. What classifies as a feature? What level of abstraction do I write against? How specific do I make my scenarios? Black-box tests or not?&lt;/p&gt;
&lt;p&gt;I will attempt to answer these quickly before showing you the evolution of our acceptance tests, although I suspect some of my answers will fall short considering how different team&apos;s stories can be.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What classifies as a feature?&lt;/em&gt; This is a single piece of functionality that can be shipped independently from others. This is often difficult to determine because sometimes just because a feature is independently shippable doesn&apos;t always make sense for it to be shipped. In the examples to follow we experienced this because although different &lt;em&gt;types of Purchase Agreements&lt;/em&gt; have different behavior and can be independently shipped, until we covered a certain subset of all types it didn&apos;t make sense for us to release. A helpful question here might be &lt;em&gt;Could X be broken while Y is still considered correct?&lt;/em&gt; Then it quite possibly could be a feature.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What level of abstraction do I write against?&lt;/em&gt; In a way, this one is easy. The very highest. The one the business operates and talks at. &lt;a href=&quot;http://devonburriss.me/managing-code-complexity/&quot;&gt;Hopefully your code is written at this level of abstraction at the entry point as well&lt;/a&gt;. Your acceptance tests should not be mentioning things in your code or implementation details that are not going to make sense to business stakeholders. The easiest way to check this is to ask a business stakeholder to read your test. Or better yet, co-write them.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;How specific do I make my scenarios?&lt;/em&gt; My advice here would be to make them pretty damn specific. What you are aiming for is an example that has the makings of a real life scenario that a stakeholder would be tackling. You are looking for a couple scenarios that collectively catch most permutations in the system. I don&apos;t think it is necessary to capture EVERY permutation through your scenarios. Other lower-cost forms of testing can catch these if necessary. &lt;code&gt;Examples&lt;/code&gt; can also go a long way in covering permutations if you feel you need them and in a way that doesn&apos;t get too verbose. Use these judiciously though. If the test is no longer going to make sense to a stakeholder, prefer a lower cost test like a unit test to check permutations.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Black-box tests or not?&lt;/em&gt; I use the term &lt;strong&gt;Black-box&lt;/strong&gt; to describe a test that doesn&apos;t know anything about the internals of your code. A black-box acceptance test would exercise the code through a UI, REST API, or command line and then observe the results in a database, message queue, logs, or console output. This has some pros and cons. Firstly you are really exercising your system like any other client would so you can have a lot of confidence that the system is working as a whole. The downside is that measuring the effects can be quite challenging and the tests can often take quite long to run, as well as be complex to setup. Whether you want to do this depends on the cost to benefit ratio. In the past where the core of a system was to orchestrate between many systems, I thought it important to verify that these interaction happened correctly. In that case a black-box test makes sense. For the examples I am going to show later in this post the major complexity was in the numerical calculations of the value of the agreement. Here we chose to execute against elements in the code without a running application because what we cared about was documenting and verifying the workings of these calculations. The most value was in being able to write and execute these in a shorter feedback loop. It did mean we missed some complexity related to persisting the stream of calculations and these needed to be covered by other tests.&lt;/p&gt;
&lt;h2&gt;Waxing lyrical like Goldilocks&lt;/h2&gt;
&lt;p&gt;As mentioned in the introduction we really wanted to make sure that our acceptance tests were understandable by stakeholders and developers alike. We also really wanted these acceptance tests to serve as documentation in the future for how these calculations worked as we discovered in requirements gathering that this knowledge didn&apos;t reside in any one person&apos;s head.&lt;/p&gt;
&lt;p&gt;So scenarios needed to be descriptive enough to really demonstrate how a calculation is done without each scenario being too dense with information. As it turned out this took some refinement.&lt;/p&gt;
&lt;p&gt;As a quick introduction to the domain. In the contract management team we handle agreements with suppliers for an e-commerce company. Based on purchases or sales we might get money off the price of certain products purchased for stock, or sold on the website.
If an agreement is a fixed amount per product sold with a factor of 10, then selling 3 is worth 3 units x 10 EUR = 30 EUR.
Simple right?&lt;/p&gt;
&lt;h3&gt;Too simple&lt;/h3&gt;
&lt;p&gt;The first iteration was optimized for ease of duplication for the developer. A lot of the details of the agreement are hidden. What I particularly dislike about this style is how hard it is to pick out the details that matter. There is some magic around it being &lt;code&gt;agreement1&lt;/code&gt; possibly? See what you think of the first iteration...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Gherkin&quot;&gt;Feature: FixedAmountAgreement

Scenario: Purchase agreement limited to 2 product limitations is finalized (factor is 10, agreement runs for 5 days -&amp;gt; 2 euros per day -&amp;gt; 1 euro per target)
    Given Purchase agreement with id agreement1, starting yesterday and ending 3 days in the future, of type fixed amount, with status approved, with factor 10, and limitations
    | Type    | Name                     | Id   |
    | Product | Samsung Galaxy S8 Zwart  | P1   |
    | Product | Samsung Galaxy S8 Zilver | P2   |
    When the allocation process runs for the Purchase agreement
    Then the total allocated value for each day per product is 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is it easy for you to reason about what that scenario is? It is more about what data is used than what the actual scenario is.&lt;/p&gt;
&lt;h3&gt;Too complex&lt;/h3&gt;
&lt;p&gt;Another trap that is easy to fall into is trying to test too much in a single scenario. This is similar to doing TDD with data driven tests ie. &lt;code&gt;[Theory]&lt;/code&gt; with &lt;code&gt;[InlineData]&lt;/code&gt; when using xUnit in .NET. Here we really loose any meaning in the scenario.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Gherkin&quot;&gt;Feature: SellInAgreement

Scenario Outline: Purchase agreement limited to 2 product limitations is finalized
    Given Purchase agreement with id agreement1, starting yesterday and ending tomorrow, of type &amp;lt;Type&amp;gt;, with status &amp;lt;Status&amp;gt;, with factor 2, and limitations
    | Type    | Name                     | Id   |
    | Product | Samsung Galaxy S8 Zwart  | P1   |
    | Product | Samsung Galaxy S8 Zilver | P2   |
    Given a purchase delivery verified yesterday with products
    | PurchaseDeliveryLineId | ProductId    | Quantity | Price |
    | PD1                    | P1           | 15       | 300   |
    | PD2                    | P2           | 10       | 280   |
    When the allocation process runs for the Purchase agreement
    Then the total allocated value on delivery line 1 is &amp;lt;DeliveryLine1Value&amp;gt;
    And the total allocated value on delivery line 2 is &amp;lt;DeliveryLine2Value&amp;gt;

Examples:
| Status                  | Type                               | DeliveryLine1Value | DeliveryLine2Value |
| approved                | percentage of purchased amount     | 90                 | 56                 |
| invoiced                | percentage of purchased amount     | 90                 | 56                 |
| waiting for credit note | percentage of purchased amount     | 90                 | 56                 |
| pending invoice         | percentage of purchased amount     | 90                 | 56                 |
| pending approval        | percentage of purchased amount     | 0                  | 0                  |
| rejected                | percentage of purchased amount     | 0                  | 0                  |
| deleted                 | percentage of purchased amount     | 0                  | 0                  |
| approved                | fixed amount per product purchased | 30                 | 20                 |
| invoiced                | fixed amount per product purchased | 30                 | 20                 |
| waiting for credit note | fixed amount per product purchased | 30                 | 20                 |
| pending invoice         | fixed amount per product purchased | 30                 | 20                 |
| pending approval        | fixed amount per product purchased | 0                  | 0                  |
| rejected                | fixed amount per product purchased | 0                  | 0                  |
| deleted                 | fixed amount per product purchased | 0                  | 0                  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This one gives me little information on a scenario because it is really many scenarios. This is great for test coverage with a single test. It fails to document the behavior of the system in a way that makes it easy to reason about the characteristics of the system.&lt;/p&gt;
&lt;h3&gt;Just right&lt;/h3&gt;
&lt;p&gt;The problem with both structures so far is they do not represent how a user of the system would reason about calculating the value of the agreement. Let&apos;s step through it and then try write a test with that mental model.&lt;/p&gt;
&lt;p&gt;A user will have an agreement that they want to calculate. At any given time that agreement will apply to some deliveries on products defined in the agreement. When something happens to an agreement it will effect the calculation in a specific way. For example, if the start date of an agreement moves so the agreement runs for longer, then it is likely that more deliveries will fall within the running period of that agreement.&lt;/p&gt;
&lt;p&gt;Ok so with this mental model of how a user would approach calculating the value of an agreement, can we write a test that mimics that...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Gherkin&quot;&gt;Feature: Fixed Amount Sell-in Purchase Agreement

Background:
    Given a fixed amount sell-in Purchase agreement
    | Name      | Value                             |
    | Starting  | 2017-01-05                        |
    | Ending    | 2017-02-25                        |
    | Type      | FixedAmountPerProductPurchased    |
    | Status    | Approved                          |
    | Factor    | 10                                |
    | Product   | P1                                |
    | Product   | P2                                |
    | Product   | P3                                |

 Scenario: Agreement start date is moved backwards so more purchase delivery lines are allocated against
    Given the following purchase delivery lines exist
    | Purchase Delivery Line Id | Product   | Quantity | Price | Verification date |
    | PD1                         | P1      | 3        | 100   | 01-01-2017        |
    | PD2                         | P2      | 6        | 110   | 05-01-2017        |
    | PD3                         | P3      | 10       | 210   | 05-01-2017        |
    And existing allocations for the agreement
    | Purchase Delivery Line Id | Product   | AllocatedValue |
    | PD2                         | P2      | 60             |
    | PD3                         | P3      | 100            |
    When the Purchase agreement start date changes to 2017-01-01
    And allocations are calculated for the Purchase agreement
    Then the following purchase delivery lines are allocated against
    | Purchase Delivery Line Id | Product   | AllocatedValue |
    | PD1                       | P1        | 30             |
    And the total allocated value for the Purchase agreement is 190
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So that &lt;em&gt;agreement has some terms that effect the value&lt;/em&gt; of it. These terms &lt;em&gt;mostly wont change across scenarios&lt;/em&gt;. If they do &lt;em&gt;we want to highlight only the changes&lt;/em&gt;. In the setup then we want to &lt;em&gt;show only what matters for the scenario&lt;/em&gt;. We also want to &lt;em&gt;highlight behavior&lt;/em&gt; and the &lt;em&gt;end result&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Breakdown of the recipe&lt;/h4&gt;
&lt;p&gt;So we use &lt;code&gt;Background&lt;/code&gt; to define the status quo across scenarios. It doesn&apos;t mean some of these values won&apos;t change but we only mention what does. This background can then be held constant across multiple scenarios. This allows us to still be explicit about the status of the agreement without needing to be verbose in EVERY scenario about it. It allows the reader to reuse the information across scenarios. It also means we only need to mention CHANGES.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;Scenario&lt;/code&gt; can now be quite explicit about what will change. This allows us to document behavior way more explicitly than the previous tests while still having explicit information available to the reader if needed in the &lt;code&gt;Background&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Given&lt;/code&gt; steps allow us to define setup that is relevant to each &lt;code&gt;Scenario&lt;/code&gt; only.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;When&lt;/code&gt; steps will now typically define the actions that make a &lt;code&gt;Scenario&lt;/code&gt; unique. This could of course be in the &lt;code&gt;Given&lt;/code&gt; setup or a combination of both but typically it is the &lt;code&gt;When&lt;/code&gt; that makes the scenario interesting.&lt;/p&gt;
&lt;p&gt;Finally the &lt;code&gt;Then&lt;/code&gt; steps allow us to define what happened in the system and what the final result is.&lt;/p&gt;
&lt;p&gt;Do you see the focus on the actual scenario here? Did this convey more of what the business actually considers? I think so.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So our first takeaway was that Acceptance tests and BDD in particular are a means of driving and documenting the expected behavior of the system while engaging with stakeholders.&lt;/p&gt;
&lt;p&gt;Then in writing behavior tests we want to focus on capturing scenarios that are meaningful to stakeholders and accurately capture the mental model they have of the system. By structuring the tests in such a way we not only make it easier for our stakeholders to understand but we also make it much more likely that we grow our understanding of the system. Any technique that allows developers to gain insight into the users perspective is worth more than just test coverage. Software development at its core is about learning a problem space. Writing code is the easy part.&lt;/p&gt;
&lt;p&gt;I hope you found this useful. If you have any thoughts on Acceptance testing, BDD, and/or writing good tests, I would love to hear from you in the comments below.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Background image by &lt;a href=&quot;https://unsplash.com/@nepumuk&quot;&gt;Peter Kleinau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@annapostovaya&quot;&gt;Hanna Postova&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/the-torch-bearer/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/the-torch-bearer/"/>
    <title>The torch bearer</title>
    <updated>2018-05-29T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/the-torch-bearer/</uri>
    </author>
    <summary type="html">&lt;p&gt;Software development can be a complicated process as the complexity of systems grow and the number of people involved increases, especially when these things happen quickly. This is when clear direction is important. Equally, if not more important is the experience and maturity of the teams building the software. Their ability to learn and adapt to the challenges that arise from the growing complexity will depend on mindset and the ability to work together. If a whole team can grow to understand the driving forces delivering the right software in the right way, it can be epic. So... STORY TIME!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;A walk in the dark&lt;/h2&gt;
&lt;p&gt;Imagine trying to walk to the top of a densely forested hill in the dark with no path to follow. Even if you know where you should be going, finding your way would be nearly impossible.&lt;/p&gt;
&lt;p&gt;Your goal is simple, get to the top of the hill. Easier said than done. As you stumble around in the dark, trying to head up the hill, you constantly run into obstacles. You trip over roots that you cannot see and have to push your way through brush and trees that seem to have a will of their own to hold you back. Why is there no path up the hill? Has no one gone this way before?&lt;/p&gt;
&lt;p&gt;As you persist you trip and fall, sliding downward, losing elevation in seconds that you worked what seemed like hours to gain.&lt;/p&gt;
&lt;p&gt;Could this be easier? Of course but how?&lt;/p&gt;
&lt;p&gt;What if there was a light at the top of the hill? This would help some. For one we would know for sure if we were heading in the right direction. We would have a feeling for whether we were getting closer and how far we have to go. We could use it to determine how thick the undergrowth is by the amount of light that shines through, helping us decide on a direction of approach.&lt;/p&gt;
&lt;p&gt;Does this light help us in actually walking? In doing the actual work of moving forward? Not really. It is still dark in the forest, there is still no path, and you are still tripping over those damn roots!&lt;/p&gt;
&lt;p&gt;What if a friend appears with a torch? He has been up the hill before and he has a good idea of the best route with the least resistance up the hill. Does this help? Immensely! The going is still slow but you can now see where you are going. You have someone to warn you of roots. You can even see the roots. And you can catch each other when you stumble. You can even carry the torch for a while...&lt;/p&gt;
&lt;h2&gt;So what the heck does this have to do with software development?&lt;/h2&gt;
&lt;p&gt;For those of you who have been on some tough software development projects, the analogue is probably quite obvious.&lt;/p&gt;
&lt;h3&gt;Goal: Get to the top of the hill&lt;/h3&gt;
&lt;p&gt;In business having a clear goal is important but a goal tells you the what you want to achieve, not necessarily how you are going to achieve it. Blindly following the gradient up means you are probably moving toward your goal but it does little in informing how to achieve it.&lt;/p&gt;
&lt;h3&gt;Vision: Follow the light&lt;/h3&gt;
&lt;p&gt;Having a clear vision of how a goal is going to be achieved is important. It sets a light on top of the hill to be followed. Again it does little in terms of the &lt;em&gt;how&lt;/em&gt; but it gives anyone working toward it a clear sense of moving in the right direction.&lt;/p&gt;
&lt;h3&gt;Experience: A friend to help find the way&lt;/h3&gt;
&lt;p&gt;The most innovative goals. The clearest vision. None of these are worth anything if execution fails. From this you may think my analogue is about Team Leads or Architects who tell development teams how to execute. It is not. The torch bearer shows you the way by walking with you. Guiding, teaching, catching, and learning too. If you want to change the software that teams build you need to change the culture of the teams that build the software.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;If you remake awful software from scratch without changing the culture that created it: you&amp;#39;ll remake awful software&lt;/p&gt;&amp;mdash; Romeu Moura (@malk_zameth) &lt;a href=&quot;https://twitter.com/malk_zameth/status/654710109214371841?ref_src=twsrc%5Etfw&quot;&gt;October 15, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Goals, visions, speeches, manifestos, and tech radars. These things are all useful. They give a direction. They light a fire on top of a hill. They do not however really help people get to the top of the hill. That is done by building people up. Making sure teams have the skills, the collaborative environment, the mentors and experience available to find the path in the dark.&lt;/p&gt;
&lt;p&gt;Although I like thinking software development is like engineering, mostly it is like a long hike in the wilderness.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes it is boring...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/bored.jpg&quot; alt=&quot;bored me&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sometimes you see amazing things...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/reflection.jpg&quot; alt=&quot;reflecting pond&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sometimes you get lost along the way...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/wilderness.jpg&quot; alt=&quot;view of mountains&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;so its good to have someone with experience...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/old-man-daly.jpg&quot; alt=&quot;view of mountains&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;and its easier if you bring some friends.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/friends.jpg&quot; alt=&quot;view of mountains&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I hope your path is challenging and fun, that you meet good people along the way, and that it is well lit.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Social photo by &lt;a href=&quot;https://unsplash.com/@viniciusamano&quot;&gt;Vinicius Amano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Header photo by &lt;a href=&quot;https://unsplash.com/@worldsbetweenlines&quot;&gt;Patrick Hendry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/malk_zameth&quot;&gt;Romeu Moura&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/first-mob-programming/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/first-mob-programming/"/>
    <title>Mobbing a story</title>
    <updated>2018-05-09T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/first-mob-programming/</uri>
    </author>
    <summary type="html">&lt;p&gt;Mob programming can be a great way of sharing knowledge, building ownership, as well as a way of getting a story done with everyone checking it. Although this can be slower because of everyone having an opinion, I do strongly believe that it results in a higher quality implementation with a greater chance of being functionally correct and bug free. I thought it would be helpful to share our learnings while completing a fairly complex story using mob programming.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Mob programming TL;DR&lt;/h2&gt;
&lt;p&gt;So a short TL;DR of mob programming if you don&apos;t know what mob programming is. Basically it is pair programming on steroids. Multiple developers work on a single problem using a single machine. This works well if there is a large screen or projector. All developers can contribute ideas and concerns while one person drives at the keyboard.
One common concern is over the efficiency of having a whole team working on a single problem. If it is a difficult problem, throwing more brain-power at it is a good idea. It also increases understanding and ownership of the code, which increases productivity of a team. Lastly, it is an opportunity for team members to learn from each other which again increases productivity over the long run.&lt;/p&gt;
&lt;h2&gt;Learnings&lt;/h2&gt;
&lt;p&gt;We would regularly stop and review how things had gone and what might work better. This is important to build into all team based activities. Doing the wrong thing as a single developer is one thing, doing it with more people just multiplies the inefficiency. This bring me to the first learning...&lt;/p&gt;
&lt;h3&gt;Time-box the drive time&lt;/h3&gt;
&lt;p&gt;Set a timer for 25 minutes (or whatever time you think works). Once a timer runs out use the moment to review what has been done in the time. Ask questions like &amp;quot;Are we happy with the current direction?&amp;quot; and &amp;quot;Do we want to continue on this path?&amp;quot;. This breaks you from the flow of developing and engages all those brains involved to evaluate early and often. It also provides a good moment to swap drivers so someone else gets a chance at the keyboard. The previous driver then gets a chance to contribute without multitasking.&lt;/p&gt;
&lt;p&gt;Another thing to check every few sessions is energy levels. If people run out of steam, engagement will drop and the benefits of mob programming dwindle.&lt;/p&gt;
&lt;h3&gt;Park when needed&lt;/h3&gt;
&lt;p&gt;One thing we noticed very early on was that we would often go off on tangents that had very little to do with the story we were implementing. As an example we touched on the &lt;a href=&quot;/maintainable-unit-tests&quot;&gt;style chosen to write the unit tests&lt;/a&gt;. This is a worthwhile discussion to have and it is important that the whole team understands and is on-board. On the other hand if we engaged on every topic, we would never complete the story. We decided that if any topic that was not directly related to the story could not be resolved in a few sentences, it should be parked. We wrote down the topic on a sticky note to discuss later and moved on.&lt;/p&gt;
&lt;h3&gt;Have a roadmap&lt;/h3&gt;
&lt;p&gt;This was a fairly complicated problem in an existing codebase that not everybody was familiar with. At times we would lose track of what the current task was. On reflecting we decided it was useful to have a clear goal of what we were currently trying to achieve. We did this by drawing out the tasks that needed doing, their dependencies, and ticking off what had been done. The blue magnet is the task currently being worked on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/mob-todo.jpg&quot; alt=&quot;mob todo list&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Avoid backseat driving&lt;/h3&gt;
&lt;p&gt;We found it nonconstructive to have everyone shouting instructions at the driver. Instead we would discuss a problem and decide on a direction. The driver would then implement what was decided on with the team helping out as necessary.&lt;/p&gt;
&lt;h3&gt;Be courteous to other drivers&lt;/h3&gt;
&lt;p&gt;Criticizing the developer driving does not lead to a constructive environment to mob program in. Remember at some stage you should drive too.&lt;/p&gt;
&lt;h3&gt;Pit-stop early and often&lt;/h3&gt;
&lt;p&gt;Be sure to commit early and often. Whenever a test passes, a new direction is chosen, a refactor is done. Commit it. We learned the hard way what happens if you do a refactoring and then want to back out of it.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The team did comment on certain parts of the activity being more engaging than others. Some activities like creating types with lots of properties can be quite tedious to watch. Some learnings did come out of this, like what parts of the codebase can be repetitive which might be a code smell of over engineering.&lt;/p&gt;
&lt;p&gt;Mob programming is a great activity for working more as a team and for those who have not pair-programmed before, participating without driving might make them more open to pair programming. It is also awesome for sharing knowledge throughout the team. The benefits will pay for the momentary drop in productivity due to parallelizing work. If you approach it in an agile way with continual feedback you can find ways to make it work for you. Just be sure to be accepting toward one another. Have you tried mob programming? If not, give it a go in your team. You do it regularly?
Please share your experiences!&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Background image by &lt;a href=&quot;https://unsplash.com/@hudsonhintze&quot;&gt;Hudson Hintze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@timmarshall&quot;&gt;Tim Marshall&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/simple-trick-to-be-a-better-leader/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/simple-trick-to-be-a-better-leader/"/>
    <title>This one trick will make you a better leader</title>
    <updated>2018-05-04T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/simple-trick-to-be-a-better-leader/</uri>
    </author>
    <summary type="html">&lt;p&gt;If you are a leader, many things are expected from you. Skill. Vision. Charisma. There are other characteristics that don&apos;t always come to mind when thinking of leadership. Loyalty inspires loyalty. Calmness under pressure. Trust inspires trust. Many of the characteristics are quite hard to quantify and difficult to learn. Some people just seem to be born with them and others grow into it, being shaped by their experiences.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;Full disclosure. If you have gotten to this point. The title was click bait. There is no simple trick. Sorry!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I wanted to write about &lt;strong&gt;compassion&lt;/strong&gt;. I will make a case for why it is important for leaders and point you toward how you can cultivate it.&lt;/p&gt;
&lt;h2&gt;Compassion: The missing skill&lt;/h2&gt;
&lt;p&gt;Skill you may ask? It may sound weird to describe compassion as a skill. Call it what you will but it can be learned, and it must be used skillfully. That sounds like a skill doesn&apos;t it?&lt;/p&gt;
&lt;p&gt;How can developing such a touchy-feely thing as compassion help you be a better leader? Let me list the ways developing compassion has helped me.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am calmer when difficult situations arise with colleagues&lt;/li&gt;
&lt;li&gt;Colleagues are more open to my feedback and arguments&lt;/li&gt;
&lt;li&gt;People are more trusting of me&lt;/li&gt;
&lt;li&gt;Difficult situations that previously were awkward are no longer because of a genuine concern for the others well-being&lt;/li&gt;
&lt;li&gt;I derive more joy out of working with people I have more compassion for&lt;/li&gt;
&lt;li&gt;Compassion often compels me to help others&lt;/li&gt;
&lt;li&gt;Compassion gives me a desire to invest in others growth and well-being&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking at that list it may not be immediately evident how these make you a better leader. Well it depends on what type of leader you are wanting to be but I can attest that as I have cultivated compassion loyalty, calmness, and trust have developed in me. As these things have grown in me, so has the measure that others have shown those qualities back toward me.&lt;/p&gt;
&lt;h2&gt;Skillful compassion&lt;/h2&gt;
&lt;p&gt;I wanted to draw attention to using the skill skillfully. Compassion does not mean empathy. For me compassion means that I care for a person&apos;s well-being and am motivated to increase or protect that well-being. Empathy on the other hand is feeling the emotions that another is feeling. As a leader, feeling the emotions of everyone you lead would be extremely draining.&lt;/p&gt;
&lt;p&gt;It seems to me that equanimity is important when in a situation where compassion is in play. You may be in a situation where you have to do something that is going to hurt the other person. Empathy would motivate you to not want to hurt the person because you would feel that pain as well. Compassion on the other hand motivates you to do it in a way that protects the person and lends emotional support but is still responsible.&lt;/p&gt;
&lt;h2&gt;Cultivating compassion&lt;/h2&gt;
&lt;p&gt;You may think that compassion is not something that can be learned but a few years ago I discovered it was. In Buddhist tradition there is a technique called &lt;em&gt;Loving kindness&lt;/em&gt;. It is a meditation exercise but you do not need to be a practicing meditator to practice it. In fact religions around the world has been practicing it for millennia. In many religions it is common to pray for the goodwill of those around you, especially your loved ones. If you are religious this act will probably seem quite familiar. The difference being in how it really becomes a practice rather than something inserted in a prayer.&lt;/p&gt;
&lt;p&gt;I am sure there are many variations on how to practice this but this is how I do it. Don&apos;t be afraid to experiment with what works for you.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To get started &lt;em&gt;find a quiet place to sit&lt;/em&gt; where you will not be interrupted.&lt;/li&gt;
&lt;li&gt;Visualize the most cherished person in your life. This could be a partner, a child, or maybe a parent.&lt;/li&gt;
&lt;li&gt;In your mind say their name followed by &amp;quot;... I wish you peace, happiness, and freedom from suffering&amp;quot;.&lt;/li&gt;
&lt;li&gt;While doing the previous step try direct feelings of love and goodwill toward the person&lt;/li&gt;
&lt;li&gt;Move on to your next most cherished person and repeat the steps. Saying the phrase and projecting those feelings.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will go from family, to friends, then colleagues, and acquaintances, until you are vaguely just visualizing a specter of a stranger and directing those feelings toward your fellow humanity. Doing this daily for just a few minutes a day will start to cultivate a sense of compassion for everyone you come across. Not only will this build relationships with colleagues at work but it will also enrich your personal life.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope I have convinced you that compassion is both an important aspect of leadership and something that can be improved.&lt;/p&gt;
&lt;p&gt;One disclaimer: I am not sure what the results of this are without a corresponding practice in mindfulness. I mentioned exercising equanimity in difficult situations and mindfulness meditation is how I cultivate that equanimity.&lt;/p&gt;
&lt;p&gt;One last thing. Despite the title of this post, this is not a cheap trick to apply. It will take time and discipline to cultivate. The effects will be gradual and only be noticeable when you look back months or years on how you viewed the people around you.&lt;/p&gt;
&lt;p&gt;I really hope you will give this a chance. Over time the benefits can be great and meaningful.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/employees-are-like-cars-not-petrol/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/employees-are-like-cars-not-petrol/"/>
    <title>Employees are like cars not petrol</title>
    <updated>2018-05-03T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/employees-are-like-cars-not-petrol/</uri>
    </author>
    <summary type="html">&lt;p&gt;You may have had the experience before that the company you work for sees you as a resource. A number on a spreadsheet. Did you feel motivated to work there? Did you stay there for a long time? Did you feel loyalty? Probably not...&lt;/p&gt;
&lt;p&gt;I want to float a really bad analogue but hopefully it will make my point. Petrol (or diesel/electricity) is a resource, employees are more like cars.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;The Analogue&lt;/h2&gt;
&lt;p&gt;Imagine when you start a new job you are like a car they drive for work. The company hires you with the tank full. This is usually true in my experience as you are excited for the new opportunity and eager to do your best. One more analogue with the car. Job satisfaction (emotional reward, compensation, etc.) determines the mileage of the car.&lt;/p&gt;
&lt;p&gt;As you work you slowly use up the petrol in the tank. What are you burning? New things to learn, new people to meet, energy on things that don&apos;t engage, belief in direction, etc. Name the things that make a job emotionally rewarding.&lt;/p&gt;
&lt;h2&gt;Driver: The broke student&lt;/h2&gt;
&lt;p&gt;Were you ever a broke student with a car that was likely to break down if it didn&apos;t run out of petrol first? I was. I would fill up the tank with just enough petrol to get me to my next destination.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/student-tank.jpg&quot; alt=&quot;Student tank trajectory&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this model moments come along that refill the tank a little but they are blips in the downward trend. The consumption of the resource is still greater than the sum of the top-ups. Completion of big projects, moves to a new challenge, and promotions, all add some fuel but the problem is these are not sustainable as big refuels that come along. There are so many projects, moves, and promotions available and what if there are just a few failures? These could easily wipe out any gains.&lt;/p&gt;
&lt;h2&gt;Driver: The responsible car owner&lt;/h2&gt;
&lt;p&gt;My dad takes care of his cars. My brother takes care of his cars. I don&apos;t own a car anymore as here in The Netherlands I don&apos;t find it necessary. When I got my first car though my dad used to tell me to fill it up often so that the fuel tank would not rust. Easier said than done as a poor student but the lesson stuck at least.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/adult-tank.jpg&quot; alt=&quot;Adult tank trajectory&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The lesson here, and the whole point of this flaky analogue is that if you want to keep employees, they need to be topped up daily. Coming to work needs to be what tops off the fuel tank. There needs to be creative freedom. The people need to be smart and fun. The environment needs to foster learning and growth. The problems need to be challenging but solvable.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;People apparently quit managers not companies. While I think this is true I don&apos;t think it is always personal. The bottom line is management (from CEO down) is custodian of the environment and culture. Although everyone is responsible to a certain extent, it is management&apos;s job to ensure it is heading in the right direction and to step in and take action if it is not.&lt;/p&gt;
&lt;p&gt;DON&apos;T let frustration linger with no solution
DO empower people to solve their own problems&lt;/p&gt;
&lt;p&gt;DON&apos;T think of employees as resources that just churn out value with no input
DO set aside time and encourage learning and personal growth&lt;/p&gt;
&lt;p&gt;DON&apos;T tell people how to do their job
DO give a vision for what the business wants to achieve strategically&lt;/p&gt;
&lt;p&gt;Perks, events, money. These are not what keep people happy. If people are complaining about these things then chances are the culture is so bad that that is the only thing your employees have to hold on to. They are symptoms and make sure you are ignoring them only if you are addressing their more pressing cultural and environmental issues.&lt;/p&gt;
&lt;p&gt;At the same time, find out what employees value already. It is usually easier to do more of something beneficial than stop the things that kill a healthy culture. It doesn&apos;t mean the bad doesn&apos;t need to be addressed but it will make the culture more robust and build trust.&lt;/p&gt;
&lt;p&gt;Do you have your own DOs or DON&apos;Ts for building or tearing down company culture? I would love to hear them.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social image by &lt;a href=&quot;https://unsplash.com/@alexread&quot;&gt;Alex Reed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Header by &lt;a href=&quot;https://unsplash.com/@igorovsyannykov&quot;&gt;Igor Ovsyannykov&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/leader-archetypes/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/leader-archetypes/"/>
    <title>Leader Archetypes</title>
    <updated>2018-04-26T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/leader-archetypes/</uri>
    </author>
    <summary type="html">&lt;p&gt;Why do we follow people? Why only some people? Character, situation, and value-alignment seem to jump out as obvious factors but what configuration of these allows us to suspend our own self-absorption to work toward a common goal? Are there archetypes that represent what leaders do to get people to follow them?&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Leadership is by no means something I have devoted a lot of time to compared to more technical learnings. Even when I have read up on leadership it has been either very specific to development teams or in a general life sense like &amp;quot;Seven Habits of Highly Effective People&amp;quot;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So take the following with a pinch of salt. They are observations from Life not Leadership.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are three archetypes of leaders I have formulated for myself. This is based purely on introspection and observation of peers so I am sure someone more knowledgeable in leadership could point out all the depth of knowledge that I have missed.&lt;/p&gt;
&lt;h2&gt;Napoleon&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2018/napoleon-bonaparte-400.jpg&quot; alt=&quot;Napoleon Bonaparte&quot; class=&quot;img-rounded pull-left&quot; width=&quot;300&quot; style=&quot;margin-right: 1em;&quot;&gt; Skilled. Napoleon Bonaparte was a skilled military leader. It is what brought him up to the opportunity to be emperor and it is what makes him memorable. People believed in him because he had repeatedly shown his ability to win wars. He used his skill to conquer most of Europe.&lt;/p&gt;
&lt;p&gt;It seems people will follow if you have shown demonstrable skill in a field that they care about. Said skill provides authority in the field of expertise but that authority does seem to bleed out into other areas. This is not entirely illogical as competence in one area means at least the capacity for competence in other areas. As humans we do over estimate that competence, which is known as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Authority_bias&quot;&gt;Authority bias&lt;/a&gt;. The quintessential example here is weighting the opinion of a doctor more than someone else on a field that is not medicine.&lt;/p&gt;
&lt;p&gt;In tech this is a known issue with competence in software development often leading to more management type roles. Regardless of how equipped the individual is to lead people, their competence as a developer will influence how willing people are to follow their lead.&lt;/p&gt;
&lt;h2&gt;Robin Hood&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2018/robin-hood-400.jpg&quot; alt=&quot;Robin Hood&quot; class=&quot;img-rounded pull-right&quot; width=&quot;300&quot; style=&quot;margin-left: 1em;&quot;&gt;Protect. In legend Robin Hood fought injustice for the people. As a leadership style this can be effective in growing influence. In the legend Robin fought for the people but the people also loved and protected him.&lt;/p&gt;
&lt;p&gt;As a leader if you are seen as serving your team by fighting for their happiness, freedom to operate independently, and freedom from hardships, you will earn respect. That influence in turn can be used to resolve conflicts, multiply productivity, and lead in directions you see as beneficial.&lt;/p&gt;
&lt;p&gt;There are of course consequences of taking this style too far. As a leader it will often put you at odds with others in an organization, including your boss if you have one. It can lead to &lt;a href=&quot;https://en.wikipedia.org/wiki/In-group_favoritism&quot;&gt;In-group favoritism&lt;/a&gt; within the team. Related to this it can have a tribal effect where the team is seen as an outsider (outlaws if you wish), this is exacerbated by the In-group favoritism. Finally, if done very poorly it could result in coddling of the team. This is easy enough to mitigate by favouring teaching members of the team to do things themselves rather than doing it for them.&lt;/p&gt;
&lt;h2&gt;Martin Luther King Jr&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2018/martin-luther-king-jr-400.jpg&quot; alt=&quot;Martin Luther King Jr&quot; class=&quot;img-rounded pull-left&quot; width=&quot;300&quot; style=&quot;margin-right: 1em;&quot;&gt; Inspire. Martin Luther King Jr inspired people to mobilize for a cause. He was charismatic. He had a vision of what he wanted. He used that charisma to mobilize people into action. He inspired people to believe vision could become reality.&lt;/p&gt;
&lt;p&gt;There are many charismatic leaders to pick from but Martin was my first choice because it wasn&apos;t just about speaking in a way that inspired others. His vision was shared by those that had to live with the inequality and those who saw the inequality and wanted it to change. His message and methods were moral (non-violent protest). And then of course his speeches were inspiring. Inspiration is more than just charisma. It is about a vision that is clear and shared by others. Martin didn&apos;t use his charisma to convince people of his vision. It was their vision too and he inspired them to make it a reality.&lt;/p&gt;
&lt;p&gt;In tech charisma is a rare thing but Martin didn&apos;t just give speeches. He gave speeches at protests he had helped organize. He created an environment where people could come together to work toward their shared vision. Is charisma really the most important element in making meaningful change then?&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;One final point. I don&apos;t think fitting into just one of these archetypes would make an effective leader. These are just archetypes I have noticed over the years that when in play cause people to follow. An effective leader would probably fit into one of these but have strong elements of the others. That mix is what allows counteracting the ill effects of some styles.
And one final time: This is not my area of expertise...but I have run these archetypes past a few people and they seem to find it useful. Probably because they think me a competent software developer ;)&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Social image &lt;a href=&quot;https://unsplash.com/@jwimmerli&quot;&gt;Jean Wimmerlin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Napoleon and MLK Jr photo from &lt;a href=&quot;https://pixabay.com/&quot;&gt;Pixabay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bow and Arrow photo by &lt;a href=&quot;https://unsplash.com/@zoltantasi&quot;&gt;Zoltan Tasi&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/maintainable-unit-tests/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/maintainable-unit-tests/"/>
    <title>3 tips for more maintainable unit tests</title>
    <updated>2018-04-07T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/maintainable-unit-tests/</uri>
    </author>
    <summary type="html">&lt;p&gt;Although having a good collection of unit tests makes you feel safe and free to refactor, a bad collection of tests can make you scared to refactor. How so? A single change to application code can cause a cascade of failing tests. Here are some tips for avoiding (or fighting back) from that situation.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;p&gt;Important! This post contains example code. Don&apos;t copy/paste into production code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 1: Test behavior not structure&lt;/h2&gt;
&lt;p&gt;The behavior of the system is what the business cares about and it is what you should care about as well from a verification point of view. If requirements change drastically then changes to the system are expected, including the tests. The promise of good unit test coverage is that you can refactor with confidence that your tests will catch any regressions in behavior. However if you are testing the structure of your application rather than the behavior, refactoring will be difficult since you want to change the structure of your code but your tests are asserting that structure! Worse, your test suite might not even test the behavior but you have confidence in them because of the sheer volume of structural tests.&lt;/p&gt;
&lt;p&gt;If you test the behavior of the system from the outside you are free to change implementation and your tests remain valid. I am not necessarily talking about integration style tests but actual unit tests whose entry point is a natural boundary. At work we have use-case classes that form this natural entry-point into any functionality.&lt;/p&gt;
&lt;p&gt;So let&apos;s look at an example of structural testing, and see the what happens when we try make a change to the implementation details. As an example we have a test against a &lt;code&gt;CreatePerson&lt;/code&gt; use-case that creates a &lt;code&gt;Person&lt;/code&gt; class and persists it if it is a valid person object. The initial design takes in an &lt;code&gt;IValidator&lt;/code&gt; to determine whether the person is valid.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// tests
// test for invalid name omitted...

[Fact]
public void CreatingPerson_WithValidPerson_CallsIsValid()
{
    var name = &amp;quot;Bob&amp;quot;;
    var people = Substitute.For&amp;lt;IPersonRepository&amp;gt;();
    var validator = Substitute.For&amp;lt;IPersonValidator&amp;gt;();
    var createPerson = new CreatePerson(people, validator);

    createPerson.With(name);

    validator.ReceivedWithAnyArgs(1).IsValid(Arg.Any&amp;lt;Person&amp;gt;());
}

// anemic domain entity
public class Person
{
    public Person(Guid id, string name)
    {
        Id = id;
        Name = name;
    }

    public Guid Id { get; set; }
    public string Name { get; set; }
}

// use-case
public class CreatePerson
{
    private readonly IPersonRepository personRepository;
    private readonly IPersonValidator personValidator;

    public CreatePerson(IPersonRepository personRepository, IPersonValidator personValidator)
    {
        this.personRepository = personRepository;
        this.personValidator = personValidator;
    }

    public void With(string name)
    {
        var person = new Person(Guid.NewGuid(), name);
        if (personValidator.IsValid(person))
        {
            personRepository.Create(person);
        }
        else
        {
            throw new ArgumentException(nameof(name));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how we are asserting against a dependency (&lt;code&gt;IValidator&lt;/code&gt;) of the use-case (&lt;code&gt;CreatePerson&lt;/code&gt;). Our test has structural knowledge of how &lt;code&gt;CreatePerson&lt;/code&gt; is implemented. Let&apos;s see what happens when we want to refactor this code...&lt;/p&gt;
&lt;p&gt;Your team has been trying to bring in some new practices like Domain-Driven Design. The team discussed it and the &lt;code&gt;Person&lt;/code&gt; class represents an easy start learning. You have been tasked with pulling behavior into the the &lt;code&gt;Person&lt;/code&gt; entity and make it less anemic.&lt;/p&gt;
&lt;p&gt;As a first try you move the validation logic into the &lt;code&gt;Person&lt;/code&gt; class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class Person
{
    public Person(Guid id, string name)
    {
        Id = id;
        Name = name;
    }

    public bool IsValid()
    {
        if (Id == Guid.Empty) return false;
        if (string.IsNullOrEmpty(Name)) return false;
        return true;
    }

    public Guid Id { get; }
    public string Name { get; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the use-case, we no longer need to inject &lt;code&gt;IValidator&lt;/code&gt;. Not only is what we test going to have to change, we are going to have to change the test completely because we no longer have a validator to inject as a mock. We have seen the first signs of our tests being fragile.&lt;/p&gt;
&lt;p&gt;Let&apos;s try make our test focus on the behavior we expect instead of relying on the structure of our code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// test for invalid name omitted...
[Fact]
public void CreatePerson_WithValidName_PersistsPerson()
{
    var name = &amp;quot;Bob&amp;quot;;
    InMemoryPersonRepository people = Given.People;
    var createPerson = new CreatePerson(people);

    createPerson.With(name);

    Assert.Equal(name, people.All().First().Name);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&apos;t worry too much about &lt;code&gt;InMemoryPersonRepository people = Given.People;&lt;/code&gt; for now, we will come back to it. All you need to know is that &lt;code&gt;InMemoryPersonRepository&lt;/code&gt; implements &lt;code&gt;IPersonRepository&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we no longer need &lt;code&gt;IValidator&lt;/code&gt; and it&apos;s implementation, we delete those. We also get to delete the test &lt;code&gt;CreatingPerson_WithValidPerson_CallsIsValid&lt;/code&gt; as we have a better test now &lt;code&gt;CreatePerson_WithValidName_PersistsPerson&lt;/code&gt; that asserts the behavior we care about, the use-case creating and persisting a new person. Yay, less test code, better coverage!&lt;/p&gt;
&lt;p&gt;At this point you might be saying &amp;quot;Wait! Unit tests are supposed to test one method, on one class&amp;quot;. No! A unit is whatever you need it to be. I am by no means saying write no tests for your small implementation details, just make sure you are comfortable deleting them if things change. With our focus on behavior tests we can delete those detailed tests freely and still be covered. In-fact, I often just delete the tests after I am done developing the component as I just used TDD for fast feedback loop on the design and implementation. Remember that test code is still code that needs maintenance so the more coverage for less the better.&lt;/p&gt;
&lt;p&gt;So back to the code. What does our use-case look like now?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class CreatePerson
{
    private readonly IPersonRepository personRepository;
    public CreatePerson(IPersonRepository personRepository)
    {
        this.personRepository = personRepository;
    }

    public void With(string name)
    {
        var person = new Person(Guid.NewGuid(), name);
        if (person.IsValid())
        {
            personRepository.Create(person);
        }
        else
        {
            throw new ArgumentException(nameof(name));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thats ok. We got rid of a dependency and moved some logic to our &lt;code&gt;Person&lt;/code&gt; entity but we can do better. On reviewing your pull request someone in the team pointed out something important. You should be aiming to make unrepresentable states unrepresentable. The business doesn&apos;t allow saving a person without a name so let&apos;s make it so that we can&apos;t create an invalid &lt;code&gt;Person&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;// person entity
public class Person
{
    public Person(Guid id, string name)
    {
        if (id == Guid.Empty) throw new ArgumentException(nameof(id));
        if (string.IsNullOrEmpty(name)) throw new ArgumentException(nameof(name));

        Id = id;
        Name = name;
    }

    public Guid Id { get; }
    public string Name { get; }
}
// use-case
public class CreatePerson
{
    private readonly IPersonRepository personRepository;
    public CreatePerson(IPersonRepository personRepository)
    {
        this.personRepository = personRepository;
    }

    public void With(string name)
    {
        var person = new Person(Guid.NewGuid(), name);
        personRepository.Create(person);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look at that! We refactored the implementation without having to update our test. It still passes without any changes.&lt;/p&gt;
&lt;p&gt;This was a contrived example to illustrate the point but I hope this tip helps you write more maintainable tests.&lt;/p&gt;
&lt;h2&gt;Tips 2: Use in-memory dependencies&lt;/h2&gt;
&lt;p&gt;You have already seen &lt;code&gt;InMemoryPersonRepository&lt;/code&gt; so this tip should be less verbose to explain. The claim is simply that the maintainability of your tests can be increased by using in-memory versions of your dependencies a little more and using mocking frameworks a little less.&lt;/p&gt;
&lt;p&gt;I find in-memory versions of something like a repository that speaks to a database preferable to mocking frameworks for a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They tend to be easier to update than a mocking framework, especially if creation of the mocks is done in every test or fixture&lt;/li&gt;
&lt;li&gt;Coupled with some tooling (see next tip) they lead to far easier setup and readability&lt;/li&gt;
&lt;li&gt;They are simple to understand&lt;/li&gt;
&lt;li&gt;Great debugging tool&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the down side, they do take a little time to create.&lt;/p&gt;
&lt;p&gt;Let&apos;s take a quick look at what the one looks like for our code so far:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class InMemoryPersonRepository : IPersonRepository
{
    private IDictionary&amp;lt;Guid, Person&amp;gt; data;

    public InMemoryPersonRepository(IDictionary&amp;lt;Guid, Person&amp;gt; data)
    {
        this.data = data;
    }

    public IReadOnlyCollection&amp;lt;Person&amp;gt; All()
    {
        return new List&amp;lt;Person&amp;gt;(data.Values);
    }

    public void Create(Person person)
    {
        data.Add(person.Id, person);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Super simple! Put in the work and give it a try, it may not be as sexy as a mocking framework but it really will help make your test suite more manageable.&lt;/p&gt;
&lt;h2&gt;Tip 3: Build up test tooling&lt;/h2&gt;
&lt;p&gt;Test tooling in this context means utility classes to make readability and maintainability of the tests easier. A big part of this is about making your tests clear about the setup while still keeping it concise.&lt;/p&gt;
&lt;p&gt;Let&apos;s discuss a few helpers you should have in any project...&lt;/p&gt;
&lt;h3&gt;In-memory dependencies&lt;/h3&gt;
&lt;p&gt;This was already discussed above. I can&apos;t stress enough how much this improves maintenance and simplifies reasoning about tests.&lt;/p&gt;
&lt;h3&gt;Builders&lt;/h3&gt;
&lt;p&gt;Builders can be used as an easy way to setup test data. They are a great way of simultaneously avoiding dozens of different setup methods for your tests and a way to make it clear what the actual setup of your test is without diving into some setup method that looks like all the other setup methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class InMemoryPersonRepositoryBuilder
{
    IDictionary&amp;lt;Guid, Person&amp;gt; data = new Dictionary&amp;lt;Guid, Person&amp;gt;();
    
    public InMemoryPersonRepositoryBuilder With(params PersonBuilder[] people)
    {
        foreach (Person p in people)
        {
            data.Add(p.Id, p);
        }
        return this;
    }

    public InMemoryPersonRepository Build()
    {
        return new InMemoryPersonRepository(data);
    }

    public static implicit operator InMemoryPersonRepository(InMemoryPersonRepositoryBuilder builder)
        =&amp;gt; builder.Build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A little trick is to put an &lt;code&gt;implicit&lt;/code&gt; conversion to the class you are building up. Also take a look at &lt;a href=&quot;https://github.com/nrjohnstone/Fluency&quot;&gt;Fluency&lt;/a&gt; for helping with the creation of builders.&lt;/p&gt;
&lt;p&gt;A final note on this point. Just because I use builders a lot does not mean I completely throw mocking frameworks out the window. I just tend to use mocking frameworks for things I really don&apos;t care about and really aren&apos;t likely to change. I also tend to use them within other builders rather than directly in tests. This gives way more control over the grammar that you use to setup your tests.&lt;/p&gt;
&lt;h3&gt;Accessors&lt;/h3&gt;
&lt;p&gt;Not sure what else to call these but it is useful to have a static class that makes access to builders and other types you would use in setup simple. Typically I have &lt;code&gt;Given&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;/// &amp;lt;summary&amp;gt;
/// Handles creation of instances useful to testing like entites, value objects, settings, etc.
/// &amp;lt;/summary&amp;gt;
public static class A
{
    public static PersonBuilder Person =&amp;gt; new PersonBuilder();
}

/// &amp;lt;summary&amp;gt;
/// Handles the creation of builders that build external services for testing
/// &amp;lt;/summary&amp;gt;
public static class Given
{
    public static InMemoryPersonRepositoryBuilder People =&amp;gt; new InMemoryPersonRepositoryBuilder();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows me to write some very concise setup code. For example if I needed to populate my person repository with 3 random people I could do so like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;InMemoryPersonRepository people = Given.People.With(A.Person, A.Person, A.Person);
// if i wanted another with a specific name
people.Create(A.Person.With(name: &amp;quot;Bob&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For completeness the &lt;code&gt;PersonBuilder&lt;/code&gt; implementation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class PersonBuilder
{
    private Guid id;
    private string name;

    public PersonBuilder()
    {
        id = Guid.NewGuid();
        name = $&amp;quot;name {Guid.NewGuid()}&amp;quot;;
    }

    public PersonBuilder With(Guid id)
    {
        this.id = id;
        return this;
    }

    public PersonBuilder With(string name)
    {
        this.name = name;
        return this;
    }

    public Person Build()
    {
        return new Person(id, name);
    }

    public static implicit operator Person(PersonBuilder builder) =&amp;gt; builder.Build();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;So those are my 3 tips for making your tests more maintainable. I encourage you to give them a try. Without investing in the maintainability of your tests they can quickly become a burden rather than a boon. I have seen the practices above improve things not only in my teams but other colleagues have converged on similar learnings with the same positive results. Let me know if you find this helpful, or even if there are any points you strongly disagree with. I would love to discuss in the comments. Happy coding!&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/managing-code-complexity/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/managing-code-complexity/"/>
    <title>Managing Code Complexity</title>
    <updated>2018-04-06T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/managing-code-complexity/</uri>
    </author>
    <summary type="html">&lt;p&gt;When we write code it is often easy to get caught up in the implementation details. Communicating intent is imperative to making code understandable, and keeping code understandable is important for handling complexity.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Even if you don&apos;t practice DDD (or the problem space does not warrant it) and functional programming there are a few lessons to be learned from these disciplines that can be brought into any codebase.&lt;/p&gt;
&lt;h2&gt;Tip 1: Describe the workflow at your entry point&lt;/h2&gt;
&lt;p&gt;We have all heard the phrase &amp;quot;code is read many more times than it is written&amp;quot;. What else is read a lot more than it is written? A book. Code is information dense and in any information dense book we have a Table of Contents.
In your entry point to executing some use-case against your system it is important that there is a high-level workflow that gives an overview of the the complete use-case. This gives a developer reading from the entry point a &amp;quot;Table of Contents&amp;quot; to drill down into whatever step they need to.&lt;/p&gt;
&lt;p&gt;In this context a workflow is the steps needed to do the work of the use-case. This entry point could be a controller or a program main. A pattern we use at work is to create a use-case specific class with a &lt;code&gt;Do()&lt;/code&gt; or &lt;code&gt;Execute()&lt;/code&gt; method on it. Play around with the naming though. I like the class to describe the use-case while the method that causes execution to say something about the command coming in as a parameter eg. &lt;code&gt;new CalculateSomething().For(command.SomeNumber)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/use-case.jpg&quot; alt=&quot;use-case&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An easily understood use-case makes a great entry point for exploring a codebase&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inside the method on your use-case you should strive to lay out the code in the steps needed to complete that use-case. Try keep these steps at the same high-level of abstraction but not too high-level. What do I mean by too high? Be sure to describe actual meaningful steps that avoid steps that doing multiple things and all you can describe them is as &lt;code&gt;ProcessX&lt;/code&gt;. If you find yourself naming a step like that it is probably worth breaking that step into smaller more meaningful steps within the use-case.&lt;/p&gt;
&lt;p&gt;What you really want to avoid here is scattering the steps needed to complete a use-case throughout an object hierarchy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/logic-stack.jpg&quot; alt=&quot;scattered logic&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sprinkling important application logic throughout a hierarchy makes it difficult to reason about&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By spreading the workflow through the hierarchy it is really difficult to see at a glance what the workflow does and then drill down from there into how. It also makes it difficult to compose in new functionality. If it is within the hierarchy you will often find yourself putting code for new features in weird places because that is where the data is available in the call chain.&lt;/p&gt;
&lt;h2&gt;Tip 2: Prefer a longer workflow to a deep dependency chain&lt;/h2&gt;
&lt;p&gt;This one builds on the previous tip but where the previous tip focused on describing a workflow at the entry point, this one is more about cognitive load. Each step allows you to step into it and see the details. Each of these steps might itself have a few dependencies as well as mini-workflows captured in each of those dependencies. This is just a rule-of-thumb but if the depth of a single steps dependency hierarchy exceeds the width of the steps in a workflow, at least ask the question of whether that should maybe be 2 steps.&lt;/p&gt;
&lt;p&gt;Why is this important? You do not want to have to dive very deep to understand what happens in a single step. Remember that the entry point gives a complete overview of all high-level steps. If a hierarchy is too deep if might become hard to reason about. This is of course just a rule-of-thumb and any single step could of course warrant a deep hierarchy to implement it well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/etl-workflow.jpg&quot; alt=&quot;scattered logic&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a rule-of-thumb; keep your workflow longer than it is deep&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 3: Make your external dependencies visible&lt;/h2&gt;
&lt;p&gt;External dependencies like databases, files, and/or webservices make things difficult to reason about if they are nested deep in the dependency hierarchy where it is often unclear that they are being called. Not only that but it forces excessive use of abstractions purely for testing, which causes test induced damage to the code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/deeply-nested-dep.jpg&quot; alt=&quot;deeply nested external dependencies&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deeply nested external dependencies make code more difficult to reason about and test&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By making your external dependencies part of the high-level workflow you communicate the dependencies clearly. This makes it clear what is required for the system as a whole but also what data is needed to complete the use-case. This might mean thinking a little differently about the problem. Instead of querying for something the moment you need it, you might try fetch it at the start. You might say that seems wasteful as some validation might fail. That argument could be turned around though and it could be argued that there is no point in validating input if the external dependencies needed to complete a use-case are not available.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/highlight-dependencies.jpg&quot; alt=&quot;highlight dependencies&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make your external dependency calls clear in your high-level workflow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 4: Push your external dependencies to the boundary&lt;/h2&gt;
&lt;p&gt;Obviously every use-case is different but if at all possible push your external dependencies to the beginning and the end of your workflow. This is taking a page out of functional programming where purity matters. What is meant by purity? Basically we strive to have all functions results be determined only by the value of the arguments passed in. This makes functions easy to reason about as well as easy to test.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/dependencies-on-boundary.jpg&quot; alt=&quot;dependencies on the boundary&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Calls to databases, files, and webservices should be pushed to the boundary of the workflow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I highly recommend watching &lt;a href=&quot;https://www.youtube.com/watch?v=cxs7oLGrxQ4&quot;&gt;From Dependency injection to dependency rejection by Mark Seemann&lt;/a&gt; to see a detailed discussion on the topic.&lt;/p&gt;
&lt;h2&gt;Tip 5: Bring business concepts up, push technical implementations down&lt;/h2&gt;
&lt;p&gt;Keep checking that you have important code that shows the details of business logic as close to the root of the object hierarchy as possible. The business logic is what developers should see first, while the implementation details are deep or at least on the boundary of the workflow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/business-concepts-up.jpg&quot; alt=&quot;business concepts up implementation detail down&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Favour business concepts further up the dependency hierarchy and implementation details lower down&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 6: Use abstraction judiciously&lt;/h2&gt;
&lt;p&gt;Abstractions are something you want at the seams of your application modules/components. Obviously you can use them elsewhere, certain design patterns call for them. The important thing is to use them where needed and not by default.&lt;/p&gt;
&lt;p&gt;From a clean architecture point of view you would use them to implement Ports and Adapters as a nice way of keeping your domain logic clean of implementation details. Abstractions are part of your domain, implementations are specific and live in specific infrastructure dedicated to that implementation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2018/abstractions.jpg&quot; alt=&quot;abstractions&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Place abstractions at the seams&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tip 7: Use honest rather than simple types&lt;/h2&gt;
&lt;p&gt;Create types to represent things like entity identity. &lt;a href=&quot;http://devonburriss.me/honest-arguments/&quot;&gt;There is a whole series on this&lt;/a&gt; but if you do nothing else don&apos;t let your codebase be littered with &lt;code&gt;Guid&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; or whatever else you use as entity identity or reference. When your code relies on &lt;code&gt;invoiceId&lt;/code&gt; and &lt;code&gt;invoiceLineId&lt;/code&gt; and etc. it becomes too easy to swap 2 integers. Not only does it help prevent silly bugs but using types a little more liberally can really help convey intent. Finally, it makes finding all references where a type is used simple.&lt;/p&gt;
&lt;h2&gt;And we are done&lt;/h2&gt;
&lt;p&gt;I hope you find some of these tips useful. If you did, I would love to hear about it. If you have questions, feel free to leave a comment. If you think I am 100% wrong, I would love to hear your reasons. Above all, let&apos;s keep learning together and happy coding!&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/why-i-got-hooked-on-fsharp/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/why-i-got-hooked-on-fsharp/"/>
    <title>Why I got hooked on F#</title>
    <updated>2017-12-28T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/why-i-got-hooked-on-fsharp/</uri>
    </author>
    <summary type="html">&lt;p&gt;I have been asked a few times &amp;quot;how I got started with F#?&amp;quot; as more than a few people have found it difficult. I myself had a few false starts with it. It looked weird, I didn&apos;t know where or how to start, it was too different to OO with C style languages, and the tooling just was not as slick. I honestly think a better question is &amp;quot;Why did I start using F#?&amp;quot;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;The WHY of it&lt;/h2&gt;
&lt;p&gt;As I have matured as a developer I have come to appreciate coding practices that constrain my options in a way that minimizes potential errors. An infinitely flexible design is also one the allows all possible errors, known and unknown. Constraining future developers to &amp;quot;make illegal states unrepresentable&amp;quot; cannot be overstated as a design goal. I sometimes say &amp;quot;code like the future developer on this is an idiot because current you is an idiot and future you will be to&amp;quot;. To be clear, I say that to myself, about myself.&lt;/p&gt;
&lt;p&gt;In OO we do this with constructors or factories (and hidden constructors), with encapsulation and smart APIs. This is a big part of the guidelines around aggregates in Domain-Driven design (DDD) and keeping the aggregate consistent. We have a lot of patterns and practices in OO that help with this. A LOT! In fact it is quite difficult for new developers to get up to speed with them all. And since they are often struggling with the technical implementation of features they are not worrying too much about the intricacies of the design and whether it leads future developers into the pit of success. We coach, and hopefully with good coaching they learn these things faster than we did through trial and error. I cannot help but wonder if there is a simpler way to get to well designed software than absorbing all these patterns and practices? Note I said simple, not easy.&lt;/p&gt;
&lt;p&gt;Functional programming (FP) with its mathematical basis makes some claims about correctness. Correctness is hard to be certain of when global state is constantly in flux, as it is in an OO centric application. FP revolves around functions, with inputs and outputs, with the same input always yielding the same output (for pure functions).&lt;/p&gt;
&lt;p&gt;So basically the WHY can be broken down into 2 points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correctness of the program&lt;/li&gt;
&lt;li&gt;Fewer concepts need to be known to develop maintainable software&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I remember reading &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;this article of Mark Seemann&apos;s&lt;/a&gt; and thinking this seems like a problem I have but I cannot quite relate to his conclusion. As we will see in the next section, it took me 2 years to get to a place where I could read that article and nod my head instead of scratch it.&lt;/p&gt;
&lt;h2&gt;The HOW of it&lt;/h2&gt;
&lt;p&gt;I was not keeping notes so these are the highlights I remember and that I think are important.&lt;/p&gt;
&lt;p&gt;Since about 2013 I had been trying to learn and apply many of the technical approaches highlighted in DDD. This lead to much more focus on types whose instance state can only be changed in a very controlled way. Not only that but the types are descriptive of the domain and do not try be too reuseable but rather represent very specific use cases.&lt;/p&gt;
&lt;p&gt;By the time 2016 rolled around I had heard of the promises FP made and had even &amp;quot;file new project&amp;quot;&apos;ed an F# console application but with very little success. I resolved to give it a better try and started reading through &lt;a href=&quot;https://fsharpforfunandprofit.com/books/#downloadable-ebook-of-this-site&quot;&gt;fsharpforfunandprofit&lt;/a&gt; and looking at a few &lt;a href=&quot;https://www.pluralsight.com/search?q=F%23&amp;amp;categories=course&quot;&gt;Pluralsight&lt;/a&gt; videos.&lt;/p&gt;
&lt;p&gt;Then I was contacted by &lt;a href=&quot;https://www.manning.com/&quot;&gt;Manning&lt;/a&gt; to give feedback on an early draft of &lt;a href=&quot;https://www.manning.com/books/functional-programming-in-c-sharp&quot;&gt;Functional Programming in C#&lt;/a&gt;. In it Enrico Buonanno gives a really deep introduction to functional concepts and patterns, showing both the implementation and usage of FP in C#. For me this was quite nice as I could absorb concepts without getting hung up on the syntax of some new programming language. These inspired a series of posts on Honest Types, namely &lt;a href=&quot;/honest-arguments/&quot;&gt;Honest Arguments&lt;/a&gt;, &lt;a href=&quot;/honest-return-types/&quot;&gt;Honest Return Types&lt;/a&gt;, and &lt;a href=&quot;/better-error-handling/&quot;&gt;Better Error Handling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At work my code started taking on a more functional style in C# and a few of our projects started making use of &lt;a href=&quot;https://github.com/louthy/language-ext&quot;&gt;Language Extensions&lt;/a&gt;. I have a repository demonstrating some use cases &lt;a href=&quot;https://github.com/dburriss/ElevatedExamples&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By early 2017 I was writing small console apps in F# that would crunch some CSV files, or merge some PDF documents. These were not great and I realized that although I was getting used to F# syntax I was missing something key in how to structure my applications. The penny only dropped when watching a video from Mark Seemann on &lt;a href=&quot;https://www.youtube.com/watch?v=US8QG9I1XW0&quot;&gt;Functional architecture - The pits of success&lt;/a&gt;. Another good one released later is &lt;a href=&quot;https://www.youtube.com/watch?v=cxs7oLGrxQ4&quot;&gt;From Dependency injection to dependency rejection&lt;/a&gt;. Both of these talk about purity and composing applications so the code with dependencies on IO are on the outside. If this sounds like Clean/Onion/Hexagonal Architecture, you are absolutely right.&lt;/p&gt;
&lt;p&gt;Now here we are at the end of 2017 and and I have just finished &lt;a href=&quot;https://fsharpforfunandprofit.com/books/#domain-modeling-made-functional-ebook-and-paper&quot;&gt;Domain Modelling Made Functional&lt;/a&gt; by Scott Wlaschin of &lt;a href=&quot;https://fsharpforfunandprofit.com/&quot;&gt;fsharpforfunandprofit&lt;/a&gt; fame. It brings together so many deep topics in such an approachable way that it is difficult to compare to any book I have read before. It doesn&apos;t assume any knowledge and yet I learned some F#, some FP, and some DDD even though I have read multiple books dedicated to each of these topics. Scott develops a feature from beginning to end in a practical way that distills and teaches the core concepts of these advanced topics without getting bogged down in theory. I realize I am sounding like a fan boy here but I would honestly recommend this book to teach FP and F# OR DDD. It teaches both brilliantly.&lt;/p&gt;
&lt;p&gt;This December I posted &lt;a href=&quot;/argument-for-fp/&quot;&gt;my first F# themed blog post&lt;/a&gt; as part of the &lt;a href=&quot;https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/&quot;&gt;FsAdvent Calendar 2017&lt;/a&gt;. I submitted &lt;a href=&quot;https://github.com/giraffe-fsharp/giraffe-template/pull/4&quot;&gt;my first PR to an F# open source project&lt;/a&gt; and now I am winding down on my 2nd FP related blog post. I am looking forward to what the next year brings and all I have to learn.&lt;/p&gt;
&lt;h2&gt;Further Reading (posts)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Mark Seemann has a brilliant posts on how a &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;language can reduce the potential for errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scott Wlaschin on &lt;a href=&quot;https://fsharpforfunandprofit.com/learning-fsharp/&quot;&gt;learning F#&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Further watching (videos)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Mark has an excellent talk on &lt;a href=&quot;https://www.youtube.com/watch?v=US8QG9I1XW0&quot;&gt;falling into the pit of success&lt;/a&gt; and another on &lt;a href=&quot;https://www.youtube.com/watch?v=cxs7oLGrxQ4&quot;&gt;Dependency Rejection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vimeo.com/162209391&quot;&gt;Designing with Capabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vimeo.com/113707214&quot;&gt;Railway oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Recommended books&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/books/#domain-modeling-made-functional-ebook-and-paper&quot;&gt;Domain Modelling Made Functional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/books/#downloadable-ebook-of-this-site&quot;&gt;fsharpforfunandprofit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/functional-programming-in-c-sharp&quot;&gt;Functional Programming in C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/real-world-functional-programming&quot;&gt;Real-World Functional Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Header photo by &lt;a href=&quot;https://unsplash.com/@johnmarkarnold&quot;&gt;John Mark Arnold&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/argument-for-fp/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/argument-for-fp/"/>
    <title>An argument for functional programming</title>
    <updated>2017-12-08T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/argument-for-fp/</uri>
    </author>
    <summary type="html">&lt;p&gt;Have you ever thought you have the perfect tool for the job at work but it is not on the allowed list of languages or frameworks? At this stage you have a decision to make. Are you going to just move on and pick something that will meet less resistance or are you going to do the work to drive some change? In this post I make my case for functional programming in enterprise development, specifically &lt;strong&gt;F#&lt;/strong&gt; if your current team expertise is .NET. The same arguments could be leveled for JVM based languages like Scala if your experience is in Java.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post is part of &lt;a href=&quot;https://sergeytihon.com/2017/10/22/f-advent-calendar-in-english-2017/&quot;&gt;FsAdvent Calendar 2017&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;In this post I drill down through the different reasons why a business (applies to individual developers too) should consider broadening their language range in a carefully considered way. First I argue that being open to multiple languages can benefit your companies hiring as well as the experience pool. Secondly I argue that functional programming opens up new perspectives while increasing the correctness of your applications in less time. As a bonus functional programming filters even better in the hiring process for top developers. Lastly I make the case that if you already have .NET experience the F# is a natural choice for a functional language.&lt;/p&gt;
&lt;p&gt;If this is all you are going to read I want to leave you with an excerpt from a study done over 728 projects on Github. I link to the full article at the end of the post.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The data indicates that functional languages are better than procedural languages; it suggests that disallowing implicit type conversion is better than allowing it; that static typing is better than dynamic; and that managed memory usage is better than unmanaged.&amp;quot; - A Large-Scale Study of Programming Languages and Code Quality in GitHub&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;An argument for language diversity&lt;/h2&gt;
&lt;img src=&quot;../img/posts/2017/scrolls.jpg&quot; alt=&quot;Scrolls&quot; class=&quot;img-rounded pull-left&quot; width=&quot;290&quot; style=&quot;margin-right: 1em;&quot;&gt;
Firstly I would like to make the case for why you should consider using different languages in your environment. Even if you don&apos;t buy that, I will make a case for at the very least hiring outside of the language expertise you need on the job.
&lt;h3&gt;Slim pickings&lt;/h3&gt;
&lt;p&gt;Good developers are in short supply and the market is competitive. By opening up your hiring to other languages, or actually using multiple languages, you &lt;strong&gt;expand the pool of developers by a multiple of the number of languages you are willing to consider&lt;/strong&gt;. This can be a huge advantage in the number of applicants you receive. Obviously sheer number of applicants is not the only concern and I will address this in a later point. The important point to buy in to here though is that a good developer in any language is a better pick than a poor or average developer in your language of choice. Language specific skills can be ramped up fairly quickly. Experience and professionalism on the other hand is hard earned and hard to come by. In my opinion the quality of a developer always trumps the language they use.&lt;/p&gt;
&lt;h3&gt;Swag&lt;/h3&gt;
&lt;p&gt;Let&apos;s face it. Your reputation as a company influences who you attract. For professional, open-minded developers that are not fan boys of a specific language, &lt;strong&gt;a company that is focused on hiring on quality and principles is far more appealing than a company that religiously hires on technical stack&lt;/strong&gt;. &lt;strong&gt;Polyglot&lt;/strong&gt; (fluent in multiple languages) is one of those &lt;strong&gt;buzzwords&lt;/strong&gt; that started doing the rounds a while back in the programming space (in this case specific to programming languages). &lt;strong&gt;Being able to use it honestly in your recruitment is a real bonus&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Skin the cat&lt;/h3&gt;
&lt;p&gt;Different experience and different language features allow for different ways of solving problems. Often just having &lt;strong&gt;someone with a different background look at a problem allows them to come up with a solution in a new (for the team) and elegant way&lt;/strong&gt;. This can have huge benefits to the team and company as a whole.&lt;/p&gt;
&lt;h3&gt;Mindset is key&lt;/h3&gt;
&lt;p&gt;At the rate that information based industries change it is impossible knowing everything. More important is that you can acquire new skills efficiently and effectively. Selecting for people who pick up new languages is &lt;strong&gt;selecting for people who actively pursue skill acquisition&lt;/strong&gt;. This is often the number one identifier I see in hiring between average developers and awesome developers. When those languages span different programming paradigms like imperative and functional, then you have someone who is really pushing their comfort zones to find better solutions. That mindset is hard to teach and one you really want on your team. At the very least it is someone who is willing to pick up what needs to be done on the job.&lt;/p&gt;
&lt;h2&gt;An argument for functional programming&lt;/h2&gt;
&lt;img src=&quot;../img/posts/2017/eye.jpg&quot; alt=&quot;Eye&quot; class=&quot;img-rounded pull-left&quot; width=&quot;280&quot; style=&quot;margin-right: 1em;&quot;&gt;
When I was new to software development I was always looking for new and shiny ways to do things. Waiting for that new feature. Over the years I have come to appreciate a more minimal and opinionated approach. Some tools are great for edge-cases but are often not worth the hassle they cause when used liberally where they should not be used. Minimizing language features that allow you to make mistakes increases productivity and helps you fall into the pit of success. My path to functional programming was paved in development pain and failure. How so? When something seemed painful I would look for ways to close that path in general development so the mistake was not made by me, or any other future developer again. Functional programming increases the constraints in a good way.
&lt;h3&gt;Choice of 2, take it or leave it&lt;/h3&gt;
&lt;p&gt;Most of the mainstream enterprise languages out there have the concept of &apos;null&apos;. This has been described as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions&quot;&gt;billion dollar mistake&lt;/a&gt;. Functional programming has more &lt;strong&gt;elegant ways of representing the absence of data&lt;/strong&gt; that encourages you to make unrepresentable states unrepresentable. This is of course not the sole domain of the functional paradigm (I have &lt;a href=&quot;/honest-return-types&quot;&gt;written about it in the past for C#&lt;/a&gt;) but null based exceptions are rare to find in functional languages and if found are usually because of interop concerns. Minimizing the chance of null removes a whole class of exceptions that can possibly occur.&lt;/p&gt;
&lt;h3&gt;Who moved my cheese?&lt;/h3&gt;
&lt;p&gt;Another point were I experienced pain was with erratic or incorrect programs due to unintended state changes. Functional programming on the other hand pushes you toward immutability. A function has an input and an output and that output does not have a reference to the input. This makes code far more predictable. &lt;strong&gt;Immutability removes a whole class of errors that can occur due to unintended side-effects&lt;/strong&gt;, which are often hard to find and fix.&lt;/p&gt;
&lt;h3&gt;The I is an illusion&lt;/h3&gt;
&lt;p&gt;In the age of cloud computing, auto-scaling, and concurrency, &lt;strong&gt;not having state means concurrency becomes almost as simple as concurrent&lt;/strong&gt; since there is no state to lock around. This makes functional programming great for scale as it keeps things simple for the developer. As a developer you don&apos;t need to be an expert in concurrency to get it right. Again, a whole host of concurrency bugs are not representable (in state).&lt;/p&gt;
&lt;h3&gt;Purity matters&lt;/h3&gt;
&lt;p&gt;Functional programming values something called purity. This is basically the characteristic that you pass something into a function and get something out, and no state has been mutated inside. So for each input value you will always get the same output value. Valuing purity means code that is not pure is pushed to the boundaries of the application, which is good. &lt;strong&gt;Purity ensures that the bulk of your codebase is easily testable&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;The new goto&lt;/h3&gt;
&lt;p&gt;Since functional programming encourages purity, throwing exceptions is not something you regularly do. It only happens in exceptional cases. Functional languages make this less &lt;a href=&quot;/better-error-handling&quot;&gt;clunky than doing it in an OO first language like C#&lt;/a&gt;. What this means for code is &lt;strong&gt;there are no breaks in control flow so it is easier to reason about&lt;/strong&gt;. Easier to reason about means easier to maintain and less bugs.&lt;/p&gt;
&lt;h3&gt;Signature move&lt;/h3&gt;
&lt;p&gt;I have written before about &lt;a href=&quot;/honest-arguments&quot;&gt;honest arguments&lt;/a&gt; and &lt;a href=&quot;/honest-return-types&quot;&gt;honest return types&lt;/a&gt; and it is something I have witnessed make a difference in code. &lt;strong&gt;Not only is the code more descriptive but correctness is reinforced by the compiler&lt;/strong&gt;. Functional programming brings the signatures of functions front and center. Once again, more possible errors negated.&lt;/p&gt;
&lt;h3&gt;Expanding horizons&lt;/h3&gt;
&lt;p&gt;I touched on this in the section on language diversity but encouraging developers to learn &lt;strong&gt;a new paradigm equips them with more tools in the toolbox&lt;/strong&gt;. I am not talking about a new framework or pattern but a new perspective at looking at a problem. A new perspective may yield a better solution to a problem.&lt;/p&gt;
&lt;h3&gt;Short and sweet&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Functional languages usually allow you to do more with less code&lt;/strong&gt;. This is because it is declarative rather than imperative. This means your code reads like a sentence telling you what it does rather than a list of commands telling you each and every task to do.&lt;/p&gt;
&lt;h2&gt;An argument for F#&lt;/h2&gt;
&lt;img src=&quot;../img/posts/2017/fsharp512.png&quot; alt=&quot;fsharp&quot; class=&quot;img-rounded pull-left&quot; width=&quot;280&quot; style=&quot;margin-right: 1em;&quot;&gt;
So hopefully by this point I have convinced you (or you have convinced your boss) that having multiple languages is good. Not only that but choosing a functional first language makes good sense. My final step will be to convince you that F# should be that language.
&lt;h3&gt;No cold turkey necessary&lt;/h3&gt;
&lt;p&gt;Although F# is a functional first language, it is actually multi-paradigm. &lt;strong&gt;F# supports both functional and object oriented paradigms. It has to since it interops easily with C#&lt;/strong&gt;. So technically developers could code in an OOP style while they learned the F# language. This is absolutely an option and a pretty low risk way of introducing F#. The down side will be you might not reap the majority of the benefits I have mentioned thus far.&lt;/p&gt;
&lt;h3&gt;Protect the ecosystem&lt;/h3&gt;
&lt;p&gt;Part of what makes C# and .NET in general great is the tooling and libraries built up around it. &lt;strong&gt;Runtimes, IDEs, BCL, and library packages, they are all still available to you in F#&lt;/strong&gt; since it is a .NET based language.&lt;/p&gt;
&lt;h3&gt;Protect the investment&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Your existing investment in libraries and business logic can be re-used as is without a re-write&lt;/strong&gt;. You might want to write a small functional wrapper around them to make them fit in the new functional paradigm but that is a nice to have. This means your current code is re-usable and future code can still be written in whatever a team is comfortable in and still interop in the same solution.&lt;/p&gt;
&lt;h3&gt;Leading the pack&lt;/h3&gt;
&lt;p&gt;F# has been ahead of the curve in the .NET ecosystem in a lot of ways. So many of the great language features since C#&apos;s initial Java clone have been inspired by F#. Current &lt;strong&gt;features like generics, &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;, auto-property initializers, exception filters, expression-bodied function members, and pattern-matching were all in F# first&lt;/strong&gt;(or &lt;a href=&quot;https://blogs.msdn.microsoft.com/dsyme/2011/03/15/netc-generics-history-some-photos-from-feb-1999/&quot;&gt;worked on by the creator of F#&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Shoulders of giants&lt;/h3&gt;
&lt;p&gt;Although F# has been leading the charge with Open Source for longer than probably any other Microsoft endeavour, it still has the backing of Microsoft as well as an active OSS community. F# was released by Microsoft Research in 2005 and has been on Github since 2010. It is lead by the &lt;a href=&quot;http://foundation.fsharp.org/&quot;&gt;FSharp Foundation&lt;/a&gt; that is dedicated to advancing the language.&lt;/p&gt;
&lt;p&gt;Then there is the actual OSS community. There are too many to name individually but some that you will either use or stand out because of their ambition are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ionide.io/&quot;&gt;Ionide&lt;/a&gt; - An IDE plugin for Visual Studio Code and Atom that has been ahead of Visual Studio in supporting F# features, especially with the new &lt;code&gt;netstandard&lt;/code&gt; stuff&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fsharp.github.io/FSharp.Data/&quot;&gt;F# Data&lt;/a&gt; - is a useful library for working with data from varied sources&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://suave.io/&quot;&gt;Suave&lt;/a&gt; - An ambitious and full-featured web library and server that provides a functional-first programming model for web development&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dustinmoris/Giraffe&quot;&gt;Giraffe&lt;/a&gt; - a micro web framework that wraps the Asp.Net Core functionality for a more functional-first programming model&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;mbrace.io&quot;&gt;MBrace&lt;/a&gt; - provides a simple programming model that opens up cloud computing in a way that initially seems like magic&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is far from an exhaustive list. The point is there are mature and well supported projects out there because the F# community is dedicated and enthusiastic. The FsAdvent Calendar initiative is a great example of this.&lt;/p&gt;
&lt;h2&gt;Caution&lt;/h2&gt;
&lt;p&gt;It would be remiss of me not to leave you with a few cautionary points.&lt;/p&gt;
&lt;h3&gt;Learning curve&lt;/h3&gt;
&lt;p&gt;Functional programming, especially with non C like languages can be pretty mind bending when you first start. I wish I could find the quote but I think it was one of the JVM functional language designers (Scala or Clojure) who said something like &amp;quot;sacrificing future power and expressiveness for beginner ease of use is one of the worst traps language designers can fall into&amp;quot;. I like the sentiment but in terms of language popularity it seems to have some unfortunate downsides. However, those who stick with it and start becoming fluent are usually die hard converts because they have realized the usefulness of the paradigm. On the other hand if most give up, the pool of developers will mostly consists of the smartest or most determined.&lt;/p&gt;
&lt;h3&gt;Maturity of the team&lt;/h3&gt;
&lt;p&gt;Language diversity requires a high level of maturity in your development team. A team lacking in maturity is more likely to pick something based on what they feel like using rather than assessing fitness of the tool for the solution. Hiring in at least one for two experienced people to lead would probably be a good idea.&lt;/p&gt;
&lt;h3&gt;Ramp up&lt;/h3&gt;
&lt;p&gt;Ramping up slowly and allowing more people in the organization to get experience on low risk projects could be a low risk way of introducing F#. &lt;a href=&quot;https://youtu.be/qPlYbHKvk4g?t=376&quot;&gt;A developer could learn the syntax this way without taking the productivity hit of learning a new paradigm&lt;/a&gt;. Mark Seemann has talked about how he initially just did OOP with F# and slowly incorporated functional ideas. In Mark&apos;s case I think he was leaning toward functional concepts anyway. Without a push to do so a developer could remain a 100% OO programmer while using F#. Even worse, a developer doing this might then decide that F# provides no benefits. So a slow ramp up comes with it&apos;s own risks.&lt;/p&gt;
&lt;h3&gt;Maturity of deployment&lt;/h3&gt;
&lt;p&gt;With a new language you might need new deployment pipelines so make sure you have this sorted on a technology you are familiar with before going crazy with choices.&lt;/p&gt;
&lt;h3&gt;Pick smart&lt;/h3&gt;
&lt;p&gt;Although I argue for a polyglot environment I am not making the case for ALL languages being allowed. These projects still need to be supported by the organization. Pick a small set of languages after considering a few aspects of them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Maturity of the language, ecosystem, and the community&lt;/li&gt;
&lt;li&gt;Popularity of the language (no point jumping on a sinking ship)&lt;/li&gt;
&lt;li&gt;Availability of developers&lt;/li&gt;
&lt;li&gt;Expected salaries (you need to be competitive)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So I covered reasons why you should consider more languages, why one of those should be functional, and hopefully convinced you to &lt;a href=&quot;http://fsharp.org/&quot;&gt;give F# a try&lt;/a&gt;. This actually isn&apos;t an exhaustive list. Personally, I have found other reasons why learning F# has been great. Learning F# made it easier for me to jump into even more languages. Elm for instance was super low resistance. Also F# has a bunch of really cool features like Type Providers, Computation Expressions, and more that blow your mind when you come across them.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://cacm.acm.org/magazines/2017/10/221326-a-large-scale-study-of-programming-languages-and-code-quality-in-github/fulltext&quot;&gt;A Large-Scale Study of Programming Languages and Code Quality in GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://evelinag.com/blog/2014/06-09-comparing-dependency-networks/&quot;&gt;Comparing F# and C# with dependency networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mark Seemann has a brilliant posts on how a &lt;a href=&quot;http://blog.ploeh.dk/2015/04/13/less-is-more-language-features/&quot;&gt;language can reduce the potential for errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mark has an excellent talk on &lt;a href=&quot;https://www.youtube.com/watch?v=US8QG9I1XW0&quot;&gt;falling into the pit of success&lt;/a&gt; and another on &lt;a href=&quot;https://www.youtube.com/watch?v=cxs7oLGrxQ4&quot;&gt;Dependency Rejection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scott Wlaschin has an excellent &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/low-risk-ways-to-use-fsharp-at-work/&quot;&gt;series on low risk ways to start using F# at work&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Header photo by &lt;a href=&quot;https://unsplash.com/@nhoizey&quot;&gt;Nicolas Hoizey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social photo by &lt;a href=&quot;https://unsplash.com/@groosheck&quot;&gt;Michał Grosicki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scrolls photo by &lt;a href=&quot;https://unsplash.com/@sindreaalberg&quot;&gt;Sindre Aalberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eye photo by &lt;a href=&quot;https://unsplash.com/@amandadalbjorn&quot;&gt;Amanda Dalbjörn&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/touched-by-god/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/touched-by-god/"/>
    <title>Touched by God</title>
    <updated>2017-11-02T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/touched-by-god/</uri>
    </author>
    <summary type="html">&lt;p&gt;In science and life, sometimes things happen that we cannot explain. Just a few hundred years ago most of what could not be explained was attributed to the supernatural. Thankfully a lot of that mystery has been peeled back, opening us up to bigger and more fundamental questions about the universe. Compared to areas like cosmology and particle physics, things like the human mind and consciousness remain relatively unexplored by science. This leaves some questions unanswered about our place in this expanding universe. In this post I explore and contrast some of my early religious spiritual experiences to my recent self-observations in mindfulness.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;A brief history...&lt;/h2&gt;
&lt;p&gt;I grew up in a Christian household, going to church for as far back as I can remember. As a teenager I started attending a more charismatic church with some friends, which I will go into in a bit. After school I studied computer science and physics with a few other things thrown in. After university I also spent a year studying theology part-time. It was while studying theology that I realized I believed what I was raised to believe and I should look at both the religious and scientific alternatives to my world view. &lt;em&gt;The Truth&lt;/em&gt; would of course hold up to any scrutiny.&lt;/p&gt;
&lt;h2&gt;Touched by God&lt;/h2&gt;
&lt;img src=&quot;../img/posts/2017/touched-by-god-flame.jpg&quot; alt=&quot;Fire&quot; class=&quot;img-rounded pull-left&quot; width=&quot;280&quot; style=&quot;margin-right: 1em;&quot;&gt;
For those who have never been involved in this sort of thing it is hard to explain. A meeting at a charismatic Christian event usually goes something like this. The minister will open with a prayer and a reading from the Bible. We would then launch into around 40 minutes of &quot;Praise and Worship&quot;. This would usually start as vibrant upbeat music and end off with more emotive music. These times would often correspond with feelings of joy and awe as it felt like the Holy Spirit was among us. They could often get quite weird for the uninitiated as people would laugh uncontrollably, jump around, and speak out in &quot;tongues&quot;(odd sounds that only angels and those gifted with the ability could understand). The service would then continue with a short sermon and then we would go into a period of &quot;ministry&quot;. This usually entailed people coming to the front and being prayed for while the band softly played in the background. The weirdness of the &quot;praise and worship&quot; is usually overshadowed in this &quot;ministry&quot; time for those who are not accustomed to it. People would laugh and cry uncontrollably. People would gather and pray in &quot;tongues&quot; for each other. People would prophesize about the future of the people standing there, and probably most extraordinary to the uninitiated people would be those &quot;slain in the spirit&quot;. This is a phenomenon where people would fall over backward and then either just lie there basking in the magnificence of God, maybe laughing at the wonder of it, or crying as you are overwhelmed, or convulse as demons flee before the Holy Spirit.
&lt;p&gt;I wanted to give you a brief picture of what it is like to be in that setting. These few words do not bring the full reality of what it feels like to be involved in this. To those who have experienced it, the absolute reality of it is difficult to explain with anything other than the supernatural. There are of course psychological explanations for these effects but I instead wanted to look at them in light of a more recent experience...&lt;/p&gt;
&lt;h2&gt;Within myself&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../img/posts/2017/sand-hand.jpg&quot; alt=&quot;Sand hand&quot; class=&quot;img-rounded pull-left&quot; width=&quot;280&quot; style=&quot;margin-right: 1em;margin-bottom: 1em;&quot;&gt;A few years back I started practicing mindfulness. At the time it was infinitely valuable in coping with a new job in a new city and a way more skeptical view of the metaphysical. This skepticism had a profound effect on my view of mortality which all of a sudden became very cognizant, causing a lot of anxiety. Mindfulness helped me come to terms with this using &lt;a href=&quot;https://en.wikipedia.org/wiki/Maranasati&quot;&gt;Maranasati&lt;/a&gt;. This is a practice where you contemplate and visualize the reality of dying, death, and all that comes after. To be clear, I did not have any dead bodies to look at. Only imagination.&lt;/p&gt;
&lt;p&gt;I keep notes on sessions that stand out. Or just capture how I was feeling before and after my meditation. I also &lt;a href=&quot;https://www.heartmath.com/science/&quot;&gt;measure&lt;/a&gt; my heart rate variability (HRV) while meditating.
I would like to compare the &amp;quot;spiritual&amp;quot; experience recounted earlier against more recent &amp;quot;no-metaphysics-here&amp;quot; experiences. Here is the quote from the notes after the experience I want to recount.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Started off stressed. Was a good session. At the end I started a weird feedback loop where I was aware of being a consciousness in my head and started an elation feedback loop that I could imagine getting quite... spiritual...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was a strange experience to say the least. All of a sudden I really felt like I was observing my thoughts arise and disappear as I chose not to follow them. Not only that but after a while I felt like I had hooks into my mental state with levers attached that I could pull on. So I pulled. I cranked up my feeling of peace and euphoria and lo and behold I felt those things acutely. With absolute clarity of mind I was sitting cross-legged on my bed laughing wholeheartedly at the elation I was feeling. When I realized the weirdness of the situation I flipped the lever and turned it off. Let&apos;s take a look at the graph of my meditation at the time of this. Typically the graph drops down into the red by the 10 minute mark because after settling in for a few minutes I start a &amp;quot;loving kindness meditation&amp;quot; exercise. By the end of that I have moved into wishing happiness onto people who can sometimes aggravate me so things have gone downhill by this point.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2017/meditation-results1.png&quot; alt=&quot;Meditation Results 1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One more thing to mention about the graphs. These graphs in themselves don&apos;t measure anything directly related to the mind. They are just a helpful indicator of calm and focus. For me personally a 7 is an extremely high level of coherence.&lt;/p&gt;
&lt;p&gt;As you can see this feeling of peace and euphoria lasts less than a minute before I am shocked out of it. At this point I contemplate what has just happened. What was that? That reminds me a lot of metaphysical experiences I had at charismatic religious events. Can I control it? Although there are many similarities to the previous church experiences the obvious presence of mind and control was in stark contrast to those experiences. At this point my interest was piqued as to how much control I had of this experience, so I dove back in. Here is the graph continued...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2017/meditation-results2.png&quot; alt=&quot;Meditation Results 2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;I could reproduce it! As you can see this time I was not as easily scared off by the experience and allowed myself to linger in that state for a little while.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;So what does this mean?&lt;/em&gt; I have been able to reproduce this on most of the subsequent times I have tried since then. This has not been very many times, as after the initial novelty wore off I didn&apos;t see too much value other than the insights that the experience gave me over the control I can exercise over my own emotions and state of mind. The euphoria generated from this is much the same as the previous religious experiences and the significance only slightly more. Much like the religious experience the transcendent nature of the experience quickly fades and leaves little impact after the feeling has passed other than renewed assuredness of the &amp;quot;reality&amp;quot; of the spiritual to affect the natural world. The meditative experience however did teach me something about the degree to which I can exercise control over my own emotions and give me a glimpse at what is possible at the extremes of emotion in a controlled and contemplative state. Of course maybe this is just another delusion but at least I am willing to entertain that possibility now.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I recently read Lawrence Krauss&apos; &lt;strong&gt;&lt;a href=&quot;http://www.simonandschuster.co.uk/books/The-Greatest-Story-Ever-Told-So-Far/Lawrence-Krauss/9781471158377&quot;&gt;The Greatest Story Ever Told...So Far&lt;/a&gt;&lt;/strong&gt; and he does an awesome job of capturing the incremental nature of how science has built it&apos;s current edifice of knowledge over hundreds of years. This is in the realm of physics alone. Questions about the soul, consciousness, freewill, and &lt;a href=&quot;/moral-behavior-is-rewarded&quot;&gt;morality&lt;/a&gt; tend to be ignored by science and fall to philosophers, mystics, religious leaders, and sometimes the odd psychologist. Neuroscientists and psychologists seem to be gaining more interest in answering these questions but the field is still young and hesitant to tread in the domain of the religious. That does not mean we need to wait for science to tell us how our mind works. We can start right now to explore it in a subjective way that can still possibly yield objective facts. Each mind is unique in many ways and although we all fall prey to the same biases to one degree or another we can start investigating the nature of those similarities and differences right now. Not only that but we can exercise the &amp;quot;muscles&amp;quot; of our mind and thus learn to exercise some measure of control over our thoughts.&lt;/p&gt;
&lt;p&gt;If your interest was piqued by this post I highly recommend you read &lt;a href=&quot;https://www.samharris.org/waking-up&quot;&gt;Waking Up&lt;/a&gt; by Sam Harris or if reading is not your thing (well done on getting this far) he has an awesome free &lt;a href=&quot;https://www.samharris.org/podcast&quot;&gt;podcast&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Header photo by &lt;a href=&quot;https://unsplash.com/@grakozy&quot;&gt;Greg Rakozy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Social photo by &lt;a href=&quot;https://unsplash.com/@viniciusamano&quot;&gt;Vinicius Amano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Content photo &lt;a href=&quot;https://unsplash.com/@kunjparekh&quot;&gt;Kunj Parekh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/moral-behavior-is-rewarded/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/moral-behavior-is-rewarded/"/>
    <title>Hypothesis: Moral behavior is rewarded</title>
    <updated>2017-10-19T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/moral-behavior-is-rewarded/</uri>
    </author>
    <summary type="html">&lt;p&gt;I don&apos;t consider myself an immoral person. Unless you count those days when I thought there was an all seeing being in the sky watching that I didn&apos;t break the archaic rules laid out by men thousands of years ago who also thought it was ok to own slaves and commit genocide. Since then I have not given too much thought to morality other than my general rule of &amp;quot;Don&apos;t be a dick&amp;quot;. A few weeks back I made a commitment to hold myself to a higher moral standard. Not only that but I laid out some experimental guidelines of rules that I would follow and a hypothesis of what I expect. Finally, I would tell people about it so they could hold me to my commitments.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;A few months back I read &lt;a href=&quot;https://www.samharris.org/books/the-moral-landscape&quot;&gt;The Moral Landscape&lt;/a&gt; by Sam Harris and was really challenged by the idea of using the wellbeing of sentient beings as a measure of morality. I found it not only compelling but also something concrete to measure myself against that didn&apos;t resort to mysticism. It is a brilliant read and I highly recommend it. My own life was silhouetted against the moral landscape. It is up to me decide just how bright to make it. I figured I would map out my path in the hope others might find it useful for their own wellbeing.&lt;/p&gt;
&lt;h2&gt;Hypothesis&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Moral integrity will increase my wellbeing and the wellbeing of those around me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is there any reason to think this is reasonable? Most people want wellbeing but we are poorly wired for it. That doesn&apos;t mean we don&apos;t want it for ourselves, our loved ones, and the human race in general. Of course there are just some people who behave like dicks and don&apos;t have the self awareness to care that they hurt others. Then of course there are sociopaths and psychopaths. This is a dysfunction compared to normal human behavior and experience so lets discount that.&lt;/p&gt;
&lt;p&gt;Human civilization has become more and more... civilized over time. We treat each other better and care more about peoples wellbeing. I don&apos;t think it is unreasonable then that we can attribute that to a move away from violence to discourse. A move to attributing respect and equality to others. I come from South Africa and now live in The Netherlands. The differences in wellbeing I see are like night and day. And I attribute this largely to the respect and equality given to each citizen in a civil society.&lt;/p&gt;
&lt;h3&gt;Expectations&lt;/h3&gt;
&lt;p&gt;I had listed a few expectations when I decided to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It would lead to some awkwardness&lt;/li&gt;
&lt;li&gt;I would be happier with myself&lt;/li&gt;
&lt;li&gt;People would like me more because I am trustworthy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Guidelines&lt;/h3&gt;
&lt;p&gt;The guidelines lay out some clear action plans that I can follow when situations arise. This ends up being quite an important point as it is easy to convince yourself to try take an easy way out of a difficult situation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I will not lie in any circumstance other than a life threatening situation.&lt;/li&gt;
&lt;li&gt;I will not engage in gossip.&lt;/li&gt;
&lt;li&gt;I will try my utmost to treat everyone respectfully at all times.&lt;/li&gt;
&lt;li&gt;I will not steal.&lt;/li&gt;
&lt;li&gt;I will try maintain my equanimity at all times.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Lying&lt;/h4&gt;
&lt;p&gt;This isn&apos;t something that I felt I engaged in a lot. Mostly it was in the context of &lt;em&gt;gossip&lt;/em&gt;. That would lead to having to pretend you don&apos;t know something you do. Other things like being non-committal on things to avoid an uncomfortable discussions. Half-truths to save face. Platitudes to avoid hurting peoples feelings. This last one might have you wondering &amp;quot;Surely that is ok?!&amp;quot;. I maintain not as it is a slippery slope. This is not to say that you should be hurtful. You can still speak the truth while being compassionate and respectful of the other persons feelings. I honestly believe feedback is good for most people (if in a really unhealthy state you might want to pull back even more). Even in the case of someone in a fragile state of mind rather than &amp;quot;You really could have done better at that.&amp;quot; you could just say &amp;quot;Let&apos;s book some time when you are feeling better. It isn&apos;t important now.&amp;quot;&lt;/p&gt;
&lt;h4&gt;Gossip&lt;/h4&gt;
&lt;p&gt;This was the main point that really started to make me uncomfortable about my conduct. I work in a large organization and someone is always frustrated by someone else, myself included. This would often lead to complaining, mostly of the non-constructive sort. At first I thought it cathartic but the more I reflected on it, it actually seemed a toxic part of my life.&lt;/p&gt;
&lt;p&gt;Sometimes in work or personal life talks about others is inevitable. My commitment here has been to not say or agree with anything I have not already said to someones face, or will schedule something to say to their face after these things have been said and agreed with. Knowing you will have to say things to someones face is a great way of moderating yourself and having a constant prompt of whether you want to actually be engaging in a conversation.&lt;/p&gt;
&lt;h4&gt;Respect&lt;/h4&gt;
&lt;p&gt;If the goal is wellbeing for all, treating people well is paramount. I don&apos;t have too much more to say on this. My original guideline of &amp;quot;Don&apos;t be a dick&amp;quot; works well enough for me. The only extra thing I find useful to meditate on as often as possible here is that everyone has a story and is generally just trying to do the best they can just like you. This means people are doing things for reasons that are important to themselves even if they are difficult for you (or sometimes even themselves) to articulate. Remember: you are nothing special, just like me ;)&lt;/p&gt;
&lt;h4&gt;Stealing&lt;/h4&gt;
&lt;p&gt;This is a subtle one. Obviously I am not out there robbing banks. If I was I &lt;a href=&quot;https://www.youtube.com/watch?v=Do3PQR6Tvss&quot;&gt;definitely would not be blogging about it&lt;/a&gt;! There are other ways this could be interpreted, such as taking credit for something someone else has done.&lt;br /&gt;
Not only that but in this digital age it is really easy to share or download media that you do not own. This is a tough one for some. Myself included.&lt;/p&gt;
&lt;h4&gt;Equanimity&lt;/h4&gt;
&lt;p&gt;I had actually found Sam Harris as an author through his neuroscience and mediation interests rather than his challenges against religious ideology that he is (in)famous for. I am not going to get into discussions of &lt;em&gt;self&lt;/em&gt; here but being self aware forms a big part on following through on all the other points mentioned here not to mention it does wonders for your own wellbeing. Just observing your thoughts, learning techniques for focusing your attention, and &lt;em&gt;deciding&lt;/em&gt; to act with intent can result in dramatic improvements in wellbeing.&lt;/p&gt;
&lt;h2&gt;Results so far&lt;/h2&gt;
&lt;p&gt;So one thing I can say for sure is this has lead to some hard conversations. I will also say it gets easier. I still mess up on these points often but I definitely believe it is having a curbing effect on my behavior in these areas.&lt;/p&gt;
&lt;p&gt;Subjective observations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am much more cognizant of what I say which I think has curtailed the amount of things I say that I later regret.&lt;/li&gt;
&lt;li&gt;I am more aware in difficult conversations that there is more than just my side in an argument. I think this has actually made me more effective at convincing people of the merits of my own points.&lt;/li&gt;
&lt;li&gt;I believe my feedback, even in difficult conversations has been appreciated. I have actually received this feedback directly.&lt;/li&gt;
&lt;li&gt;I seem to be perceived as trustworthy. This was said to me today which I really appreciated.&lt;/li&gt;
&lt;li&gt;I am starting to find the small blunt responses to questions that lead to awkwardness easier to just say and not worry about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will see if I can get some data on this from friends and coworkers. It would be interesting to actually be able to plot perception. I will also try post my own subjective experience of this further down the road.&lt;/p&gt;
&lt;h3&gt;Credit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.samharris.org/&quot;&gt;Sam Harris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Photo by Jens Lelie on &lt;a href=&quot;https://unsplash.com/photos/u0vgcIOQG08&quot;&gt;Unsplash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/stop-comparing-eq-and-iq/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/stop-comparing-eq-and-iq/"/>
    <title>Stop comparing EQ and IQ</title>
    <updated>2017-10-17T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/stop-comparing-eq-and-iq/</uri>
    </author>
    <summary type="html">&lt;p&gt;I see this comparison come up online and at work a lot. The implication being that if we want success we look for people with good EQ skills and if they have weak technical skills we can teach them. Sure. These are both skills but if everyone is good at communicating but rubbish at the technical stuff, guess what the quality is like...&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;em&gt;These ideas are my own and do not represent the views of my employer.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I realise that this post has the potential to annoy or offend. Sadly I also don&apos;t expect to change too many minds. I guess I am hoping for this to be cathartic and that it will allow me to move on without being triggered in the future (I should meditate more). The idea that general intelligence is fixed and is decided for us in a genetic lottery does not sit well with us. Including me. Although I would like to be smarter I think (with my limited intellect) that the closer you align your reality with actual reality, the less suffering you will inflict on yourself and others.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;IQ vs EQ is a nonsensical comparison. EQ is dependent on mental facilities correlated to IQ such as verbal comprehension, working memory, perceptual organization, and processing speed. EQ is also very dependent on skills learned while IQ is correlated with the speed and proficiency of skill acquisition. In this post I build on this to try show that IQ should be a fairly good indicator of potential EQ. It should not be surprising that both IQ and EQ are good indicators of success. They are likely BOTH found in successful individuals.&lt;/p&gt;
&lt;h2&gt;Setting the ground work&lt;/h2&gt;
&lt;p&gt;First let me make a few assertions. These are assertions that are either consensus in the SCIENTIFIC community or seem to be the view of the majority of publishing EXPERTS in the related fields. I contrast this to the general public where there is plenty of myth and confusion. Things like &amp;quot;the 8 intelligences&amp;quot;, &amp;quot;street smart&amp;quot;, and &amp;quot;EQ&amp;quot; resonate with our desire to be able to work hard and be better. I do not wish to undermine this and I am by no means asserting IQ is the sole determining trait for success. I really mean this because if I did think about it often, I would seldom assume myself the smartest person in any given room. Which could be depressing. Instead, learning is important. That aside; when confronted with facts versus what I wish was true, on a good day I try choose the facts (or as close to we have them from science when studying the brain).&lt;/p&gt;
&lt;h3&gt;Assertion 1: Everything about us has a physical explanation&lt;/h3&gt;
&lt;p&gt;No metaphysics apply. There is no soul that makes us think a certain way. All our thinking happens in our brain due to biological processes that are possibly mysterious to us but are due to physical systems within our body.&lt;/p&gt;
&lt;h3&gt;Assertion 2: Intelligence is explained by genetics&lt;/h3&gt;
&lt;p&gt;IQ is a fairly good normalized measure of general intelligence. Following on from assertion 1 it is a trait about us that is coded into our DNA. To make this practical. For the smartest people of our time, it was clear that they were special by as early as 2 years of age. Kim Ung-Young for example, with an IQ of 210, was fluent in four languages by age 2. There is little chance that child rearing was the only factor in this.&lt;/p&gt;
&lt;h3&gt;Assertion 3: IQ is a good indicator of ability for skill acquisition&lt;/h3&gt;
&lt;p&gt;Studies show a very positive correlation between IQ and skill acquisition. This is in both physical and mental skills. Again we are not dealing in absolutes here but the studies do show positive correlations.&lt;/p&gt;
&lt;h3&gt;Assertion 4: Skill acquisition is a major contributor to success in life&lt;/h3&gt;
&lt;p&gt;I don&apos;t have a study to back this one up. There do seem to be ones directly linking IQ, and I am hypothesizing this is due to the skills that a high IQ would allow you to quickly learn and master.&lt;/p&gt;
&lt;h3&gt;Assertion 5: EQ is dependent on IQ (or at least correlated)&lt;/h3&gt;
&lt;p&gt;So if EQ is made up of problem solving, perception, verbal communication and comprehension, and many other things along these lines it shouldn&apos;t be hard to accept that EQ correlates to general intelligence, which is what the science shows.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It seems reasonable then that there is a casual (or not so casual) relationship between IQ and EQ.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It therefore follows that IQ is a good indicator of either having high EQ or being able to quickly improve EQ.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Life is messy and for all our advances we are still in the dark on a lot of the processes that operate in our brain. So this is not supposed to be a post saying that the smart are destined to succeed and the rest are just here to witness it. Far from it! Determination, creativity, compassion, and many other traits make us who we are and allow us to achieve great things.&lt;/p&gt;
&lt;p&gt;As a software developer though, stop telling me I don&apos;t need to work with smart people, just good communicators. It takes a lot to convince me that someone with poor people skills is smart. So stop making this a zero sum game. It is not. Or maybe it is and I am just not smart enough to realise it, and I am so poor at communicating I can&apos;t convince anyone otherwise.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.psych.utoronto.ca/users/reingold/courses/intelligence/cache/1198gottfred.html&quot;&gt;psych.utoronto.ca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://theconversation.com/what-chess-players-can-teach-us-about-intelligence-and-expertise-72898&quot;&gt;theconversation.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.researchgate.net/publication/307874653_The_relationship_between_cognitive_ability_and_chess_skill_A_comprehensive_meta-analysis&quot;&gt;researchgate.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S1877042813017096&quot;&gt;sciencedirect.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.memory-key.com/research/news/correlation-between-emotional-intelligence-and-iq&quot;&gt;memory-key.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/yoda-wants-you-to-be-a-functional-programmer/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/yoda-wants-you-to-be-a-functional-programmer/"/>
    <title>Yoda wants you to be a functional programmer</title>
    <updated>2017-06-10T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/yoda-wants-you-to-be-a-functional-programmer/</uri>
    </author>
    <summary type="html">&lt;p&gt;This one is just for laughs but technical writing doesn&apos;t always have to be serious.&lt;br /&gt;
I was double checking a Yoda quote for my previous post and it got me thinking about how many Yoda quotes could be applied to the functional programming (FP) paradigm.&lt;br /&gt;
Star wars and programming are meant to go together.&lt;/p&gt;
&lt;!--more--&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Size matters not. Look at me. Judge me by my size, do you? Hmm? Hmm. And well you should not.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functional programming involves small building blocks of functions that you compose to make more specific functions and so on. The functions and the types tend to be small and stay small.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Do. Or do not. There is no try.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functions always return a value. No &lt;code&gt;void&lt;/code&gt; here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Much to learn you still have…my old padawan. This is just the beginning!” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;FP is a new paradigm. Learning a new paradigm is way harder than learning a new language. It is a very useful tool to have in your toolbox though.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Truly wonderful, the mind of a child is.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;When learning FP, don&apos;t bring your object-oriented baggage. Embrace that this is something different.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Always pass on what you have learned.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another reference (pun intended wink wink) to functions in FP always returning something.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Once you start down the dark path, forever will it dominate your destiny, consume you it will.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;This one was tough. Do I use this to represent that once you grok a paradigm and see it&apos;s merits, you can&apos;t unlearn that. I think instead this should be a warning against letting yourself think any one paradigm is the best or only one that matters (I am looking at OOP).&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Mind what you have learned. Save you it can.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;FP is a new paradigm and will make you a better developer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“You will find only what you bring in.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;In FP you don&apos;t usually store state. You pass along what you need in arguments.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2&gt;“Attachment leads to jealously. The shadow of greed, that is.” – Yoda&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;I could make a point here about storing state but I think it is more important to reiterate the warning about the dark side of being too attached to just one paradigm. Find balance in the force.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So that&apos;s it for Yoda on functional programming. Hope it made you think and I hope it made you smile.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/productivity-tips-1/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/productivity-tips-1/"/>
    <title>Productivity Tips</title>
    <updated>2017-06-09T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/productivity-tips-1/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;“Do. Or do not. There is no try.” - Yoda&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Time has become a precious commodity for me lately. Between management meetings, team meetings, and then actually trying to improve small things in process and code, it is easy to loose track of things. Even worse is that it is easy to loose track of what is important. So I am finding myself going back to some old habits that died off during different shifts in my career and apply many of them again.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Productivity tips&lt;/h1&gt;
&lt;p&gt;Most of these tips revolve around focus. When things get busy it is easy to loose focus and that is when productivity drops.&lt;/p&gt;
&lt;h2&gt;All the things&lt;/h2&gt;
&lt;p&gt;Ubiquitous capture. Write down anything that you aren&apos;t going to do now as soon as you become aware of it. An email comes in that you need to action. Capture it on your TODO list. Once it is down on paper, you are much less likely to worry about it and you can&apos;t forget about it.&lt;/p&gt;
&lt;h3&gt;How you capture&lt;/h3&gt;
&lt;p&gt;The list. How you capture is less important than being consistent. When trying out things I find todo lists can actually make things worse for a while before they become better. The reason for this is I am not capturing in a single place. Trying to minimize the number of mediums you use to capture tasks is important. I tried and like the idea of a notebook but I just didn&apos;t carry it around enough. I have settled on &lt;a href=&quot;https://todoist.com&quot;&gt;Todoist&lt;/a&gt; because I can have it open on my laptop and my phone. It also has integrations with tools I use like Slack. I will discuss this a bit more in the next section. Start off simple. Don&apos;t have too many categories/projects etc. Just capture everything that comes in.&lt;/p&gt;
&lt;h3&gt;Revue and rate&lt;/h3&gt;
&lt;p&gt;Go over your list often and prioritize it. Make sure you are doing the most important things first. Creating a habit of going through your list every morning will make sure it is current as well as keep in mind the most important things only.&lt;/p&gt;
&lt;h2&gt;Remind me&lt;/h2&gt;
&lt;p&gt;Set reminders if you need to. I use bots in Slack to remind me to do things at specific times. I also use it to remind others. Just be careful of information overload. If you use it too prolifically people will start to ignore the reminders, especially if it is for things they don&apos;t find too important.&lt;/p&gt;
&lt;h2&gt;Pomodoro&lt;/h2&gt;
&lt;p&gt;Many people find the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;Pomodoro Technique&lt;/a&gt; really useful. It is especially useful when you have lots of little things that can distract you. Switching focus often can kill productivity so committing to spend at least a little time focused on one thing can make a huge difference. I use an app called &lt;a href=&quot;http://tide.moreless.io/en/&quot;&gt;Tide&lt;/a&gt; that does the job for me. It has a timer and can play music or white noise. This is perfect for when working in a noisy environment. As I write this I am in a noisy cafe but am listening to birds chirping, which I find less distracting than multiple conversations, moving chairs, and clinking cups.&lt;/p&gt;
&lt;h2&gt;Clear your mind&lt;/h2&gt;
&lt;p&gt;Meditation has a bad reputation among many people as the pastime of hippies and mystics but it is a useful skill to develop for those who value focus and clarity of thought. There are many practices you can use to achieve different things. I will briefly touch on a few that I use. There are many others and I encourage you to explore the options. I will mention some resources at the end of this section where you can start. Also note that I will only talk from my experience so what I write might not be 100% what you might find out in the wild, or even what you may experience yourself. Meditation is about as personal as it gets as it is your consciousness observing itself.&lt;/p&gt;
&lt;h3&gt;Focused attention&lt;/h3&gt;
&lt;p&gt;Here you focus on something in an effort to still your monkey mind. This isn&apos;t an evolutionary reference but more a comment on how our mind works. Just observe your inner monologue and attention as you read this. &amp;quot;What is this guy on about? Meditaiton! Really?&amp;quot;, &amp;quot;Maybe I should try this?&amp;quot;, &amp;quot;Can I move things with my mind?&amp;quot;, &amp;quot;It seems really boring... I could do other things...I need to go to the shops... do I have milk in the fridge...&amp;quot;. And so our mind goes on ceaselessly. We usually about as in control of our thoughts as a leaf in a river.&lt;/p&gt;
&lt;p&gt;So in focused attention I focus on my breath. First I scan through my body and try release any tension felt with each out breath. As the mind goes off I bring it back to the breath and just focus on the up and down. The sensation around my nostrils. Sometimes I only hold my attention for a few seconds before it goes off again for a few minutes on some train of thought. When you realise you bring it back to the breath, and try again. This isn&apos;t a fight you are trying to win. You are just slowly training the brain to focus on what you want it to focus on. Not only that, your brain and your body will appreciate the moments of peace where you are not lost in thought.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Benefits: Increase mental focus, relax the body, decrease stress&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Loving kindness&lt;/h3&gt;
&lt;p&gt;Loving kindness is a technique for developing compassion for yourself and the people around you. This can have a profound impact on how you treat yourself and others.&lt;/p&gt;
&lt;p&gt;As I near the end of my meditation I spend a few minutes cycling through the people in my life. I start with those most beloved to me and move out to colleagues and acquaintances, and eventually just general humanity. I visualize the person, or people (hard for all of humanity), and try generate feelings of compassion toward them while repeating the phrase &amp;quot;I am grateful for person X. I wish them peace, happiness, and freedom from suffering&amp;quot;. That is it!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Benefits: Increase compassion for others, increase personal well-being, mend and tend relationships&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Appreciation&lt;/h3&gt;
&lt;p&gt;I tend to lump this one in with my loving kindness but it is a distinct practice. After being appreciative of the people in my life I also make a point of reminding myself of other things I have to be appreciative of such as things, opportunities, and health.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Benefits: Peace and happiness&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Resources for meditation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.samharris.org/podcast/item/mindfulness-meditation&quot;&gt;Sam Harris has some guided meditation recordings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.headspace.com/register&quot;&gt;Headspace is a subscription service to teach meditation but has a 10 day trial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.audible.com/pd/Self-Development/Practicing-Mindfulness-An-Introduction-to-Meditation-Audiobook/B00DDVQQLA/&quot;&gt;Practicing Mindfulness audible book from The Great Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.audible.com/pd/Self-Development/The-Science-of-Mindfulness-Audiobook/B00MEQRUG0/&quot;&gt;The Science of Mindfulness audible book from The Great Courses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Calendar blocks&lt;/h2&gt;
&lt;p&gt;This is a real simple one but it can be very helpful to block time in your calendar to do specific important tasks. This is useful if your calendar can quickly fill up with meeting requests. I block time to just be available for my team as well as for specific tasks.&lt;/p&gt;
&lt;p&gt;Another little tip is to not accept meetings until you have been furnished with an agenda. This allows you to determine whether you really are the best person to be at that meeting, or if invitees are missing.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Although I stated productivity comes down to focus, we explored how to increase it from multiple prongs. Techniques and tips, training, and tools. Use what works for you but please try give all of them an honest try. I would love to hear what you use to keep focused. Please let me know in the comments below.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/agile-is-a-characteristic/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/agile-is-a-characteristic/"/>
    <title>Agile is a Characteristic</title>
    <updated>2017-03-22T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/agile-is-a-characteristic/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pragdave.me/blog/2014/03/04/time-to-kill-agile.html&quot;&gt;Agile is dead&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I see more and more posts and talks claiming that Agile is dead. Broad statements like this are obviously just for effect but even if just click-bait, the sentiment is coming from somewhere. In this post I dig into reasons to say this and why we can still have hope.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Agile is dead&lt;/h1&gt;
&lt;p&gt;Let&apos;s take a look at the ways it dies and why it can never truly die.&lt;/p&gt;
&lt;h2&gt;Still-born&lt;/h2&gt;
&lt;p&gt;So sometimes agile was never alive at a company anyway. I have walked into companies where they declare to me &amp;quot;We tried Agile and it doesn&apos;t work&amp;quot;, or just &amp;quot;Agile sucks!&amp;quot;. When you drill into what they actually did though, agility was never there. They had no process, and no way of improving the process. They knew they needed something. So they slapped the word &amp;quot;Scrum&amp;quot; on what they did. Occasionally they had a standup where people would stand up and look at their toes, and then go about their business as usual. Agile never drew it&apos;s first breath here...&lt;/p&gt;
&lt;h2&gt;Lemmings&lt;/h2&gt;
&lt;p&gt;Some young team hears about this new shiny thing that all the cool companies are doing, they grab a bunch of processes off a website and the start applying them. No matter that they don&apos;t know why. No matter that there are only 2 developers. They slog through for months but eventually it fades out because they don&apos;t see any value. They tried the processes without understanding the spirit of it. Hell it&apos;s not the spirit of the word... it is the actual word... Agile.&lt;/p&gt;
&lt;p&gt;Another flavour here is teams that actually implement SCRUM by the book. They experience moderate success and so they double down on the processes. Soon the processes become an institution unto themselves. Recipes to be applied rather than a gifted chef tasting and experimenting with a dish.&lt;/p&gt;
&lt;p&gt;Agile has become a label now to be stuck on things like tags at an estate sale. The Sprint has changed from a fluffy cushion that protects the developers to the Great Wall of China, keeping the stakeholders out. Demos are immovable institution that represent the success or failure of a team. And cancelling a sprint because requirements have changed becomes anathema to the Agile adherents as they follow their rituals off the cliff... or is that a waterfall?&lt;/p&gt;
&lt;h2&gt;Darwin award&lt;/h2&gt;
&lt;p&gt;Large companies struggle to overcome the inertia required to change to agile processes. Even if a development department manages to adopt, if the whole company doesn&apos;t evolve to the new way of working, the initiative is doomed to die. Not only will it die but all those involved will develop a distrust for the agile initiative. Buy in from all levels of stakeholders (decision makers, middle management, developers, etc.) is important before you even start.&lt;/p&gt;
&lt;h2&gt;Immortal&lt;/h2&gt;
&lt;p&gt;So why do I believe agile will never die? At it&apos;s core, agility is a characteristic of the team developing a product, not the processes they adopt to do that. And at the core of software development is what got us to the point that software development is even a thing. Adaptability. Evolution. It is why we went from hiding in a cave from predators stronger and faster than us to the dominant animal on the planet. More than any other animal on the planet we can look at our situation and we can improve it. Then we look at it and we improve it again. Sometimes we fail. Sometimes badly. Over the long game though we have trended to improvement. Although we borrow much from other production disciplines, ours is but an infant. And unless we fail morally and bring forth Skynet... we are going to grow up and get better. It is determined. It is in our genes...&lt;/p&gt;
&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;Agile Manifesto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S0164121216300826&quot;&gt;Challenges and success factors for large-scale agile transformations: A systematic literature review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/aspect-rating/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/aspect-rating/"/>
    <title>Aspect Rating</title>
    <updated>2017-03-21T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/aspect-rating/</uri>
    </author>
    <summary type="html">&lt;p&gt;I recently ran a retrospective with a team of 11 (including myself). With that many people getting focused feedback is important or meetings can drag out. I found this exercise quite useful and the rest of the team seemed to as well. See &lt;a href=&quot;/check-in-check-out&quot;&gt;this post for the Check-in/Check-out&lt;/a&gt; I ran before and after.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;The first step is measure&lt;/h1&gt;
&lt;p&gt;The idea is simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put some aspects of team interaction along the top of the board or wall. I used the following and I suggest this order (see Analysis for why):
&lt;ul&gt;
&lt;li&gt;Direction&lt;/li&gt;
&lt;li&gt;Progress&lt;/li&gt;
&lt;li&gt;Process&lt;/li&gt;
&lt;li&gt;Team work&lt;/li&gt;
&lt;li&gt;Learning&lt;/li&gt;
&lt;li&gt;Enthusiasm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Draw an arrow up, labelling the bottom 1 and the top 5 (see image below)&lt;/li&gt;
&lt;li&gt;Ask the team to put their name on 6 post-its&lt;/li&gt;
&lt;li&gt;Explain that they need to put 1 post-it under each aspect rating that aspect of the team&lt;/li&gt;
&lt;li&gt;Discuss&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;/img/posts/2017/aspect-rating.jpg&quot; alt=&quot;Aspect Rating Example&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;em&gt;Aspect Rating board: Note the order is different to my recommendations&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;What you want to focus on next is up to you. Be sure to celebrate the good but depending on the state of the team you may not want to spend too much time on it. We had 1 hour and we needed 5 to 10 minutes for the &lt;a href=&quot;/check-in-check-out&quot;&gt;Check-in/Check-out&lt;/a&gt;. We then spent some time celebrating the good by allowing people to explain why they voted for those items.&lt;/p&gt;
&lt;p&gt;My suggestion at this point is to focus on the lowest one from here and work your way up, time permitting. Unless something is systemically wrong with the team there should be quick wins to raise things that are a 1.&lt;/p&gt;
&lt;p&gt;If things degenerate into technical discussions interject and ask to take it offline.&lt;/p&gt;
&lt;h2&gt;Aspects&lt;/h2&gt;
&lt;p&gt;Let&apos;s walk through what each aspect is in case this isn&apos;t clear from the label.&lt;/p&gt;
&lt;h3&gt;Direction&lt;/h3&gt;
&lt;p&gt;This is the direction of the team. Do they know what they are building? Do they know why they are building it? Do they know how they are going to build it?&lt;/p&gt;
&lt;h3&gt;Progress&lt;/h3&gt;
&lt;p&gt;How does the team rate its progress in building what it should be building? This comes after direction because if you don&apos;t know what you are building you are unlikely to feel like you are progressing toward it. This project in particular had a rocky start due to a dependence on an external party, so direction was low. Feelings of progress varied based on whether a team member was focusing on infrastructure or feature implementation.&lt;/p&gt;
&lt;h3&gt;Process&lt;/h3&gt;
&lt;p&gt;Here you are trying to find out the team&apos;s buy in to a process or feelings that the process is lacking. Again, the direction contributed but with a new team I was introducing processes as the team requested them. This is usually not a good idea unless you have an experienced agile team who are capable of raising issues proactively and self-organsing. Although a newly formed team it is comprised of experienced members so this was low risk.&lt;/p&gt;
&lt;h3&gt;Team work&lt;/h3&gt;
&lt;p&gt;How well does the team feel it is collaborating? Are they pair-programming? Are they stepping on each others toes? Are they aware of what each team member is doing? It was mentioned to me by &lt;a href=&quot;https://www.erikheemskerk.nl/&quot;&gt;a very astute team member&lt;/a&gt; that teamwork is very difficult, if not impossible, to get right if the team does not have clear direction. See my &lt;a href=&quot;/big-agile-teams&quot;&gt;post on big agile teams&lt;/a&gt; for some ideas of facilitating team communication.&lt;/p&gt;
&lt;h3&gt;Learning&lt;/h3&gt;
&lt;p&gt;Is the team challenged? Are they learning new things? This is important for cultivating an autonomous, self organising team as well as for enthusiasm.&lt;/p&gt;
&lt;h3&gt;Enthusiasm&lt;/h3&gt;
&lt;p&gt;Are team members excited to come to work? Excited to work on the project/product? Happy to work together? This forms a symbiotic relationship with all the others and will go down if any of the others stay down and when it does go down, all the others will drop even faster from the feedback effect. It is the canary, so watch it well.&lt;/p&gt;
&lt;h2&gt;Analysis&lt;/h2&gt;
&lt;p&gt;This was from the team&apos;s first retrospective and as mentioned the direction was shaky from the start, so this was actually better than expected from a young team (with experienced members). If anything surprises you be sure to spend a large amount of time drilling into what is going on there. From this retrospective we implemented a few more process items that showed immediate benefit. I cannot stress the significance of this enough.&lt;/p&gt;
&lt;p&gt;The team identified a problem, and an agile process (think demo, refinement, etc.) was introduced because the pain was felt and a balm was applied. How many things do you do and care about in your life that have no benefit to you or anyone you care about? Why should development be any different? Only solve problems that exist. Before Agile was a label, &lt;a href=&quot;agile-is-a-characteristic&quot;&gt;agile was a characteristic&lt;/a&gt; of a team.&lt;/p&gt;
&lt;img src=&quot;/img/posts/2017/aspect-rating-2017-03-17.jpg&quot; alt=&quot;Aspect Rating Chart&quot; class=&quot;img-thumbnail&quot;&gt;
&lt;p&gt;&lt;em&gt;Aspect Rating analysis&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Great snapshot of the team&apos;s perception of itself&lt;/li&gt;
&lt;li&gt;Identify things to celebrate&lt;/li&gt;
&lt;li&gt;Identify problem areas and provide a forum to start discussing&lt;/li&gt;
&lt;li&gt;Seemed to eliminate personal rants and every team member repeating the same thing that often seems to happen with some other formats&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bottom line is that it really focuses the discussion into narrow, helpful, actionable bands.&lt;/p&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It really focuses the discussion into narrow, helpful, actionable bands. Sometimes you want to generate more free form discussion or drill into technical details or inter-personal conflicts within the team. I can&apos;t say for sure but this does not seem suited.&lt;/li&gt;
&lt;li&gt;The team really needs to get involved in discussing the aspects or this is going to be a very short meeting&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think I will be using this regularly to document the teams progression on these aspects. I won&apos;t use it every retrospective but maybe every 2nd or 3rd. As this is something new I am experimenting with so please note that this is early stage beta so take it with a pinch of salt. I will try report back with more data once I have more. Did you find this useful? Do you have your own methods that you use regularly for retrospectives that gives you measurable insight? Let me know in the comments below.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/big-agile-teams/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/big-agile-teams/"/>
    <title>Big Agile Teams</title>
    <updated>2017-03-20T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/big-agile-teams/</uri>
    </author>
    <summary type="html">&lt;p&gt;As a team grows it becomes more difficult to apply some agile practices effectively. SCRUM meetings like standup and retrospectives become drawn out, the number of stories becomes hard to manage, and the communication within the team can easily break down.&lt;br /&gt;
Currently I have a team of 10 and I am experimenting with ways of tackling these issues. Hopefully this will turn into a loose series of posts surrounding my experiences with a larger team. I won&apos;t go into the why suffice to say it is a project rather than a product but we don&apos;t want to go waterfall.&lt;/p&gt;
&lt;h1&gt;Big team tactics&lt;/h1&gt;
&lt;p&gt;Most of these tactics focus on communication of what the team is working on but there are a few process items. Some of these tactics are taken from previous smaller teams and are by no means only for large teams. By the time you have 9+ people social bonding, communication, and working memory are all suffering so these need to be focused on.&lt;/p&gt;
&lt;h2&gt;Cells&lt;/h2&gt;
&lt;p&gt;The team is broken up into 2s. These 2 developers are responsible for keeping eachother abreast of their own progress. This is more than just an informal pairing. If possible they work in related areas. They are preferred for peer review and pair-programming. Most notably they are responsible for reporting progress for each other at the standup. See next point for details...&lt;/p&gt;
&lt;h2&gt;Developers are chickens too&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A Pig and a Chicken are walking down the road.&lt;br /&gt;
The Chicken says: &amp;quot;Hey Pig, I was thinking we should open a restaurant!&amp;quot;&lt;br /&gt;
Pig replies: &amp;quot;Hm, maybe, what would we call it?&amp;quot;&lt;br /&gt;
The Chicken responds: &amp;quot;How about &apos;ham-n-eggs&apos;?&amp;quot;&lt;br /&gt;
The Pig thinks for a moment and says: &amp;quot;No thanks. I&apos;d be committed, but you&apos;d only be involved.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cell members alternate between being &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Chicken_and_the_Pig&quot;&gt;chickens and pigs&lt;/a&gt;. At a standup only the pigs report on progress but will do it for the fellow cell chicken. This keeps everyone informed but the number of active participants smaller. Not only that but the nominated pig needs to at least understand what the chicken did well enough to explain it. Hat-tip to the Feynman Technique ;)&lt;/p&gt;
&lt;h2&gt;Present the plan&lt;/h2&gt;
&lt;p&gt;Before implementing a complete story developers are encouraged to discuss how they will be implementing a given story before implementation is underway (or very far). This gives others a chance to weigh in on the implementation details and bubble up any hidden knowledge or pitfalls. I suggest a regular prompt for this, possibly straight after standup.&lt;/p&gt;
&lt;h2&gt;Technical demos&lt;/h2&gt;
&lt;p&gt;This is not a stakeholder demo. Plan regular (2 weeks seems good) demos where the developers can deep-dive on what they have been working on with the others in a bit more of a formal way. One or two slides, some live demos of code and functionality, and a Q&amp;amp;A afterward.&lt;/p&gt;
&lt;h2&gt;Dedicated learning time&lt;/h2&gt;
&lt;p&gt;It is easy for people to get lost in the group and fall behind and as a team lead it is difficult to spend time with everyone. Dedicating a regular afternoon to discussing new technologies or methodologies is good for moral as well as raising the skills of the team.&lt;/p&gt;
&lt;h2&gt;Socialize&lt;/h2&gt;
&lt;p&gt;Getting the team to bond is even more important when it is bigger. Lunching together, non-work activities, or even retrospectives can help bring together. A focus on sharing feelings at points in the retrospective can help others understand how others they are not close to in the team are feeling.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope some of these suggestions are helpful and if you have any of your own please let me know in the comments below. These are all a work in progress and I will hopefully report back in a later post.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/check-in-check-out/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/check-in-check-out/"/>
    <title>Check-in and Check-out</title>
    <updated>2017-03-20T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/check-in-check-out/</uri>
    </author>
    <summary type="html">&lt;p&gt;Someone must have thought of this before but I have not read this anywhere so I thought I would jot it down. I recently ran a retrospective that I thought went really well, and apparently so did everyone else...&lt;/p&gt;
&lt;h1&gt;Measure with Check-in and Check-out&lt;/h1&gt;
&lt;p&gt;if you don&apos;t measure something how can you know if it improving? It is a staple of development so why shouldn&apos;t we apply it to our meetings as well. It is really easy.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the start of the retrospective ask everyone to write down a single word (or phrase) that sums up there feeling about how things are going&lt;/li&gt;
&lt;li&gt;Ask if anyone would like to share what they wrote down (can be more than one or even everybody)&lt;/li&gt;
&lt;li&gt;Do your retrospective&lt;/li&gt;
&lt;li&gt;Repeat step 1 at the end of the retrospective and see if anything changed&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Easy!&lt;/p&gt;
&lt;img src=&quot;/img/posts/2017/check-in-out.jpg&quot; alt=&quot;Check-in-Check-out&quot; class=&quot;img-thumbnail&quot;&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/better-error-handling/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/better-error-handling/"/>
    <title>Better error handling</title>
    <updated>2017-03-19T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/better-error-handling/</uri>
    </author>
    <summary type="html">&lt;p&gt;In my &lt;a href=&quot;/honest-return-types&quot;&gt;previous post&lt;/a&gt; I discussed handling &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;Exception&lt;/code&gt; in the return type. In this post I will discuss returning logic errors.&lt;/p&gt;
&lt;h1&gt;Handling errors&lt;/h1&gt;
&lt;p&gt;There are times when valid errors can occur but are not exceptional. Validation is a common example of this and where a validation result is often the go to type. Wouldn&apos;t it be nice if we could apply the same pattern as with exceptions?&lt;/p&gt;
&lt;h2&gt;Either: Errors or no errors&lt;/h2&gt;
&lt;p&gt;Functional languages define a type with the following form: &lt;code&gt;Either&amp;lt;Left, Right&amp;gt;&lt;/code&gt;. &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; can be anything but in the case of error handling &lt;code&gt;Left&lt;/code&gt; is the unhappy path and &lt;code&gt;Right&lt;/code&gt; is the happy path. Let&apos;s assume we have an &lt;code&gt;Error&lt;/code&gt; type for representing errors that occurred, then using &lt;code&gt;Either&lt;/code&gt; to represent error handling could look something like this: &lt;code&gt;Either&amp;lt;IEnumerable&amp;lt;Error&amp;gt;, T&amp;gt;&lt;/code&gt;. &lt;code&gt;Error&lt;/code&gt; has an implicit conversion to &lt;code&gt;string&lt;/code&gt; so let&apos;s work with &lt;code&gt;string&lt;/code&gt; for demonstration purposes below.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;Func&amp;lt;int, int, Either&amp;lt;IEnumerable&amp;lt;string&amp;gt;, int&amp;gt;&amp;gt; divide =
    (i, d) =&amp;gt;
    {
        if (d == 0)
            return List(&amp;quot;Cannot divided by zero.&amp;quot;);

        return (i / d);
    };

Either&amp;lt;IEnumerable&amp;lt;string&amp;gt;, int&amp;gt; divideByZeroResult = divide(1, 0);
divideByZeroResult.Match(
    Left: errors =&amp;gt; errors.ToList().ForEach(x =&amp;gt; Console.WriteLine(x)),
    Right: i =&amp;gt; Console.WriteLine($&amp;quot;Answer is {i}&amp;quot;)
);
//Cannot divide by zero.

Either&amp;lt;IEnumerable&amp;lt;string&amp;gt;, int&amp;gt; twoResult = divide(4, 2);
twoResult.Match(
    Left: errors =&amp;gt; errors.ToList().ForEach(x =&amp;gt; Console.WriteLine(x)),
    Right: i =&amp;gt; Console.WriteLine($&amp;quot;Answer is {i}&amp;quot;)
);
//Answer is 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works great but &lt;code&gt;Either&amp;lt;IEnumerable&amp;lt;string&amp;gt;, int&amp;gt;&lt;/code&gt; is quite a verbose return type definition. If we know we are always going to use &lt;code&gt;IEnumerable&amp;lt;string&amp;gt;&lt;/code&gt; as &lt;code&gt;Left&lt;/code&gt; why not specify that in the type? Before we do that, we are going to take a quick dive into some functional programming ideas.&lt;/p&gt;
&lt;h2&gt;Functional side-bar&lt;/h2&gt;
&lt;p&gt;Lets go through a couple concepts that will come up. Hopefully you read the previous post that introduced &lt;em&gt;Elevated types&lt;/em&gt;. Here I will quickly go through working with elevated types.&lt;/p&gt;
&lt;h3&gt;Return: To the world of elevated types&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Return&lt;/em&gt; is raising to the world of elevated types. You have already seen examples of return already in this post. &lt;code&gt;Some&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; for &lt;code&gt;Either&amp;lt;L, R&amp;gt;&lt;/code&gt; are just some &lt;em&gt;return&lt;/em&gt; operations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;//return - elevate an int to Option&amp;lt;int&amp;gt;
Option&amp;lt;int&amp;gt; optInt = Option&amp;lt;int&amp;gt;.Some(1);
// Some(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Apply - just this part&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Apply&lt;/em&gt; unpacks a function and applies the first argument then returns an elevated function representing the result.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;//apply
Func&amp;lt;int, int, int&amp;gt; add = (a, b) =&amp;gt; a + b;//function 
Option&amp;lt;int&amp;gt; addOpt = Some(add);//elevate function

var increment = addOpt.Apply(1) ;//apply: b =&amp;gt; 1 + b
increment.Apply(5);
// Some(6)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Map: ol&apos; switch-a-roo&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Map&lt;/em&gt; applies the function to the value contained in the elevated value and returns the elevated result. In C# terms &lt;em&gt;Map&lt;/em&gt; like LINQ&apos;s &lt;code&gt;Select&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;Func&amp;lt;int, string&amp;gt; intToString = (i) =&amp;gt; i.ToString();
Option&amp;lt;int&amp;gt; optInt = Option&amp;lt;int&amp;gt;.Some(1);
//map - apply function to inner value
Option&amp;lt;string&amp;gt; optString = optInt.Map(intToString);
// Some(&amp;quot;1&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Bind: functions in the darkness&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;... and in the darkness bind them&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sorry that was a Lord of the Rings reference. My 2nd name is legally Aragorn (from birth), I didn&apos;t stand a chance...&lt;br /&gt;
&lt;em&gt;Bind&lt;/em&gt; allows you to compose (bind) functions in an elevated world. It is analogous to &lt;code&gt;SelectMany&lt;/code&gt; from LINQ fame.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;Func&amp;lt;string, Option&amp;lt;int&amp;gt;&amp;gt; ifEvenInt = (s) =&amp;gt;
{
    if (int.TryParse(s, out int i))
    {
        return (i % 2 == 0) ? Some(i) : None;
    }
    else
    {
        return None;
    }
};

Func&amp;lt;int, Option&amp;lt;int&amp;gt;&amp;gt; doubleIt = (i) =&amp;gt; Some(i * 2);
Func&amp;lt;int, Option&amp;lt;int&amp;gt;&amp;gt; exp = (i) =&amp;gt; Some(i * i);

Option&amp;lt;string&amp;gt; optString = optInt.Map(&amp;quot;2&amp;quot;);

//bind - passes inner value to a function that returns an elevated result
Option&amp;lt;int&amp;gt; eventResult = optString.Bind(ifEvenInt);
// used to combine elevated functions
var worked = eventResult
    .Bind(doubleIt)
    .Bind(exp);
// Some(16)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we changed &amp;quot;2&amp;quot; to &amp;quot;1&amp;quot; the output would be &lt;code&gt;None&lt;/code&gt; since &lt;code&gt;ifEvenInt&lt;/code&gt; would return &lt;code&gt;None&lt;/code&gt; which would short-circuit all the &lt;code&gt;Bind&lt;/code&gt; calls.&lt;/p&gt;
&lt;h2&gt;Match: what goes up must come down&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Match&lt;/em&gt; is the yin to &lt;em&gt;Return&lt;/em&gt;&apos;s yang. Where &lt;em&gt;Return&lt;/em&gt; operations elevate values to the elevated world, &lt;em&gt;Match&lt;/em&gt; drops an elevated value back to the real world.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;//match
Option&amp;lt;int&amp;gt; optInt = Option&amp;lt;int&amp;gt;.Some(1);
optInt.Match(
    Some: x =&amp;gt; Console.WriteLine(x),
    None: () =&amp;gt; Console.WriteLine(&amp;quot;Nothing&amp;quot;)
);
// 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we can get to the elevated world, do what we need to do and then return back through the cupboard, let us get back to the business at hand. Validation!&lt;/p&gt;
&lt;h2&gt;Validation: Your result (might have errors)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You can find the &lt;code&gt;Validation&lt;/code&gt; type in &lt;a href=&quot;https://github.com/dburriss/HonestTypes#return-types&quot;&gt;HonestTypes.Returns&lt;/a&gt; package&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So let&apos;s define a type &lt;code&gt;Validation&amp;lt;T&amp;gt;&lt;/code&gt; that is &lt;code&gt;Either&amp;lt;IEnumerable&amp;lt;Error&amp;gt;, T&amp;gt;&lt;/code&gt;? That would remove some of the verbosity of the return type as well as give a clearer semantic to the type name.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;using static F;

public Validation&amp;lt;Person&amp;gt; Validate(Person person)
{
    if (person == null)
        return Error(&amp;quot;Person is null&amp;quot;);

    //short circuit on error
    return Valid(person)
        .Bind(ValidateFirstNames)
        .Bind(ValidateLastName)
        .Bind(ValidateEmail);
}

private Validation&amp;lt;Person&amp;gt; ValidateFirstNames(Person person)
{
    if (string.IsNullOrWhiteSpace(person.FirstNames))
        return Invalid(Error($&amp;quot;{nameof(person.FirstNames)} cannot be empty&amp;quot;));

    return person;
}

private Validation&amp;lt;Person&amp;gt; ValidateLastName(Person person)
{
    if (string.IsNullOrWhiteSpace(person.LastName))
        return Invalid(Error($&amp;quot;{nameof(person.LastName)} cannot be empty&amp;quot;));

    return person;
}

private Validation&amp;lt;Person&amp;gt; ValidateEmail(Person person)
{
    if (string.IsNullOrWhiteSpace((string)person.Email))
        return Invalid(Error($&amp;quot;{nameof(person.Email)} cannot be empty&amp;quot;));

    return person;
}

//usage
var validatedPerson = service.Validate(person);

validatedPerson.Match(
    Valid: p =&amp;gt; Console.WriteLine($&amp;quot;{p.LastName}, {p.FirstNames} &amp;lt;{p.Email}&amp;gt;&amp;quot;),
    Invalid: err =&amp;gt; err.ToList().ForEach(x =&amp;gt; Console.WriteLine(x.Message))
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above uses &lt;code&gt;Bind&lt;/code&gt; and short-circuits on the first error. This might not be the desired behaviour. What if we want to check all validations? Here is a version that does that...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public Validation&amp;lt;Person&amp;gt; Validate(Person person)
{
    if (person == null)
        return Error(&amp;quot;Person is null&amp;quot;);

    //collect all errors
    return Valid(Person.Create)
        .Apply(ValidateFirstNames(person.FirstNames))
        .Apply(ValidateLastName(person.LastName))
        .Apply(ValidateEmail(person.Email));
}

Func&amp;lt;FirstNames, Validation&amp;lt;FirstNames&amp;gt;&amp;gt; ValidateFirstNames =&amp;gt; firstNames =&amp;gt;
{
    if (string.IsNullOrWhiteSpace(firstNames))
        return Invalid(Error($&amp;quot;{nameof(firstNames)} cannot be empty&amp;quot;));

    return firstNames;
};

Func&amp;lt;LastName, Validation&amp;lt;LastName&amp;gt;&amp;gt; ValidateLastName =&amp;gt; lastName =&amp;gt;
{
    if (string.IsNullOrWhiteSpace(lastName))
        return Invalid(Error($&amp;quot;{nameof(lastName)} cannot be empty&amp;quot;));

    return lastName;
};

Func&amp;lt;Email, Validation&amp;lt;Email&amp;gt;&amp;gt; ValidateEmail =&amp;gt; email =&amp;gt;
{
    if (string.IsNullOrWhiteSpace((string)email))
        return Invalid(Error($&amp;quot;{nameof(email)} cannot be empty&amp;quot;));

    return email;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code uses &lt;code&gt;Apply&lt;/code&gt; and is applicative so all errors are returned. Notice how the return result is actually a &lt;code&gt;Func&lt;/code&gt; that performs the validation.&lt;/p&gt;
&lt;p&gt;if you don&apos;t like the &lt;code&gt;Func&lt;/code&gt; style you can continue to use the &lt;code&gt;Bind&lt;/code&gt; syntax but with the applicative nature using &lt;code&gt;Validation&lt;/code&gt; types &lt;code&gt;Join&lt;/code&gt; method...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;//collect all errors
return Valid(person)
    .Join(ValidateFirstNames(person))
    .Join(ValidateLastName(person))
    .Join(ValidateEmail(person));
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And there you have some neat validation logic. If you have any comments or suggestions please leave them below. If you found this useful, please share it with someone who you think might also find it useful.&lt;/p&gt;
&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/elevated-world/&quot;&gt;Elevated world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/rop/&quot;&gt;Railway oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/honest-return-types/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/honest-return-types/"/>
    <title>Honest Return Types</title>
    <updated>2017-03-14T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/honest-return-types/</uri>
    </author>
    <summary type="html">&lt;p&gt;In &lt;a href=&quot;/honest-arguments&quot;&gt;Part 1&lt;/a&gt; we looked at ways of making your code more descriptive by using custom types instead of simple types like &lt;code&gt;string&lt;/code&gt;. In this article we will look at what your return type can tell you about a method.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Updated: 19 March 2017&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h1&gt;Honest Return Types&lt;/h1&gt;
&lt;p&gt;For most of this post let us build on the example of a &lt;code&gt;Person&lt;/code&gt; repository. We are not going to dive into implementation but instead focus on the descriptiveness of the return type. Our starting point is this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public interface IQueryPerson
{
    Person Get(Email email);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The return type should be honest about what can happen when you call a method. Does this repository method return &lt;code&gt;null&lt;/code&gt; if no record is found? Does it throw and exception? Does it return a &lt;a href=&quot;https://martinfowler.com/eaaCatalog/specialCase.html&quot;&gt;special case&lt;/a&gt; subtype? Wouldn&apos;t it be nice if your return type could tell you this instead of you having to dig into the implementation to find out.&lt;/p&gt;
&lt;p&gt;My 2 criteria are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A return type should be really descriptive of what the possible outcomes are&lt;/li&gt;
&lt;li&gt;The interface for interacting with a type should make it difficult for developers to do the wrong thing&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Result: A first try&lt;/h2&gt;
&lt;p&gt;One solution is a &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt; or some such flavour. It might look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class Result&amp;lt;T&amp;gt;
{
    public T Value { get; set; }
    public bool IsSuccess { get; set; }
    public IEnumerable&amp;lt;string&amp;gt; Errors { get; set; }
    public Result()
    {
        Errors = new List&amp;lt;string&amp;gt;();
    }

    public Result(T value)
    {
        if(value == null)
        {
            IsSuccess = false;
        }
        else
        {
            IsSuccess = true;
            Value = value;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This could be written in slightly different ways, with error codes instead of string for Errors, or even &lt;code&gt;Exception&lt;/code&gt;. Let&apos;s discuss the pros and cons of this.&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It does acknowledge that something could go wrong&lt;/li&gt;
&lt;li&gt;Can return some error and state information without throwing an exception (read unexplicit &lt;code&gt;goto&lt;/code&gt; statement)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;It is not descriptive about what represents a failure&lt;/li&gt;
&lt;li&gt;Value can be accessed without checking for success&lt;/li&gt;
&lt;li&gt;The type doesn&apos;t convey whether &lt;code&gt;null&lt;/code&gt; could still be a valid value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it is something but doesn&apos;t really fulfill either of my criteria very well. We are going to have to take a quick sidebar and talk about representing &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;Result&amp;lt;T&amp;gt;&lt;/code&gt; doesn&apos;t tell us whether we should expect &lt;code&gt;T&lt;/code&gt; to be &lt;code&gt;null&lt;/code&gt; and whether that is valid.&lt;/p&gt;
&lt;h2&gt;Functional side-bar&lt;/h2&gt;
&lt;p&gt;In functional terms an elevated type is like a wrapper. It is a higher level of abstraction that allows us to work with the type in a predictable way. &lt;code&gt;IEnummerable&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Exception&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Either&amp;lt;L. R&amp;gt;&lt;/code&gt;, &lt;code&gt;Validation&amp;lt;T&amp;gt;&lt;/code&gt; are all examples of elevated types.&lt;/p&gt;
&lt;h2&gt;Option: &lt;code&gt;null&lt;/code&gt; is None&lt;/h2&gt;
&lt;p&gt;&amp;quot;It depends&amp;quot; is something you hear a lot in development, and wouldn&apos;t it be great if a type conveyed this? &lt;code&gt;Option&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt; are types often found in more functional languages that highlight the fact that a value could not be present. It allows you to say that there is &lt;code&gt;Some&lt;/code&gt; value, or the value is &lt;code&gt;None&lt;/code&gt;. This is probably easier to demonstrate...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am using &lt;a href=&quot;https://github.com/louthy/language-ext&quot;&gt;LanguageExt&lt;/a&gt; to get some more functional types. This one is mature and fully featured but pick whatever works for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public Option&amp;lt;Person&amp;gt; Get(Email email)
{
    Person person = QueryByEmail(email);//person could be null if no matching email found in the datasource
    return person;
}

//usage example
var person1 = personRepository.Get(email);

//print out last name if person was found otherwise print &amp;quot;Nobody&amp;quot;
person1.Match(
    Some: p =&amp;gt; Console.WriteLine(p.LastName),
    None: () =&amp;gt; Console.WriteLine(&amp;quot;Nobody&amp;quot;)
);

//return fullname or Nobody if no one was found
var person1Name = person1.Match(
    Some: p =&amp;gt; $&amp;quot;{p.FirstNames} {p.LastName}&amp;quot;,
    None: () =&amp;gt; &amp;quot;Nobody&amp;quot;
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The implementation uses &lt;code&gt;implicit&lt;/code&gt; conversion to return &lt;code&gt;None&lt;/code&gt; if the value is &lt;code&gt;null&lt;/code&gt; otherwise the &lt;code&gt;Person&lt;/code&gt; is elevated with Some.&lt;br /&gt;
I explicitly elevate the result to demonstrate what is happening. Let&apos;s also add some error-handling as this will show a problem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;using static LanguageExt.Prelude;
public Option&amp;lt;Person&amp;gt; Get(Email email)
{
    try
    {
        Person person = QueryByEmail(email);
        if(person == null)
            return None;
        return Some(person);
    }
    catch (Exception)
    {
        return None;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this is looking a little better.&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Return type is explicit about possibility of no value being returned&lt;/li&gt;
&lt;li&gt;The API of the type encourages handling of branch between happy and unhappy path&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;We cannot differentiate between no value and an exception&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exception: return don&apos;t throw&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The following &lt;code&gt;Exceptional&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Validation&amp;lt;T&amp;gt;&lt;/code&gt; types are defined in &lt;a href=&quot;https://github.com/dburriss/HonestTypes&quot;&gt;HonestTypes&lt;/a&gt;. Check the project page for installation instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So our type needs to be a bit more explicit about what can happen. Let&apos;s introduce an &lt;code&gt;Exceptional&amp;lt;T&amp;gt;&lt;/code&gt; type.
This is similar to &lt;code&gt;Option&amp;lt;Person&amp;gt;&lt;/code&gt; but instead of &lt;strong&gt;Some&lt;/strong&gt; and &lt;strong&gt;None&lt;/strong&gt; it has &lt;strong&gt;Exception&lt;/strong&gt; and &lt;strong&gt;Success&lt;/strong&gt;.&lt;br /&gt;
For those of you familiar with functional programming it is basically &lt;code&gt;Either&amp;lt;Exception, T&amp;gt;&lt;/code&gt; with left set to &lt;code&gt;Exception&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public Exceptional&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt; Get(Email email)
{
    try
    {
        Person person = QueryByEmail(email);
        Option&amp;lt;Person&amp;gt; result = person;
        return result;
    }
    catch (DbException ex)//only catch expected exceptions
    {
        return ex;
    }
}

//usage
var person1 = personRepository.Get(email);

person1.Match(
    Exception: ex =&amp;gt; Console.WriteLine($&amp;quot;Exception: {ex.Message}&amp;quot;),
    Success: opt =&amp;gt; opt.Match(
        None: () =&amp;gt; Console.WriteLine(&amp;quot;Person: Nobody&amp;quot;),
        Some: p =&amp;gt; Console.WriteLine($&amp;quot;Person: {p.FirstNames} {p.LastName}&amp;quot;)
    )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One important point in the repository implementation is you need to assign it to &lt;code&gt;Option&amp;lt;Person&amp;gt;&lt;/code&gt; before returning it which implicitly converts to &lt;code&gt;Exceptional&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt;&lt;/code&gt;.
You can&apos;t go directly from &lt;code&gt;Person&lt;/code&gt; to &lt;code&gt;Exceptional&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt;&lt;/code&gt; unfortunately.&lt;/p&gt;
&lt;p&gt;The difference in this implementation is in the exception handling. See how we just return the exception? The exception has an implicit conversion to the elevated type of &lt;code&gt;Exceptional&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Return type is very explicit about both errors and no value&lt;/li&gt;
&lt;li&gt;API of return type encourages good handling of code paths&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;With the nested generics the type declaration is quite verbose&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So with a bit of borrowing from functional programming and some added verbosity to our method signature we managed to move from an admittedly simple signature to a slightly more verbose one that is brutally honest about the possible outcomes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;Person Get(Email email);
Result&amp;lt;Person&amp;gt; Get(Email email);
Option&amp;lt;Person&amp;gt; Get(Email email);
Exceptional&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt; Get(Email email);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope you found something useful in this and if you did I cannot recommend enough the brilliant &lt;a href=&quot;https://www.manning.com/books/functional-programming-in-c-sharp&quot;&gt;Functional Programming in C#&lt;/a&gt; from Manning. I must warn that some of the chapters in this book are heavy going. Not because they are badly written but because as a C# and Java developer the concepts are so foreign that they take a while to sink in. Like most things worthwhile it takes effort and determination but you will be a better developer for it.&lt;/p&gt;
&lt;p&gt;In my following post I will discuss &lt;a href=&quot;/better-error-handling&quot;&gt;error handling&lt;/a&gt; and how logic/validation errors can be represented as return types following the same criteria as in this post.&lt;/p&gt;
&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/posts/elevated-world/&quot;&gt;Elevated world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsharpforfunandprofit.com/rop/&quot;&gt;Railway oriented programming&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/honest-arguments/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/honest-arguments/"/>
    <title>Honest Arguments</title>
    <updated>2017-03-10T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/honest-arguments/</uri>
    </author>
    <summary type="html">&lt;p&gt;One of the benefits of statically typed languages is that we can rely on more than the method and parameter names for information on what is expected and what is returned. A well designed method should be about more than naming. Too often we give up on this type safety and expressiveness for the ease of instantiating primitives and &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Expressively typed parameters&lt;/h1&gt;
&lt;p&gt;Consider the following 2 tips for message choice. To be fair I chose less than expressive names to demonstrate that even if a developer doesn&apos;t pick the best names (which they should of course try to do and should be fixed), the types of the argument provide all the intent needed. The parameter names could be &apos;l&apos;, &apos;f&apos;, and &apos;e&apos; and a developer could still infer the usage from the types.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2017/primitive-typed-method.jpg&quot; alt=&quot;primitive parameters&quot; /&gt;
&lt;em&gt;Figure 1: Using simple type parameters&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2017/expressively-typed-method.jpg&quot; alt=&quot;expressive parameters&quot; /&gt;
&lt;em&gt;Figure 2: Using expressive type parameters&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So how would we represent something like a name as a type instead of a &lt;code&gt;string&lt;/code&gt; but still have it play nice with the capture in a client or storage of an instance in a database?
The trick is with the &lt;code&gt;implicit&lt;/code&gt; or &lt;code&gt;explicit&lt;/code&gt; keywords.&lt;/p&gt;
&lt;h2&gt;Lose the primitives (but play nice)&lt;/h2&gt;
&lt;p&gt;For types that are always a direct conversion with no chance of failing, use the &lt;code&gt;implicit&lt;/code&gt; keyword.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class FirstNames
{
    string Value { get; }
    public FirstNames(string value) { Value = value; }

    public static implicit operator string(FirstNames c)
        =&amp;gt; c.Value;
    public static implicit operator FirstNames(string s)
        =&amp;gt; new FirstNames(s);

    public override string ToString() =&amp;gt; Value;
}

//usage
FirstNames name = &amp;quot;Devon Aragorn&amp;quot;;
string nameAsString = name;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On the other hand when you start adding a bit of behaviour into your class, there is a chance that the conversion can fail. Take for instance an &lt;code&gt;Email&lt;/code&gt; type that has some validation of the email address.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class Email
{
    private const string regexPattern = @&amp;quot;\A(?:[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;amp;&apos;*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z&amp;quot;;
    private string Value { get; }

    public Email(string value)
    {
        if(!Regex.IsMatch(value, regexPattern, RegexOptions.IgnoreCase))
        {
            throw new ArgumentException($&amp;quot;{value} is not a valid email address.&amp;quot;, nameof(value));
        }
        Value = value;
    }

    public static explicit operator string(Email c)
        =&amp;gt; c.Value;
    public static explicit operator Email(string s)
        =&amp;gt; new Email(s);

    public override string ToString() =&amp;gt; Value;
}

//usage
Email email = (Email)&amp;quot;test@test.com&amp;quot;;
string emailAsString = (string)email;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are using the &lt;code&gt;explicit&lt;/code&gt; keyword because the constructor can throw an exception if the string is not a valid email address.&lt;/p&gt;
&lt;h3&gt;Pros&lt;/h3&gt;
&lt;p&gt;Let&apos;s list some reasons why you would want to do this with simpler types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;strong&gt;expressive types reveal intent&lt;/strong&gt; to consumers (other developers and future you)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finding usage&lt;/strong&gt; of particular concepts can be done by type rather than searching text&lt;/li&gt;
&lt;li&gt;If doing domain modelling you can now &lt;strong&gt;group behavior and data&lt;/strong&gt; to have a descriptive model&lt;/li&gt;
&lt;li&gt;Once assigned to an expressive type they &lt;strong&gt;provide type safety&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Creation of more &lt;strong&gt;targeted extension methods&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cons&lt;/h3&gt;
&lt;p&gt;As with most things in programming, #ItDepends. There are some down sides to using types this way...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;More code&lt;/strong&gt; to write and maintain&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Serialization&lt;/strong&gt; requires a bit more work to do&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ORM mapping&lt;/strong&gt; could be more complicated&lt;/li&gt;
&lt;li&gt;Implicit conversion means you lose some type safety&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me quickly discuss a few of these cons and how they can be mitigated.&lt;/p&gt;
&lt;h4&gt;More Code&lt;/h4&gt;
&lt;p&gt;Not much to do about the maintainability part. I will say that these are relatively simple and are unlikely to change or have far reaching effects due to dependencies. To address the effort of actually creating these see &lt;a href=&quot;/visual-studio-implicit-snippet&quot;&gt;Visual Studio Implicit Snippet&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Serialization&lt;/h4&gt;
&lt;p&gt;For some help easily serializing these types check out the &lt;a href=&quot;https://github.com/dburriss/HonestTypes&quot;&gt;Honest Types repository&lt;/a&gt;. That package provides a Json.NET Converter like &lt;code&gt;new SimpleJsonConverter&amp;lt;LastName, string&amp;gt;()&lt;/code&gt; that can be supplied to the settings when serializing and deserializing.&lt;/p&gt;
&lt;h4&gt;ORM Mapping&lt;/h4&gt;
&lt;p&gt;If you are modelling your domain (like with DDD) which is likely the case if you are using types this way, then you shouldn&apos;t be using your domain models for persistence. This tends to tie your domain models to the underlying data model and you will find the schema requirements will start leaking into your domain model. So create models for your data layer and map from them to your domain models in the repository.&lt;/p&gt;
&lt;h2&gt;Recommended Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://enterprisecraftsmanship.com/2015/03/07/functional-c-primitive-obsession/&quot;&gt;Functional C#: Primitive obsession&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/visual-studio-implicit-snippet/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/visual-studio-implicit-snippet/"/>
    <title>Visual Studio Implicit Snippet</title>
    <updated>2017-03-08T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/visual-studio-implicit-snippet/</uri>
    </author>
    <summary type="html">&lt;p&gt;Sometimes you want to create a &lt;a href=&quot;/honest-arguments&quot;&gt;descriptive type&lt;/a&gt; to better represent a concept such as an email (rather than a &lt;code&gt;string&lt;/code&gt;) but what stops you is the effort in creating this type. Here is a quick snippet to allow you to quickly generate these types reliably.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;What will we be generating?&lt;/h1&gt;
&lt;p&gt;What we are trying to generate is a class that ends up looking something like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;public class LastName
{
    string Value { get; }
    public LastName(string value) { Value = value; }

    public static implicit operator string(LastName c)
        =&amp;gt; c.Value;
    public static implicit operator LastName(string s)
        =&amp;gt; new LastName(s);

    public override string ToString() =&amp;gt; Value;
    public override int GetHashCode() =&amp;gt; Value.GetHashCode();
    public override bool Equals(object obj)
    {
        if (Value == null || obj == null)
            return false;

        if (obj.GetType() == typeof(string))
        {
            var otherString = obj as string;
            return string.Equals(Value, otherString, StringComparison.Ordinal);
        }

        if (obj.GetType() == this.GetType())
        {
            string otherString = string.Format(&amp;quot;{0}&amp;quot;, obj);
            return string.Equals(Value, otherString, StringComparison.Ordinal);
        }

        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This class will implicitly convert between &lt;code&gt;LastName&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; and compares like a value type. So two different instances of the same last name will be equivalent.&lt;/p&gt;
&lt;h2&gt;Visual Studio Snippet&lt;/h2&gt;
&lt;p&gt;If you are using &lt;a href=&quot;https://www.jetbrains.com/resharper/features/code_templates.html&quot;&gt;Resharper&lt;/a&gt; or another development productivity extension, creating snippets is fairly easy. In Visual Studio without a productivity extension it takes a little more effort but not much.&lt;/p&gt;
&lt;p&gt;First you will need to create the snippet. Open up your favourite editor (&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;I use Visual Studio Code&lt;/a&gt;) and create a file called &lt;em&gt;impl.snippet&lt;/em&gt; and save it somewhere. You will be importing it into Visual Studio later so remember where you put it. Also be aware that it will actually be copied to &lt;em&gt;C:\Users{user}\Documents\Visual Studio 2017\Code Snippets\Visual C#\My Code Snippets&lt;/em&gt; when you import it and the one you saved is not the one that Visual Studio uses. So if make changes to the original you will need to re-import it and if you edit the imported one it seems VS needs a restart.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;  
&amp;lt;CodeSnippets  
    xmlns=&amp;quot;http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet&amp;quot;&amp;gt;  
    &amp;lt;CodeSnippet Format=&amp;quot;1.0.0&amp;quot;&amp;gt;  
        &amp;lt;Header&amp;gt;  
            &amp;lt;Title&amp;gt;Class with implicit string operator&amp;lt;/Title&amp;gt;  
            &amp;lt;Author&amp;gt;Devon Burriss&amp;lt;/Author&amp;gt;  
            &amp;lt;Description&amp;gt;Creates a class that can implicitly convert to and from string.&amp;lt;/Description&amp;gt;
            &amp;lt;Shortcut&amp;gt;impl&amp;lt;/Shortcut&amp;gt;
        &amp;lt;/Header&amp;gt;
        &amp;lt;Imports&amp;gt;  
            &amp;lt;Import&amp;gt;  
                &amp;lt;Namespace&amp;gt;System&amp;lt;/Namespace&amp;gt;  
            &amp;lt;/Import&amp;gt;  
        &amp;lt;/Imports&amp;gt;  
        &amp;lt;Snippet&amp;gt;
            &amp;lt;Declarations&amp;gt;  
                &amp;lt;Literal&amp;gt;  
                    &amp;lt;ID&amp;gt;name&amp;lt;/ID&amp;gt;   
                    &amp;lt;ToolTip&amp;gt;Name of the class.&amp;lt;/ToolTip&amp;gt;   
                    &amp;lt;Default&amp;gt;MyImplicitType&amp;lt;/Default&amp;gt;   
                &amp;lt;/Literal&amp;gt;
            &amp;lt;/Declarations&amp;gt;
            &amp;lt;Code Language=&amp;quot;csharp&amp;quot;&amp;gt;  
                &amp;lt;![CDATA[
                    public class $name$
                    {
                        string Value { get; }
                        public $name$(string value) { Value = value; }

                        public static implicit operator string($name$ c)
                            =&amp;gt; c.Value;
                        public static implicit operator $name$(string s)
                            =&amp;gt; new $name$(s);

                        public override string ToString() =&amp;gt; Value;
                        public override int GetHashCode() =&amp;gt; Value.GetHashCode();
                        public override bool Equals(object obj)
                        {
                            if (Value == null || obj == null)
                                return false;

                            if (obj.GetType() == typeof(string))
                            {
                                var otherString = obj as string;
                                return string.Equals(Value, otherString, StringComparison.Ordinal);
                            }

                            if (obj.GetType() == this.GetType())
                            {
                                string otherString = string.Format(&amp;quot;{0}&amp;quot;, obj);
                                return string.Equals(Value, otherString, StringComparison.Ordinal);
                            }

                            return false;
                        }
                    }
                ]]&amp;gt;  
            &amp;lt;/Code&amp;gt;  
        &amp;lt;/Snippet&amp;gt;  
    &amp;lt;/CodeSnippet&amp;gt;  
&amp;lt;/CodeSnippets&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Xml file: &lt;em&gt;impl.snippet&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;Header&amp;gt;&lt;/code&gt; element defines some generic information about the snippet. It is all self explanatory. I do want to just point out the &lt;code&gt;&amp;lt;Shortcut&amp;gt;&lt;/code&gt; element. This is what you will edit if you want anything other than typing &lt;strong&gt;impl&lt;/strong&gt; and then hit the &lt;strong&gt;Tab&lt;/strong&gt; button to activate the snippet.&lt;/p&gt;
&lt;p&gt;The interesting bit is the &lt;code&gt;&amp;lt;Literal&amp;gt;&lt;/code&gt; element. It has an &lt;code&gt;&amp;lt;ID&amp;gt;&lt;/code&gt; element which is used in the snippet template to be the replacement variable. So when you hit &lt;strong&gt;Tab&lt;/strong&gt; you can type a name for the class and it will be inserted into all the relevant places.&lt;/p&gt;
&lt;h2&gt;Import into Visual Studio&lt;/h2&gt;
&lt;p&gt;Once you have created your snippet and saved it somewhere, go to Visual Studio (if that isn&apos;t what you used to create the snippet).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to &lt;em&gt;Tool &amp;gt; Code Snippets Manager...&lt;/em&gt; (or press Ctrl+K, Ctrl+B).&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Import...&lt;/em&gt; (you can choose C# language to be safe but it seems to pick it up from the snippet)&lt;/li&gt;
&lt;li&gt;Browse to the &lt;em&gt;impl.snippet&lt;/em&gt; file you created earlier an click &lt;em&gt;Open&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Make sure &lt;strong&gt;My Coded Snippets&lt;/strong&gt; is selected and click &lt;em&gt;Finish&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you are done. Now to create the class you can type &lt;code&gt;impl&lt;/code&gt; in any .cs file and hit &lt;strong&gt;Tab&lt;/strong&gt; and it will generate the class&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you find yourself creating repetitive classes, or avoiding to create classes because they are repetitive. Consider automating it to a degree by using a snippet.&lt;/p&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms165396.aspx&quot;&gt;How to&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms242312.aspx&quot;&gt;Snippet functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms171418.aspx&quot;&gt;Schema Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/cake-build/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/cake-build/"/>
    <title>Building a Cake Script</title>
    <updated>2017-03-04T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/cake-build/</uri>
    </author>
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://cakebuild.net/&quot;&gt;CAKE&lt;/a&gt; is a great automation DSL that uses C#. Not only is it comfortable for C# developers to script automation tasks in, it has a stack of built in functionality and a great ecosystem of addins that give you a great jumpstart for just about anything you would like to automate.&lt;/p&gt;
&lt;p&gt;This is a quick tip on how to create a Visual Studio Code task that will build your Cake script. This is a great way of verifying your scripts without actually running Cake tasks.
Also make sure you have the Visual Studio Code extension for Cake installed to give you syntax highlighting.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Creating a tasks.json file&lt;/h2&gt;
&lt;p&gt;Press &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and type &lt;strong&gt;Tasks:C&lt;/strong&gt; and hit enter or click &apos;Tasks: Configure Task Runner&apos;. If the file does not exist it will be created. If there is an existing build task be sure to replace it. Note that that this is building the cake script, not building whatever project your Cake script is probably meant to build. That being said, if you are using Cake to build something, this task described here should probably be a custom task, not the build task.&lt;/p&gt;
&lt;h2&gt;Adding our Cake build task&lt;/h2&gt;
&lt;p&gt;Now that we have  add the following task to the json tasks array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;taskName&amp;quot;: &amp;quot;Build&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;powershell&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    &amp;quot;args&amp;quot;: [&amp;quot;.\\build.ps1 -Whatif&amp;quot;],
    &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
    &amp;quot;isBuildCommand&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cake works by running a powershell script (default is &lt;em&gt;build.ps1&lt;/em&gt;) that uses Roslyn to compile the Cake file. What our script does is execute the build script and trigger a compile but without actually executing any tasks. Not even the Default one. This is done by adding the &lt;code&gt;-Whatif&lt;/code&gt; argument flag.&lt;br /&gt;
In the example above the &lt;code&gt;isBuildCommand&lt;/code&gt; is set to &lt;strong&gt;true&lt;/strong&gt; so that &lt;strong&gt;Ctrl+Shift+B&lt;/strong&gt; can be used to build the &lt;em&gt;build.cake&lt;/em&gt; file.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Automating your builds, testing and deployment is important but don&apos;t stop there. Making sure your workspace feedback cycle is fast can also be a great way to increase productivity and decrease frustration. Hope this quick tip helps someone. Leave a comment if you have any of your own Cake tips.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/ddd-glossary/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/ddd-glossary/"/>
    <title>Domain-Driven Design Glossary</title>
    <updated>2017-02-14T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/ddd-glossary/</uri>
    </author>
    <summary type="html">&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-xs-6 col-md-3&quot;&gt;
    &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=as_sl_pc_tf_mfw?&amp;linkCode=wey&amp;tag=wwwnervstucoz-20&quot; class=&quot;thumbnail&quot;&gt;
      &lt;img src=&quot;/img/posts/2017/blue-book.jpg&quot;/&gt;
    &lt;/a&gt;
  &lt;/div&gt;
DDD cannot be summarized in a few paragraphs. In fact it would take a few books to cover it thoroughly. 
Even then like anything worthwhile it requires much practice and many mistakes to start to become proficient at it.
This is how it is with most skills that add a lot of value.
&lt;p&gt;A good start would be reading Eric Evans&apos; &lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=as_sl_pc_tf_mfw?&amp;amp;linkCode=wey&amp;amp;tag=wwwnervstucoz-20&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is worthwhile being familiar with some of the common terms thrown around in DDD.&lt;/p&gt;
&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2&gt;What is DDD not?&lt;/h2&gt;
&lt;p&gt;DDD is not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calling your area of work a Domain&lt;/li&gt;
&lt;li&gt;Modelling the state of objects required into a bunch of &lt;a href=&quot;http://www.martinfowler.com/bliki/AnemicDomainModel.html&quot;&gt;anemic models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Services containing logic that act on the anemic models&lt;/li&gt;
&lt;li&gt;A giant ball of interconnected objects where every class in your project has a reference somehow to every other&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What is DDD?&lt;/h2&gt;
&lt;p&gt;DDD is about modelling, and more. It encompasses common language, techniques, patterns, and architecture. It puts the focus on the business and modelling the problems you are solving. All the while giving developers techniques for minimizing the complexity and driving collaboration.
It is about taking requirements and really mapping the business processes to the model using the same language the business uses in your code.
It also gives us a common technical language to use for the different categories of classes we create while modelling our problem space.&lt;/p&gt;
&lt;h2&gt;Glossary of terms&lt;/h2&gt;
&lt;h3&gt;Ubiquitous language&lt;/h3&gt;
&lt;p&gt;The term &lt;em&gt;Ubiquitous language&lt;/em&gt; is thrown out occasionally in DDD discussions but ironically itself is often not discussed. It is also the part often left out from the development side which means the heart of DDD is not being followed and instead some of it&apos;s technical approaches used (often incorrectly).&lt;br /&gt;
It is the practice of &lt;strong&gt;using the terms used throughout the business within the codebase&lt;/strong&gt;, and working new terms from the modeling back into the business. Language often evolves and the codebase should evolve with the language. The essence really of DDD is that your code models the processes within the business and if you are not starting with the same language then how descriptive can it really be. If a product owner is looking at the application code he should recognise the classes, methods, and variables as models, workflows, and actions that actually occur.&lt;/p&gt;
&lt;p&gt;It is not a one-way street however. Often the business has over-loaded terms, or a multiplicity of terms used for the same thing. Work with the them to define a glossary of terms that is used everywhere (ubiquitously).&lt;/p&gt;
&lt;h3&gt;Bounded context&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;Bounded context&lt;/em&gt; is the context in which the &lt;em&gt;Ubiquitous language&lt;/em&gt; and the corresponding models are valid. As developer it is a common trap to fall into to try reuse code and concepts across contexts. This is a recipe for disaster since the terms and verbs used to describe a model in one context will likely be similar but not the same. This results in blurring of the model to cater for both. This adds confusion as well as inviting changes with unintended consequences. This is especially true when a model is shared across more than one team (strongly concider whether it really is one context).&lt;/p&gt;
&lt;h4&gt;Example&lt;/h4&gt;
&lt;p&gt;Imagine a Product class in the Logistics domain. For tracking around the warehouse you need a barcode, for shipping you need the packaged dimensions and weight. Now think of a product for display on an e-commerce website. You need photos, description, and other specs like its actual dimensions unpacked.&lt;br /&gt;
Why would a developer need all of this at one time? Why confuse matters? Why would the clients of the code like a scanner in the warehouse or a customer on the website need both? If all that is shared is maybe a name and a SKU, is the code sharing of 2 properties worth coupling different parts of the system? Different teams together?&lt;br /&gt;
There are many reasons to want to keep these models seperated based on their context and few reasons to combine them. Yet it is a very common occurance in development. Why? Code re-use.&lt;br /&gt;
Only re-use models if they are indeed the same model.&lt;/p&gt;
&lt;h3&gt;Entities&lt;/h3&gt;
&lt;p&gt;Entities are the classes that model the domain concepts and have identity. This usually means there is a unique primary key associated with the entity. Remember that modelling in DDD takes us back to the OOP we learned in the text books... behavior and data together. This is in antithesis to the usual &lt;a href=&quot;https://martinfowler.com/bliki/AnemicDomainModel.html&quot;&gt;anemic models&lt;/a&gt; found in most software.&lt;/p&gt;
&lt;h3&gt;Value objects&lt;/h3&gt;
&lt;p&gt;Value objects are much like entities except they do not have identity. Money is the quintessential example of a model that shows intent, contains rules, but does not have identity. The important part here is using types to convey meaning as well as place logic along with the data in a very obvious way.&lt;/p&gt;
&lt;h3&gt;Aggregate&lt;/h3&gt;
&lt;p&gt;An Aggregate is a hierarchy of objects (Entities and Value objects) that make up a consistency boundary.&lt;br /&gt;
Why would we want to set a boundary rather than just reference any object needed?&lt;/p&gt;
&lt;p&gt;Minimising associations helps to prevent a reference web. This can be problematic when fetching and reconstituting a hierarchy of objects into memory. Lazy loading can quickly get out of hand, alternatively null references about and conntinually need to be checked.&lt;/p&gt;
&lt;p&gt;Let us turn the question around. What if the relationships of our object model clearly showed us the effects of change? For example, the aggregate was the scope of the transaction...&lt;/p&gt;
&lt;h4&gt;Aggregate root&lt;/h4&gt;
&lt;p&gt;The Aggregate Root is an Entity that all other Entities and Value Objects in the hierarchy hang off. For example if you have an Order with Order Lines and a Supplier, the &lt;code&gt;OrderRepository&lt;/code&gt; will return an Order with all &lt;code&gt;OrderLines&lt;/code&gt; and &lt;code&gt;OrderSupplier&lt;/code&gt; populated. If would not be possible to fetch an &lt;code&gt;OrderLine&lt;/code&gt; separately, nor a &lt;code&gt;OrderSupplier&lt;/code&gt;. If needed though you would provide methods on your &lt;code&gt;OrderRepository&lt;/code&gt; to fetch an order by Order Line Id or by Supplier Reference for example.&lt;/p&gt;
&lt;h4&gt;Points to keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Technical difficulties implementing an aggregate (like transaction issues persisting it) are usually indicative of a poorly chosen model. Put more effort refining the model rather than trying to fix a modelling problem with a technical implementation.&lt;/li&gt;
&lt;li&gt;Access to objects from outside the aggregate must occur through the Aggregate Root.&lt;/li&gt;
&lt;li&gt;Aggregates are always constructed in a consistent state.&lt;/li&gt;
&lt;li&gt;The logic is usually within the aggregate to disallow consistent state or at least check its consistency.&lt;/li&gt;
&lt;li&gt;It is better to encapsulate changes to state through method calls rather than directly mutating properties. This shows intent as well as adds an extra layer of indirection allowing implemntation changes without changing the API.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Factories&lt;/h3&gt;
&lt;p&gt;Since an aggregate should always be in a consistent state it is important that they are constructed in a consistent state to the user. Factories provide a way to &lt;strong&gt;ensure that new instances of an aggregate always start in a consistent state&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Repositories&lt;/h3&gt;
&lt;p&gt;Repositories protect us from taking a data-centric view of our code. They allow us to &lt;strong&gt;persist and retrieve aggregates&lt;/strong&gt; without dealing directly with the underlying persistence. It is however important for developers to at least be aware of the underlying implementations so as not to abuse the repository from a performance or scoping way.&lt;/p&gt;
&lt;p&gt;The abstraction of the repository is contained within the domain. This abstraction knows about the domain models within that context. More specifically it knows about the aggregate that it is returning. A repository returns an Entity (or collection of Entities) and the aggregate for wich that Entity is the Aggregate Root.&lt;/p&gt;
&lt;p&gt;The implementation of the repository abstraction does not reside in the domain. It is a Infrastructural concern and can change. What is important though is that the repository handles mapping however the data is persisted into a fully hydrated and consistent aggregate.&lt;/p&gt;
&lt;p&gt;The developer is free to add multiple query methods to the repository but the return results are always in terms of the Aggregate Root.&lt;/p&gt;
&lt;h4&gt;Points to keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The repository abstraction is part of the domain&lt;/li&gt;
&lt;li&gt;The repository implementation is NOT part of the domain&lt;/li&gt;
&lt;li&gt;The repository exposes data in terms of that repository&apos;s Aggregate Root&lt;/li&gt;
&lt;li&gt;Query methods should use the domain language&lt;/li&gt;
&lt;li&gt;If complex queries look to encapsulate in query objects using the &lt;a href=&quot;https://www.martinfowler.com/apsupp/spec.pdf&quot;&gt;Specification&lt;/a&gt; pattern&lt;/li&gt;
&lt;li&gt;Transaction should be controlled by the client code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Domain Service&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes, it just isn&apos;t a thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When modeling sometimes an operation or workflow doesn&apos;t fit into the current model. Usually this just means you are not accurately capturing the model you need to represent the business problem but every now and again it is valid to place this operation in a domain service. If placing a workflow comflates your model objects maybe a service is the way to go. Services are represented by verbs rather than nouns and speak to what the DO. An important distinction from model objects is that they are completely stateless. A service will take various other domain objects and execute some action, possibly returning some result.&lt;/p&gt;
&lt;h4&gt;Points to keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Don&apos;t give up too quickly trying to fit an operation into the model (concider a new concept that encapsulates entities and values objects... maybe this is actual aggregate root?)&lt;/li&gt;
&lt;li&gt;The Service is named after an activity (verb not noun)&lt;/li&gt;
&lt;li&gt;Services are stateless&lt;/li&gt;
&lt;li&gt;Services still use the Ubiquitous Language&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Application Service&lt;/h3&gt;
&lt;p&gt;The application service is what presents an input for a use-case. It calls off to the domain for execution, calls any other services (like notifications) and returns. This could be something like a WebApi controller in .NET or you could choose to explicitly create an an application service.&lt;/p&gt;
&lt;h4&gt;Points to keep in mind&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A thin layer that receives a request and passes it to the domain to processes&lt;/li&gt;
&lt;li&gt;Think use-case&lt;/li&gt;
&lt;li&gt;A good place to handle transactions&lt;/li&gt;
&lt;li&gt;Can call out to Infrastructure Services&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Infrastructure Service&lt;/h3&gt;
&lt;p&gt;This is a technical implementation for something that performs some task such as notifications (IM, email, etc.), put messages on a bus, or retrieve some data from another system.&lt;/p&gt;
&lt;h3&gt;Anti-corruption layer (ACL)&lt;/h3&gt;
&lt;p&gt;An ACL is at the very least a thin translation layer between two bounded contexts. Even if both bounded contexts are well defined, and share similar models. The models in one context should not influence the models in another and without a layer in between to translate between the two corruption will creep in. If the external system a bounded context is talking to is a legacy system with a very poor model it is even more likely it will corrupt unless the ACL acts as a strong buffer.&lt;/p&gt;
&lt;h3&gt;Modules&lt;/h3&gt;
&lt;p&gt;Modules are simply packages or assemblies. Whatever your technology&apos;s means is of bundling built code is.&lt;/p&gt;
&lt;h3&gt;Shared Kernel&lt;/h3&gt;
&lt;p&gt;Sometimes a model needs to be shared across multiple Bounded Contexts. If so a Shared Kernel can be created but in a lot of cases the coupling created between the contexts and the teams is not worth it.&lt;/p&gt;
&lt;h3&gt;Clients&lt;/h3&gt;
&lt;p&gt;This is not really a term from the &lt;em&gt;Blue Book&lt;/em&gt; (that I remember) but I find it useful when talking about DDD and Clean Architecture. Clients are the callers of the application layer. These could be another application automated service or an application been driven by a user. Regardless the clients execute the use-cases defined in the application layer.&lt;/p&gt;
&lt;h3&gt;Further reading&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://lostechies.com/jimmybogard/2010/02/04/strengthening-your-domain-a-primer/&quot;&gt;Strengthening your domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://martinfowler.com/tags/domain%20driven%20design.html&quot;&gt;Domain-Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gorodinski.com/blog/2012/04/14/services-in-domain-driven-design-ddd/&quot;&gt;Services in Domain-Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=as_sl_pc_tf_mfw?&amp;amp;linkCode=wey&amp;amp;tag=wwwnervstucoz-20&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577/ref=pd_bxgy_14_img_2?_encoding=UTF8&amp;amp;pd_rd_i=0321834577&amp;amp;pd_rd_r=P6PNCC27GC5B7Q513JJ4&amp;amp;pd_rd_w=6neVY&amp;amp;pd_rd_wg=Rn8gy&amp;amp;psc=1&amp;amp;refRID=P6PNCC27GC5B7Q513JJ4&quot;&gt;Implementing Domain-Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202/ref=as_sl_pc_tf_mfw?&amp;amp;linkCode=wey&amp;amp;tag=wwwnervstucoz-20&quot;&gt;Applying Domain-Driven Design Patterns Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/vscode-tasks/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/vscode-tasks/"/>
    <title>Visual Studio Code Tasks</title>
    <updated>2017-02-11T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/vscode-tasks/</uri>
    </author>
    <summary type="html">&lt;p&gt;I tend to try use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; for tasks and languages I don&apos;t currently use on a day to day basis. Over the last few weeks that has included Java and Delphi. Then today I was trying to launch my blog from VS Code and ran into an issue because Pretzel listens for a console key. The only fix I could find for this was to launch a new Powershell window. I thought this as good a time as any to post a few of these tasks.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Tasks&lt;/h1&gt;
&lt;p&gt;Tasks in VS Code allow you to run commands that execute and usually feedback some status. Tasks are configured in the file &lt;em&gt;/.vscode/tasks.json&lt;/em&gt; from the workspace root. Hit &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and type &lt;strong&gt;Tasks:C&lt;/strong&gt; and hit enter or click &apos;Tasks: Configure Task Runner&apos;. If the file does not exist it will be created.&lt;/p&gt;
&lt;h2&gt;Compiling a Java application&lt;/h2&gt;
&lt;p&gt;This command uses &lt;code&gt;javac&lt;/code&gt; to compile the Java application and will report on compile errors. Note that this uses a single task (others in the post have multiple tasks in the file). It assumes &lt;code&gt;javac&lt;/code&gt; is on your PATH. I also have the &lt;strong&gt;Language Support for Java&lt;/strong&gt; extension from Red Hat installed in VS Code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;javac&amp;quot;,
    &amp;quot;showOutput&amp;quot;: &amp;quot;silent&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    &amp;quot;args&amp;quot;: [&amp;quot;-d&amp;quot;,&amp;quot;${workspaceRoot}\\bin&amp;quot;,&amp;quot;${workspaceRoot}\\src\\*.java&amp;quot;],
    &amp;quot;problemMatcher&amp;quot;: {
        &amp;quot;owner&amp;quot;: &amp;quot;external&amp;quot;,
        &amp;quot;fileLocation&amp;quot;: [&amp;quot;absolute&amp;quot;],
        &amp;quot;pattern&amp;quot;: [
        {
            &amp;quot;regexp&amp;quot;: &amp;quot;^(.+\\.java):(\\d):(?:\\s+(error)):(?:\\s+(.*))$&amp;quot;,
            &amp;quot;file&amp;quot;: 1,
            &amp;quot;location&amp;quot;: 2,
            &amp;quot;severity&amp;quot;: 3,
            &amp;quot;message&amp;quot;: 4
        }]
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Control Maven for a Java project&lt;/h2&gt;
&lt;p&gt;These control different Maven phases. Note that on the &lt;code&gt;exec&lt;/code&gt; task you need to change the &lt;code&gt;me.devonburriss.App&lt;/code&gt; to the entrypoint of your application. It assumes &lt;code&gt;mvn&lt;/code&gt; is on your PATH. Not needed for this but note that I have the &lt;strong&gt;Language Support for Java&lt;/strong&gt; extension from Red Hat installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;mvn&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
    &amp;quot;suppressTaskName&amp;quot;: true,
    &amp;quot;echoCommand&amp;quot;: true,
    &amp;quot;tasks&amp;quot;: [
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;verify&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;-B&amp;quot;, &amp;quot;verify&amp;quot;],
            &amp;quot;isBuildCommand&amp;quot;: true
        },
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;test&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;-B&amp;quot;, &amp;quot;test&amp;quot;],
            &amp;quot;isTestCommand&amp;quot;: true
        },
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;clean install&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;clean install -U&amp;quot;]
        },
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;exec&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;-B&amp;quot;, &amp;quot;exec:java&amp;quot;, &amp;quot;-D&amp;quot;, &amp;quot;exec.mainClass=\&amp;quot;me.devonburriss.App\&amp;quot;&amp;quot;]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Delphi (Free Pascal) Build&lt;/h2&gt;
&lt;p&gt;This is using the Free Pascal compiler to compile Delphi code. It assumes that &lt;code&gt;fpc&lt;/code&gt; is on your PATH. You can get it &lt;a href=&quot;http://www.freepascal.org/download.var&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
This only compiles a single unit, not a complete project. Not needed for this to work but for syntax highlighting I have the OmniPascal extension installed.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;fpc&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
    &amp;quot;suppressTaskName&amp;quot;: true,
    &amp;quot;echoCommand&amp;quot;: true,
    &amp;quot;tasks&amp;quot;: [
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;Compile Unit&amp;quot;,
            &amp;quot;args&amp;quot;: [&amp;quot;-Sd&amp;quot;, &amp;quot;${file}&amp;quot;],
            &amp;quot;isBuildCommand&amp;quot;: true
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Powershell, Cake, Pretzel blog Build&lt;/h2&gt;
&lt;p&gt;This is one I use to call PS, which executes my Cake build and and run this blog locally. The targets for that are Bake and Taste (from Pretzel). See &lt;a href=&quot;http://devonburriss.me/pretezel-blog-appveyor-deployment/&quot;&gt;this post&lt;/a&gt; for details on that.&lt;/p&gt;
&lt;p&gt;I use a &lt;em&gt;run.ps1&lt;/em&gt; file because I needed to launch a new Powershell window so Pretzel can wait and watch for changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;tasks&amp;quot;: [
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;Build&amp;quot;,
            &amp;quot;command&amp;quot;: &amp;quot;powershell&amp;quot;,
            &amp;quot;isShellCommand&amp;quot;: true,
            &amp;quot;args&amp;quot;: [&amp;quot;.\\pretzel.ps1&amp;quot;],
            &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
            &amp;quot;isBuildCommand&amp;quot;: true
        },
        {
            &amp;quot;taskName&amp;quot;: &amp;quot;Run&amp;quot;,
            &amp;quot;command&amp;quot;: &amp;quot;powershell&amp;quot;,
            &amp;quot;isShellCommand&amp;quot;: false,
            &amp;quot;args&amp;quot;: [&amp;quot;.\\run.ps1&amp;quot;],
            &amp;quot;showOutput&amp;quot;: &amp;quot;always&amp;quot;,
            &amp;quot;isTestCommand&amp;quot;: true
        }
    ]    
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just a note that I have the Powershell extension from Microsoft for VS Code installed. Not needed for the task to run but it gives nice support for ps1 files.&lt;/p&gt;
&lt;h2&gt;Extra: F5 Launch of Pretzel Blog&lt;/h2&gt;
&lt;p&gt;If you want to use &lt;strong&gt;F5&lt;/strong&gt; to run the blog you can press &lt;strong&gt;Ctrl+Shift+P&lt;/strong&gt; and type &lt;strong&gt;launch&lt;/strong&gt;. If it doesn&apos;t exist a &lt;em&gt;launch.json&lt;/em&gt; file will be created.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
        {
            &amp;quot;type&amp;quot;: &amp;quot;PowerShell&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;name&amp;quot;: &amp;quot;PowerShell Launch (Script)&amp;quot;,
            &amp;quot;script&amp;quot;: &amp;quot;${workspaceRoot}/run.ps1&amp;quot;,
            &amp;quot;args&amp;quot;: [],
            &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceRoot}&amp;quot;        
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where my &lt;em&gt;run.ps1&lt;/em&gt; looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;Start-Process powershell &amp;quot;.\pretzel.ps1 -target Taste -Wait&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Visual Studio Code is a great editor and has plenty of extension points. If you have any great tips I would love to hear about them in the comments.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/pretezel-blog-appveyor-deployment/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/pretezel-blog-appveyor-deployment/"/>
    <title>Deploying a Pretzel generated static site to Github Pages using Appveyor</title>
    <updated>2017-01-31T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/pretezel-blog-appveyor-deployment/</uri>
    </author>
    <summary type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;I was using &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; and &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to build and host this blog up until a few days ago.
Getting Jekyll running on Windows (more specifically Ruby) is a gamble and running it in a Docker container just led me down Ruby gem issues with my theme.&lt;br /&gt;
Finally I decided to stick with the statically generated site but move away from Jekyll. Enter Pretzel...&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;Github Pages allows you to host static websites and comes in 2 flavours. It natively supports building Jekyll source into a static site and deploying it.&lt;/p&gt;
&lt;h3&gt;Organisation/User site&lt;/h3&gt;
&lt;p&gt;This one runs off a separate repository with the special convention based name of &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; and hosts any static content (or Jekyll) that is committed to &lt;strong&gt;master&lt;/strong&gt; branch.&lt;/p&gt;
&lt;h3&gt;Repository site&lt;/h3&gt;
&lt;p&gt;These allow a website to be hosted per repository. Think documentation and marketing site for the product being built in that repository. These are built from a special orphaned branch named &lt;strong&gt;gh-pages&lt;/strong&gt; usually but can be set to &lt;strong&gt;master&lt;/strong&gt; or a &lt;code&gt;/docs&lt;/code&gt; folder.&lt;/p&gt;
&lt;h2&gt;Pretzel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Code52/pretzel&quot;&gt;Pretzel&lt;/a&gt; is a .NET based tool for generating a static, blog aware site. If you have used Jekyll, it is that without all the gem hell.&lt;br /&gt;
Installing it locally is as easy as: &lt;code&gt;choco install pretzel&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that I used a plugin called &lt;a href=&quot;https://github.com/k94ll13nn3/Pretzel.Categories&quot;&gt;Pretzel.Categories&lt;/a&gt; to provide tag and category pages. You may need to explicitly add the dll to your repository as your global .gitignore may specify *.dll.  &apos;git add ._plugins\Pretzel.Categories.dll -f&apos;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Approach&lt;/h1&gt;
&lt;p&gt;Since I am no longer using Jekyll, Github pages can no longer build my site so I need to do that outside. I wanted to keep the same workflow of just being able to commit my changes and the content on the site is updated.&lt;/p&gt;
&lt;p&gt;The solution needed to satisfy the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;develop locally and view my changes before pushing the commit&lt;/li&gt;
&lt;li&gt;only 1 repository that represented my blog&lt;/li&gt;
&lt;li&gt;a commit should trigger a build and deployment of the updated content&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Solution&lt;/h1&gt;
&lt;p&gt;Let&apos;s tackle each of these requirements one at a time. First off create a branch &lt;strong&gt;source&lt;/strong&gt;. &lt;strong&gt;master&lt;/strong&gt; will be reserved for our auto-generated content (we will get to this at the end of the post).&lt;br /&gt;
&lt;code&gt;git checkout --orphan source&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Local development&lt;/h2&gt;
&lt;p&gt;For local development I have a task setup in a &lt;a href=&quot;http://cakebuild.net/&quot;&gt;Cake build&lt;/a&gt; for building and running the Pretzel tool. This wouldn&apos;t give too much benefit over just command lining the 2 commands needed.
Which commands? Well Pretzel gives us a few. The 2 important ones for us though are:
&lt;code&gt;pretzel.exe bake&lt;/code&gt; - this will build our static website and since we provided no output folder it puts it in a folder &lt;em&gt;_sites/&lt;/em&gt;. This is important to remember later&lt;br /&gt;
&lt;code&gt;pretzel.exe taste --port 5001&lt;/code&gt; - this will serve up the site and launch the site in the browser so you can admire your work&lt;/p&gt;
&lt;p&gt;Why do I put these 2 simple commands in a build script? Well I have a transformation against the &lt;em&gt;_config.yml&lt;/em&gt; that will swap out my domain name and &lt;em&gt;localhost:5001&lt;/em&gt; depending on whether I am building for Debug or Release. It always use localhost when I am tasting since I don&apos;t use pretzel to serve the files.&lt;/p&gt;
&lt;p&gt;If you are following along converting your own blog then and have not used Cake don&apos;t worry, it is super simple.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the Powershell build script: &lt;code&gt;Invoke-WebRequest http://cakebuild.net/download/bootstrapper/windows -OutFile pretzel.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This Powershell creates a ps1 fiel for &lt;em&gt;build.ps1&lt;/em&gt; usually but we specified &lt;em&gt;pretzel.ps1&lt;/em&gt; so on line 43 change &lt;em&gt;build.cake&lt;/em&gt; to &lt;em&gt;pretzel.cake&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Create a file called &lt;em&gt;pretzel.cake&lt;/em&gt; that looks like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Updated: 2017-03-19 with new &lt;em&gt;Pretzel.exe&lt;/em&gt; install path&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/c7871549c2788c0dca507a2d24c683ed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;With this setup we can build using &lt;code&gt;.\pretzel.ps1&lt;/code&gt; and preview locally with &lt;code&gt;.\pretzel.ps1 -target Taste&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to check-in what you have so far delete the &lt;em&gt;_sites/&lt;/em&gt; folder before adding the file to source control on the branch &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Single repository&lt;/h2&gt;
&lt;p&gt;This one was a bit of a head-scratcher for me but then I remembered Github submodules. These allow you to map a folder in your repository to another repository. What I thought I would try was create an orphaned branch in my blog repository that contains the pretzel source and link the &lt;em&gt;_sites/&lt;/em&gt; folder to the &lt;strong&gt;master&lt;/strong&gt; branch which is where Github pages expects the static contents if you are not using Jekyll.&lt;/p&gt;
&lt;h3&gt;Some quick housekeeping&lt;/h3&gt;
&lt;p&gt;If you have run the Pretzel build but have not added anything to the Github repository (even locally) then just delete the &lt;em&gt;_sites/&lt;/em&gt; folder before continuing.&lt;br /&gt;
If you have checked in the &lt;em&gt;_sites/&lt;/em&gt; folder run the following git command to remove it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rm -r _sites&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git commit -m &amp;quot;Remove _sites (preparing for submodule)&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you might need to remove from the index as well with &lt;code&gt;git rm -r --cached _sites&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Creating the submodule&lt;/h3&gt;
&lt;p&gt;Next we are going to create the submodule that links back to the &lt;strong&gt;master&lt;/strong&gt; branch where the static content is expected.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the following command uses https and not git protocol. This is important and you will get an error later in the CD process if you use git protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;git submodule add -b master https://github.com/dburriss/dburriss.github.io.git _site&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;git commit -m &amp;quot;_sites submodule&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Continuous Delivery&lt;/h2&gt;
&lt;p&gt;I use AppVeyor to pickup changes to the &lt;strong&gt;source&lt;/strong&gt; branch. It uses Choclatey to install Pretzel. It then uses Pretzel to generate the static site into &lt;em&gt;_sites/&lt;/em&gt; folder.&lt;br /&gt;
The &lt;em&gt;_sites/&lt;/em&gt; folder you will remember is actually a submodule linked back to the &lt;strong&gt;master&lt;/strong&gt; branch of the same repository. We will push the generated changes to &lt;strong&gt;master&lt;/strong&gt;, thus updating the blog with the latest content.&lt;/p&gt;
&lt;p&gt;Place the following &lt;em&gt;appveyor.yml&lt;/em&gt; file in the root of your &lt;strong&gt;source&lt;/strong&gt; branch.&lt;br /&gt;
The only thing you will need to change in the &lt;em&gt;appveyor.yml&lt;/em&gt; is the url for your repository and the access token.&lt;/p&gt;
&lt;p&gt;You can get an access token in Github by:&lt;/p&gt;
&lt;h3&gt;Github token&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Profile pic dropdown top right&lt;/li&gt;
&lt;li&gt;Settings&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Personal access tokens&lt;/em&gt; at the bottom of the left menu&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;See &lt;a href=&quot;https://help.github.com/articles/creating-an-access-token-for-command-line-use/&quot;&gt;here&lt;/a&gt; for detailed instructions.&lt;/p&gt;
&lt;h3&gt;Encrypt the token&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Next in AppVeyor click on the dropdown on your username on the top right&lt;/li&gt;
&lt;li&gt;Click Encrypt data&lt;/li&gt;
&lt;li&gt;Paste the Github token in and press Encrypt&lt;/li&gt;
&lt;li&gt;Copy the result into the &lt;em&gt;appveyor.yml&lt;/em&gt; on line 7&lt;/li&gt;
&lt;/ol&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/66b4809c5e534481bdc4426c1d430765.js&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;And there we have it! We can commit to &lt;strong&gt;source&lt;/strong&gt; and the generated changes are committed to &lt;strong&gt;master&lt;/strong&gt;.&lt;br /&gt;
Feel free to copy my blog at https://github.com/dburriss/dburriss.github.io&lt;/p&gt;
&lt;p&gt;Please leave a comment if you found this useful or have any improvements.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/asp-net-5-tips-urlhelper/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/asp-net-5-tips-urlhelper/"/>
    <title>ASP.NET 5 Tips: UrlHelper</title>
    <updated>2016-01-18T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/asp-net-5-tips-urlhelper/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Note that this is specific to the upcoming RC 2 using the dotnet CLI. Currently in RC 1 this is not an issue.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So I was messing around with &lt;a href=&quot;https://github.com/davidfowl/dotnetcli-aspnet5&quot;&gt;David Fowl&apos;s repository&lt;/a&gt; that makes use of the new RC 2 bits that run on the new &lt;a href=&quot;https://github.com/dotnet/cli&quot;&gt;dotnet CLI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Everything was fine until I tried to create a TagHelper that makes use of &lt;em&gt;IUrlHelper&lt;/em&gt;.
In RC 1  &lt;em&gt;IUrlHelper&lt;/em&gt; is registered automatically with the DI system but apparently not in RC 2. After much searching I found the following &lt;a href=&quot;https://github.com/aspnet/Mvc/commit/9fc3a800562c866850d7c795cf24db7fa0354af6&quot;&gt;commit&lt;/a&gt; which explained the change.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;So what follows is how I got an &lt;em&gt;IUrlHelper&lt;/em&gt; into my TagHelper.&lt;/p&gt;
&lt;p&gt;It seems we should instead make use of &lt;em&gt;IUrlHelperFactory&lt;/em&gt; to get an instance of &lt;em&gt;IUrlHelper&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Startup.cs&lt;/strong&gt; service configuration I register &lt;em&gt;IActionContextAccessor&lt;/em&gt; and &lt;em&gt;IUrlHelperFactory&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public void ConfigureServices(IServiceCollection services)
{
  services.AddSingleton&lt;IActionContextAccessor, ActionContextAccessor&gt;();
  services.AddSingleton&lt;IUrlHelperFactory, UrlHelperFactory&gt;();
  services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I inject &lt;em&gt;IUrlHelperFactory&lt;/em&gt; into the TagHelper constructor and use the factory to create a new instance of a &lt;em&gt;IUrlHelper&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class EmailTagHelper : TagHelper
{
  private readonly IUrlHelper _urlHelper;

  public EmailTagHelper(IUrlHelperFactory urlHelperFactory, IActionContextAccessor actionContextAccessor)
  {
  	_urlHelper = urlHelperFactory.GetUrlHelper(actionContextAccessor.ActionContext);
  }
  
  //process override here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I am guessing that this article will only be useful next month when RC 2 hits but it was great to see what is coming. I am quite liking the new CLI and with a bit of digging I have managed to get most things working, so the team seems to be making great progress toward RC 2.
Please let me know below if you found this useful... or if things change :)&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/asp-net-5-tips-tempdata/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/asp-net-5-tips-tempdata/"/>
    <title>ASP.NET 5 Tips: TempData</title>
    <updated>2016-01-17T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/asp-net-5-tips-tempdata/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;NOTE: Handling TempData and Session is made easy with extension methods in the &lt;a href=&quot;https://www.nuget.org/packages/BetterSession.AspNet.Mvc/&quot;&gt;BetterSession&lt;/a&gt; Nuget package.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ASPNET 5 is designed to be configurable. It starts out with almost nothing and you choose what you need. In previous versions of MVC we got TempData out the box. Not so with the new iteration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2016/footprint-resized.jpg&quot; alt=&quot;bridge cables&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;So to enable TempData for MVC you need sessions.
In &lt;strong&gt;project.json&lt;/strong&gt; add the following lines to &lt;em&gt;dependencies&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
&quot;Microsoft.AspNet.Session&quot;: &quot;1.0.0-*&quot;,
&quot;Microsoft.Extensions.Caching.Memory&quot;: &quot;1.0.0-*&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;strong&gt;Startup.cs&lt;/strong&gt; the configuration of your services will need the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public void ConfigureServices(IServiceCollection services)
{
  services.AddCaching();
  //this is the NB line for this post
  services.AddSession(o =&gt;
  {
  	o.IdleTimeout = TimeSpan.FromSeconds(3600);
  });
  services.AddMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the app builder configuration will be something like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
{
  loggerFactory.AddConsole(Configuration.GetSection(&quot;Logging&quot;));
  loggerFactory.AddDebug();
  //this is the NB line for this post
  app.UseSession();
  app.UseIISPlatformHandler();
  app.UseStaticFiles();
  app.UseMvc();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then accessing TempData is done through the dependency injection/service locator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class TempController : Controller
{
  private const string key = &quot;name&quot;;
  private readonly ITempDataDictionary _tempData;

  public TempController(ITempDataDictionary tempData)
  {
  	this._tempData = tempData;
  }

  public IActionResult Index()
  {
    _tempData[key] = &quot;Devon&quot;;
    return RedirectToAction(&quot;Carry&quot;);
  }

  public IActionResult Carry()
  {
  	return View(&quot;Index&quot;, _tempData[key]);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OR&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
var tempData = HttpContext.RequestServices.GetRequiredService&lt;ITempDataDictionary&gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE 1: When using ITempDataDictionary in a custom &lt;strong&gt;ActionResult&lt;/strong&gt; I needed to mark the class with &lt;strong&gt;IKeepTempDataResult&lt;/strong&gt; for it to work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE 2: I am not sure if this is going to change but currently the implementation for ITempDataDictionary only accepts primitive values (and string). I got around this by serializing to and from json. If you want to do this, you might find these extension methods useful.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public static void SetAsJson&lt;T&gt;(this ITempDataDictionary tempData, string key, T data)
{
  var sData = JsonConvert.SerializeObject(data);
  tempData[key] = sData;
}

public static T GetFromJson&lt;T&gt;(this ITempDataDictionary tempData, string key)
{
  if(tempData.ContainsKey(key))
  {
  	var v = tempData[key];

    if(v is T)
    {
    	return (T)v;
    }

    if(v is string &amp;&amp; typeof(T) != typeof(string))
    {
      var obj = JsonConvert.DeserializeObject&lt;T&gt;((string)v);
      return obj;
    }
  }
  return default(T);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So hope you and future me finds this post useful. I am going to try blog little things like this as I work more with ASP.NET 5. Please let me know in the comments below if you did find it useful or if I missed anything. Also let me know if there are other topics you want me to cover.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/aspnet-vsonline-ci/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/aspnet-vsonline-ci/"/>
    <title>ASP.NET 5 CI from Git to Azure without Visual Studio</title>
    <updated>2015-09-10T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/aspnet-vsonline-ci/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Using Visual Studio Online Build Services for a MSBuild/xproj free deployment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So my laptop was in for repairs so I decided to dust off my old Macbook Pro. I upgraded to Yosemite, downloaded &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt; and ran through the the &lt;a href=&quot;http://docs.asp.net/en/latest/getting-started/installing-on-mac.html&quot;&gt;setup for DNX&lt;/a&gt; on Mac. Very quickly I started to wonder about deploying to &lt;a href=&quot;http://azure.microsoft.com/en-us/get-started/&quot;&gt;Azure&lt;/a&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;I had previously used the steps described &lt;a href=&quot;https://msdn.microsoft.com/Library/vs/alm/Build/azure/deploy-aspnet5&quot;&gt;here&lt;/a&gt; to deploy a Visual Studio 2015 ASP.NET 5 project from Git but that relied on an xproj file for publishing.&lt;/p&gt;
&lt;p&gt;The other option is publishing to Azure via source control as described &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wanted something similar to the 1st option but for a solution created in VSCode and the aspnet &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; &lt;a href=&quot;https://www.npmjs.com/package/generator-aspnet&quot;&gt;generator&lt;/a&gt; though so what follows is what I have come up with so far.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE: The project structure could use some work but the scripts work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/guy-on-mac_800.jpg&quot; alt=&quot;guy on mac&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Step 1: Project Setup&lt;/h3&gt;
&lt;p&gt;The publish script uses the &lt;code&gt;global.json&lt;/code&gt; file to determine the version and runtime. In the root is also &lt;code&gt;Publish.ps1&lt;/code&gt; and &lt;code&gt;Upload.ps1&lt;/code&gt; powershell scripts.
&lt;a href=&quot;https://github.com/dburriss/vsfree-azure-deploy/tree/master/example&quot;&gt;Example&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Global&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/155c693de8f534bd1536.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Setup the &lt;code&gt;global.json&lt;/code&gt; file with properties needed for the publish.&lt;/p&gt;
&lt;h4&gt;Publish script&lt;/h4&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/ea01dad652e00b480a7a.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;This script does a couple things along the way to publishing a folder for deployment.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bootstraps DNVM into the Powershell session&lt;/li&gt;
&lt;li&gt;Installs DNX on the build host&lt;/li&gt;
&lt;li&gt;Restores the packages for the project using &lt;code&gt;dnu restore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Packages the project using &lt;code&gt;dnu package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Copies the runtime foler into the package (I think dnu restore is supposed to do this but at time of writing it was not)&lt;/li&gt;
&lt;li&gt;Sets the &lt;strong&gt;web.config&lt;/strong&gt; DNX version and runtime&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Upload Script&lt;/h4&gt;
&lt;p&gt;This is a script found here &lt;a href=&quot;https://gist.github.com/davideicardi/a8247230515177901e57&quot;&gt;davideicardi/kuduSiteUpload.ps1 &lt;/a&gt; which worked like a charm.
&lt;strong&gt;UPDATE:&lt;/strong&gt; &lt;em&gt;I changed this script to stop the website before upload and start it again after as deployment was failing regularly with a 500 server error. My guess is locked files.&lt;/em&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/dburriss/af2e1593543b36b1ee23.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt;VSOnline Build Setup&lt;/h4&gt;
&lt;h5&gt;Step 1: Publish&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/Build1.png&quot; alt=&quot;Build step 1 - Publish&quot; /&gt;
Firstly we add a PowerShell script and point the script at our publish script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Script fielname: site/Publish.ps1&lt;/li&gt;
&lt;li&gt;Arguments: -sourceDir $(Build.SourcesDirectory)\pub&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Step 2: Upload&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/Build2.png&quot; alt=&quot;Build step 1 - Upload&quot; /&gt;
Next we setup the upload script by creating an &lt;strong&gt;Azure PowerShell&lt;/strong&gt; script:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure Subscription: If you do not have one setup click Manage to do so&lt;/li&gt;
&lt;li&gt;Script Path: site/Upload.ps1&lt;/li&gt;
&lt;li&gt;Arguments: -websiteName &lt;em&gt;MyWebSite&lt;/em&gt; -sourceDir $(Build.SourcesDirectory)\pub -destinationPath /site&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where &lt;em&gt;MyWebSite&lt;/em&gt; is the name of the website in Azure.&lt;/p&gt;
&lt;p&gt;Hit &lt;strong&gt;Save&lt;/strong&gt; to save the build configuration.&lt;/p&gt;
&lt;h4&gt;Step 3: Setup CI (optional)&lt;/h4&gt;
&lt;p&gt;If you want CI you can go to the &lt;strong&gt;Triggers&lt;/strong&gt; tab and set a build to trigger on commit to a branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select &lt;strong&gt;CI&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Batch changes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;I filtered on &lt;strong&gt;master&lt;/strong&gt; branch. Choose whatever is applicable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hit the &lt;strong&gt;Save&lt;/strong&gt; button.&lt;/p&gt;
&lt;h4&gt;Step 4: Test your Build&lt;/h4&gt;
&lt;p&gt;Now you can either hit &lt;strong&gt;Queue build...&lt;/strong&gt; or if you setup CI do a push to the trigger enabled branch. Note that the triggered build can sometimes take a few minutes to be queued and takes almost 5 minutes to build and deploy even for a small test site.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Thats it for deploying to Azure with a solution developed on OSX (or Linux). Just 2 scripts really.
I hope this helps someone and please leave a comment below if you have any questions or suggestions. Or just want to say it helped :)&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/installing-docker-on-hyper-v/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/installing-docker-on-hyper-v/"/>
    <title>Installing Docker on Hyper-V</title>
    <updated>2015-03-07T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/installing-docker-on-hyper-v/</uri>
    </author>
    <summary type="html">&lt;p&gt;To be clear, currently Docker containers do not run on Windows. Microsoft is working with Docker to release something with feature parity but we will be lucky if we see that in 2015 (&lt;a href=&quot;http://weblogs.asp.net/scottgu/docker-and-microsoft-integrating-docker-with-windows-server-and-microsoft-azure&quot;&gt;Blogged by Scott Gu&lt;/a&gt;). So although there is a client for Windows for managing Docker containers, we will need an Ubuntu install. &lt;a href=&quot;http://devonburriss.me/installing-ubuntu-on-hyper-v/&quot;&gt;Installing Ubuntu on Hyper-V&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/large_h.png&quot; alt=&quot;Docker logo&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h1&gt;Installing Docker&lt;/h1&gt;
&lt;p&gt;Most of this is straight from the &lt;a href=&quot;https://docs.docker.com/installation/ubuntulinux/&quot;&gt;Docker documentation&lt;/a&gt; but I ran into a few problems that I think may be due to this running on Hyper-V. Also I wanted a quick reference in the future.&lt;/p&gt;
&lt;p&gt;First lets update our package repositories:
&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Currently the Docker docs mention pulling from their private repos to get the latest version but that was for Ubuntu 14.04. I noticed Ubuntu 14.10 repos contain Docker 1.2 which is at time of writing good enough for me.&lt;/p&gt;
&lt;p&gt;So lets install Docker:
&lt;code&gt;sudo apt-get install docker.io&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then so we get bash completion we can type:
&lt;code&gt;source /etc/bash_completion.d/docker.io&lt;/code&gt;
No &lt;strong&gt;sudo&lt;/strong&gt; needed. Alternatively just reboot with:
&lt;code&gt;sudo reboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lets test our Docker install:
&lt;code&gt;sudo docker version&lt;/code&gt;
&lt;code&gt;sudo docker info&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This displays version number of the components and some basic info on the install respectively.&lt;/p&gt;
&lt;p&gt;The info will contain a line &lt;strong&gt;WARNING: No swap limit support&lt;/strong&gt; so lets fix that.
&lt;code&gt;sudo nano /etc/default/grub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Find the line &lt;strong&gt;GRUB___CMDLINE___LINUX&lt;/strong&gt; and edit it:
&lt;code&gt;GRUB_CMDLINE_LINUX=&amp;quot;cgroup_enable=memory swapaccount=1&amp;quot;&lt;/code&gt; then save and exit nano.&lt;/p&gt;
&lt;p&gt;We need to update Grub and reboot.
&lt;code&gt;sudo update-grub&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo reboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now running &lt;code&gt;sudo docker info&lt;/code&gt; you will see the warning is gone.&lt;/p&gt;
&lt;p&gt;If we try download and run a docker image we are still not there yet but lets try:
&lt;code&gt;sudo docker run -i -t ubuntu /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Troubleshooting&lt;/h3&gt;
&lt;h4&gt;Unexpected EOF&lt;/h4&gt;
&lt;p&gt;This actually happens every now and again with Docker (I think if latency is bad) so just try run the command again and it will likely work.&lt;/p&gt;
&lt;h4&gt;dial tcp: lookup registery-1.docker.io: no such host&lt;/h4&gt;
&lt;p&gt;The documentation explains how to add a dns to the docker options in &lt;strong&gt;/etc/default/docker&lt;/strong&gt; but this actually didn&apos;t work for me on the Hyper-V. I had to edit &lt;strong&gt;/etc/resolv.conf&lt;/strong&gt; and add the google nameserver there (doesn&apos;t have to be google).
&lt;code&gt;sudo nano /etc/resolv.conf&lt;/code&gt;
Then add &lt;strong&gt;nameserver 8.8.8.8&lt;/strong&gt; on a new line. Save and exit.
You might need to &lt;code&gt;sudo reboot&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Finally lets run something&lt;/h3&gt;
&lt;p&gt;So now we should be ready to go. Run
&lt;code&gt;sudo docker run -i -t ubuntu /bin/bash&lt;/code&gt; again.
This should now pull down the ubuntu image and start up a container running ubuntu (yes we are running Ubuntu in a kernal process on another Ubuntu - inception right?).
The &lt;code&gt;-t&lt;/code&gt; is to assign a terminal and &lt;code&gt;-i&lt;/code&gt; is so the connection is interactive.
Once it is running a terminal prompt will be available. Type &lt;code&gt;echo &apos;Hi&apos;&lt;/code&gt;. The Ubuntu container willl say hi back :)&lt;/p&gt;
&lt;p&gt;So thats it. You have Docker running on a Hyper-V guest.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/installing-ubuntu-on-hyper-v/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/installing-ubuntu-on-hyper-v/"/>
    <title>Installing Ubuntu on Hyper-V</title>
    <updated>2015-03-06T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/installing-ubuntu-on-hyper-v/</uri>
    </author>
    <summary type="html">&lt;p&gt;The reason for this post is just to remind me of a few little things you need to do if you want to create a Generation 2 Ubuntu Virtual Machine on Hyper-V. When setting up the virtual machine in Hyper-V and you select Generation 2.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Create a Virtual Switch 1st&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/Switch1.png&quot; alt=&quot;Navigating to Virtual Switch Manager&quot; /&gt;
I have had good mileage with creating an &amp;quot;External Network&amp;quot; and settiong it to use my Wireless adapter.
&lt;img src=&quot;/images/posts/2015/Switch2-1.png&quot; alt=&quot;Virtual Switches&quot; /&gt;
For one wireless network at a coffee shop it didn&apos;t work and I had to switch to a private one which is a bit more work to create. This blog post describes that setup. One caveat was I had to disable my LAN adapter to get the private setup described to work but your mileage might vary.
See: &lt;a href=&quot;http://www.hurryupandwait.io/blog/running-an-ubuntu-guest-on-hyper-v-assigned-an-ip-via-dhcp-over-a-wifi-connection&quot;&gt;http://www.hurryupandwait.io/blog/running-an-ubuntu-guest-on-hyper-v-assigned-an-ip-via-dhcp-over-a-wifi-connection&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Create the Virtual Machine&lt;/h2&gt;
&lt;p&gt;Go ahead now and click &lt;strong&gt;New &amp;gt; Virtual Machine&lt;/strong&gt; and follow the wizard. Remeber to pick &lt;strong&gt;Generation 2&lt;/strong&gt;. Choose the virtual switch you setup previously. In &lt;strong&gt;Installation Options&lt;/strong&gt; choose the Ubuntu image you downloaded from their website. Remember that for a generation 2 it must be the 64-bit version.
&lt;img src=&quot;/img/posts/2015/Generation2.png&quot; alt=&quot;Pick Generation 2&quot; /&gt;
Here is a full walkthrough of the process if you need it: &lt;a href=&quot;http://www.servethehome.com/run-ubuntu-windows-8-hyper-v-quickly/&quot;&gt;Step by step install of Ubuntu on Hyper-V&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##Before starting it up
The final thing to remember to do before starting up the newly created virtual machine is go into its settings.
&lt;img src=&quot;/img/posts/2015/Settings1.png&quot; alt=&quot;Navigating to settings&quot; /&gt;
Make sure you uncheck Safe Boot
&lt;img src=&quot;/img/posts/2015/Settings2.png&quot; alt=&quot;Uncheck Secure Boot&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Thats it&lt;/h2&gt;
&lt;p&gt;You can now bootup you new virtual machine and Ubuntu will take you through the setup process. Hope this helped you and I am sure it will help future me when I bump up against some of these issues next time I create a new Linux Hyper-V.&lt;/p&gt;
&lt;h3&gt;Setting the resolution&lt;/h3&gt;
&lt;p&gt;One thing you may want to do is change the resolution that Ubuntu runs at. If you go into display settings you will find that you cannot change the resolution there.
It is fairly straight forward but does require some editing of config files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open up Terminal&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;sudo nano /etc/default/grub&lt;/code&gt; and enter (or you can use vi if you prefer)&lt;/li&gt;
&lt;li&gt;Find the setting &lt;strong&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/strong&gt; and add to it so it includes the resolution you want.
&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash video=hyperv_fb:1280x720&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Save and exit nano&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;sudo update-grub&lt;/code&gt; and enter (I ran into a problem here)&lt;/li&gt;
&lt;li&gt;Restart the VM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I believe that 1920 x 1080 is the max that Hyper-V supports.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;sudo update-grub&lt;/strong&gt; was frezzing/hanging whenever I tried to run it. I suspect that this was because I had an external drive in when I created the VM and grub was searching for it.
I managed to get past this by adding the following line at the bottom of /etc/default/grub
&lt;code&gt;GRUB_DISABLE_OS_PROBER=true&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Setup:&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;This setup is valid as of Windows 8.1 running Hyper-V and installing Ubuntu 14.10 as the guest OS.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/testing-the-untestable/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/testing-the-untestable/"/>
    <title>Testing the Untestable</title>
    <updated>2015-01-27T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/testing-the-untestable/</uri>
    </author>
    <summary type="html">&lt;p&gt;If you have ever tried written unit tests for existing code you know it can be quite challenging. Not only is finding what to test difficult, the code usually just wont be testable. If it is code that you have written and you are at liberty to make some sweeping changes, then you can refactor toward testability. If not I still go through a technique at the end of this article for providing testable classes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2015/bridge-cables-resize.jpg&quot; alt=&quot;bridge cables&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Let&apos;s first try refactor toward testablility.
Our checklist is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create integration tests&lt;/li&gt;
&lt;li&gt;Apply &lt;a href=&quot;http://devonburriss.me/single-respon/&quot;&gt;Single Responsibility Principle&lt;/a&gt; (SRP)&lt;/li&gt;
&lt;li&gt;Apply &lt;a href=&quot;http://martinfowler.com/bliki/RoleInterface.html&quot;&gt;Role Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Apply Inversion of Control&lt;/li&gt;
&lt;li&gt;Last stand - &lt;a href=&quot;http://amzn.to/1EN0Ymg&quot;&gt;Extract and override&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: In the rest of this article I talk about abstractions and usually use interface as an example. A base class is often just as valid as an interface (unless it has multiple roles since the languages I use only allow one inheritence parent). The NB part is that the rest of your application is coded against the abstraction and knows nothing about the implementation class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Safety net&lt;/h2&gt;
&lt;p&gt;Your first step should be to create some high level integration tests. This will at least give you some indication that you have broken something when you do.&lt;/p&gt;
&lt;h2&gt;What is in a name?&lt;/h2&gt;
&lt;p&gt;A good measure of whether a class adheres to the SRP principle is the name. If the name doesn&apos;t exactly describe what it does, or if it contains words like &apos;manager&apos;, &apos;provider&apos;, &apos;logic&apos;, &apos;handler&apos;, it probably does more than one thing. A name should tell you exactly what a class does, and a class can only have one name...
See the SRP link for an example of splitting a class into it&apos;s various responsibilities.&lt;/p&gt;
&lt;h2&gt;Role abstraction&lt;/h2&gt;
&lt;p&gt;A good practice that can be used in conjuction with SRP is adding role interfaces to a class. Hopefully you can refactor to these roles until a class only contains the members in the abstraction but they are a start. Don&apos;t be afraid of having classes with a minimal amount of properties and/or methods on it. It means it has a very well defined role.
Even if you do not break a class into multiple classes immediately, if you can refer to them by the role interface you will have far fewer breaks in your code later when you do split it.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class CustomerManager
{
	public IEnumerable&lt;Customer&gt; GetAll()
	{
		...
	}

	public string GetOrderEmailTemplate()
	{
		...
	}

	public void SendEmail(string template, Customer customer, Order order)
	{
		...
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on what you prefer you could split this into 2 or 3 interfaces. Definitely a store for retrieving customers and one for email. Better yet would be a 3rd for testability so you can seperate out retrieving email from sending it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public interface CustomerRepository
{
	IEnumerable&lt;Customer&gt; GetAll();
}

public interface EmailStore
{
	string GetOrderEmailTemplate();
}

public interface EmailService
{
	void SendEmail(string template, Customer customer, Order order);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: This is just an example. I would usually try refactor this so that sending the email is completely unaware of the domain model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Really if you have managed to refactor this far you need just split the classes by abstraction and apply Dependency Injection to invert the dependencies and by then you likely have some easily testable classes.&lt;/p&gt;
&lt;h2&gt;Untestable I tell you!&lt;/h2&gt;
&lt;p&gt;Ok so you have looked at the above but to no avail. You have some dependencies in your class that cannot be injected. A very common reason for this is your class has a dependency on a static class that just cannot be refactored right now to an instance. Another reason is that you just cannot make changes to the public API of the class you are testing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WARNING: Think long and hard before using static classes. The ease of use  they offer upfront comes at the dear dear price of testability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the trick to testing a class that seems untestable is &lt;a href=&quot;http://amzn.to/1EN0Ymg&quot;&gt;Extract and Override&lt;/a&gt;. The technique is as follows for the untestable Monster class:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a class &lt;strong&gt;TestableMonster&lt;/strong&gt; that inherits from &lt;strong&gt;Monster&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Now move the class within &lt;strong&gt;Monster&lt;/strong&gt; into protected virtual methods.&lt;/li&gt;
&lt;li&gt;Now you can override any par of &lt;strong&gt;Monster&lt;/strong&gt; you need to to test it.&lt;/li&gt;
&lt;li&gt;In your unit test you will test against &lt;strong&gt;TestableMonster&lt;/strong&gt; but you will call the base class for the bits you want to test on it and provide faked procedures for the parts you need to test &lt;strong&gt;Moster&lt;/strong&gt; in isolation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok so we have gone over the technique in theory, lets take a look at an example.&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Here is the untestable Monster class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class Monster
{
	public void ScareAllTheChildren()
	{
		var now = DateTime.UtcNow;
		IEnumerable&lt;Child&gt; children= DataRepository.GetAllChildrenFrom(now);

		foreach (var child in children)
		{
			ScareService.Scare(child);
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the actual example code is unlikely, the structure is tragically common. In less than 10 lines of code we have 3 static references. We will come back to the testable class, lets start extracting out the parts that make this class hard to test.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class Monster
{
	public void ScareAllTheChildren()
	{
		DateTime now = GetCurrentUtcDateTime();
		IEnumerable&lt;Child&gt; children = GetChildrenWithBedtimeAfter(now);

		foreach (var child in children)
		{
			ScareChild(child);
		}
	}

	protected virtual void ScareChild(Child child)
	{
		ScareService.Scare(child);
	}

	protected virtual IEnumerable&lt;Child&gt; GetChildrenWithBedtimeAfter(DateTime now)
	{
		return DataRepository.GetAllChildrenFrom(now);
	}

	protected virtual DateTime GetCurrentUtcDateTime()
	{
		return DateTime.UtcNow;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see we have made no changes to the external API of the class. The internal changes were done by wrapping the statics in a method call. Not too much there that is likely to break our production code.
So how would we use this?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class TestableMonster : Monster
{
	public DateTime TestDateTime { get; set; }
    public List&lt;Child&gt; ScaredChildren  { get; set; }
    
	protected override DateTime GetCurrentUtcDateTime()
	{
		return TestDateTime;
	}
    
    protected override void ScareChild(Child child)
	{
		ScaredChildren.Add(child);
		base.ScareChild(child);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example just shows a way to have a date that is settable in your test. You could of course override the other method to return a known list of children.
The following test is more an integration test than a unit test, as the data is not faked (unless you sent back a fake db from the method) but it demonstrates the usage.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
[TestMethod]
public void Scare_With2OutOf3ChildrenAsleep_ScareCalledOn2Children()
{
	//Arrange
	var db = InitializeNewDatabase();
	db.Children.Add(new Child { Name = &quot;Sam&quot;, LastWentToSleep = DateTime.Parse(&quot;2014-01-31 20:00&quot;) });
	db.Children.Add(new Child { Name = &quot;Sam&quot;, LastWentToSleep = DateTime.Parse(&quot;2014-01-31 20:30&quot;) });
	db.Children.Add(new Child { Name = &quot;Sam&quot;, LastWentToSleep = DateTime.Parse(&quot;2014-01-31 21:30&quot;) });
    
	var sut = new TestableMonster();
	sut.TestDateTime = DateTime.Parse(&quot;2014-01-31 20:45&quot;);
    
	//Act
	sut.ScareAllTheChildren();

	//Assert
	Assert.AreEqual(2, sut.ScaredChildren.Count);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;So we went through some steps you could take to make your classes more testable. If you find you are testing a lot of static code you might want to look at the paid for version of &lt;a href=&quot;http://www.telerik.com/products/mocking.aspx&quot;&gt;JustMock&lt;/a&gt; or &lt;a href=&quot;http://typemock.com/&quot;&gt;TypeMock&lt;/a&gt; which are the only to frameworks I know of that allow mocking of statics.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: A quick note on DateTime. It is a very sneaky static that leaks into code often. Try make it team policy to not use DateTime and instead use something like this suggested by &lt;a href=&quot;http://ayende.com/blog/3408/dealing-with-time-in-tests&quot;&gt;Ayenda Rahien&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/developer-quest-variables/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/developer-quest-variables/"/>
    <title>Developer Quest II - Variables</title>
    <updated>2014-10-12T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/developer-quest-variables/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Hold this for me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;The story so far&lt;/h2&gt;
&lt;p&gt;Lets go over what we have so far from &lt;a href=&quot;http://devonburriss.me/developer-quest-getting-started/&quot;&gt;Part 1&lt;/a&gt; and touch on some terminology. We have a &lt;strong&gt;namespace&lt;/strong&gt; called DeveloperQuest1. Namespaces are a way of grouping an application or parts of it. Specifically its used in the grouping of the Types that make up an application.
Then we have a &lt;strong&gt;class&lt;/strong&gt; called &lt;strong&gt;Program&lt;/strong&gt;. &lt;strong&gt;class&lt;/strong&gt; is the keyword used to define a Reference Type in C#. We will explore it in more detail later in this tutorial. Then we have the first &lt;em&gt;member&lt;/em&gt; of Program. &lt;em&gt;Main&lt;/em&gt; is the &lt;strong&gt;method&lt;/strong&gt; that is run when a console application starts. Methods are ways of grouping behaviour in a program that can be executed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/gfs_36744_2_2.jpg&quot; alt=&quot;hero enters town&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;Writing things to the screen is great but to make programming useful we need to be able to take input from somewhere, store it, manipulate it and possible then show it or save it.
You can think of variables as the buckets that we store values in while we are using them in the program.
We get 2 main categories of variables. &lt;strong&gt;Value Types&lt;/strong&gt; and &lt;strong&gt;Reference Types&lt;/strong&gt;. So every variable has a unique &lt;strong&gt;Type&lt;/strong&gt; that falls into one of these 2 categories but is always a &lt;strong&gt;Type&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Value Types&lt;/h3&gt;
&lt;p&gt;Value types fall into 2 main sub-categories :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;struct&lt;/li&gt;
&lt;li&gt;enumeration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Structs in turn fall into further categories of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numeric&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;user-defined&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I just mention this so you are aware of it when we go through examples. If it doesn&apos;t make much sense right now, don&apos;t worry about it.
So let&apos;s see an example of using a numeric value type&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
int myNumber = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This assigns the number &lt;em&gt;1&lt;/em&gt; to the &apos;bucket&apos; named &lt;em&gt;myNumber&lt;/em&gt;. The default for an &lt;em&gt;int&lt;/em&gt; is zero.
There are numerous types of numeric value types that vary in terms of the size of the number they can hold as well as the precision.
Next are boolean values. The valid options here are either true or false. The default being &lt;em&gt;false&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
bool isHero = true;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the full list see here: http://msdn.microsoft.com/en-us/library/bfft1t3c.aspx&lt;/p&gt;
&lt;p&gt;Finally a &lt;strong&gt;struct&lt;/strong&gt;. Structs are complex values. These can be used to store groups of values together logically. You will see that these seem a lot like reference types but differ in how they are handled in the program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the Solution Explorer &lt;strong&gt;Right-click&lt;/strong&gt; on the C# Console Project DeveloperQuest1&lt;/li&gt;
&lt;li&gt;Expand &lt;strong&gt;Add&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Class...&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Name the class &lt;strong&gt;Hero&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Ok&lt;/strong&gt;
&lt;img src=&quot;/images/posts/2014/code-change2.jpg&quot; alt=&quot;new class image&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will create a new &lt;strong&gt;class&lt;/strong&gt; (will discuss later).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the &lt;strong&gt;class&lt;/strong&gt; keyword to a &lt;strong&gt;struct&lt;/strong&gt; and add the folowing 2 &lt;em&gt;fields&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Save the changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should look like this now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public struct Hero
{
    public int Health;
    public string Name;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt; is used to store text. It is a reference type but is handled in a special way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/so-far-1.jpg&quot; alt=&quot;structure of application&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You will see shortly when we explore reference types how similar they look to a &lt;strong&gt;struct&lt;/strong&gt;.
The key characteristic to understand about value types is that they always point to their own &apos;bucket&apos;.
This can be demonstrated with the following example.
Change your Main &lt;em&gt;method&lt;/em&gt; to match the code below.
Notice the &lt;strong&gt;using&lt;/strong&gt; statement at the top now. This is the &lt;em&gt;System&lt;/em&gt; namespace and allows us to remove &lt;em&gt;System&lt;/em&gt; from in front of &lt;strong&gt;Console&lt;/strong&gt;. This is because &lt;strong&gt;Console&lt;/strong&gt; is a &lt;strong&gt;class&lt;/strong&gt; in the &lt;em&gt;System&lt;/em&gt; namepspace. This makes your code simpler to work with.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
using System;
namespace DeveloperQuest1
{
    class Program
    {
        static void Main(string[] args)
        {
            System.Console.WriteLine(&quot;So you want to be a C# developer?&quot;);

            Hero hero1 = new Hero(){
                Health = 10,
                Name = &quot;Bob&quot;
            };

            Hero hero2 = hero1;
            hero2.Name = &quot;Ted&quot;;
			Type heroType = hero1.GetType();

            Console.WriteLine(&quot;Hero 1 is &quot; + hero1.Name);
            Console.WriteLine(&quot;Hero 2 is &quot; + hero2.Name);
            Console.WriteLine(&quot;Type is &quot; + heroType.Name);
            Console.WriteLine(&quot;Is value type: &quot; + heroType.IsValueType);

            Console.ReadKey();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the application by hitting &lt;strong&gt;F5&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Output should be:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;		Hero 1 is Bob
		Hero 2 is Ted
		Type is Hero
		Is value type: True
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;em&gt;hero1&lt;/em&gt; and &lt;em&gt;hero2&lt;/em&gt; represent 2 unique values. Changing one does not effect the other.&lt;/p&gt;
&lt;h3&gt;Reference Types&lt;/h3&gt;
&lt;p&gt;Reference types, as the name alludes to, can reference the same &apos;bucket&apos;.
Rather than the &lt;em&gt;struct&lt;/em&gt; keyword, a reference Type uses &lt;em&gt;class&lt;/em&gt;. Usually you will create a &lt;strong&gt;class&lt;/strong&gt; and the &lt;em&gt;members&lt;/em&gt; of the &lt;strong&gt;class&lt;/strong&gt; are comprised of value and reference types. &lt;strong&gt;Members&lt;/strong&gt; can be &lt;em&gt;fields&lt;/em&gt;, &lt;em&gt;properties&lt;/em&gt;, or &lt;em&gt;methods&lt;/em&gt; on a Type. &lt;em&gt;Name&lt;/em&gt; and &lt;em&gt;Health&lt;/em&gt; on &lt;strong&gt;Hero&lt;/strong&gt; above are examples of &lt;em&gt;fields&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&apos;s change the Hero Type from a &lt;em&gt;value&lt;/em&gt; type to a &lt;em&gt;reference&lt;/em&gt; type.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open the &lt;em&gt;Hero.cs&lt;/em&gt; by double-clicking it in the Solution Explorer, or click on the tab if it is still open from when you created it.&lt;/li&gt;
&lt;li&gt;Change &lt;strong&gt;struct&lt;/strong&gt; back to &lt;strong&gt;class&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Save&lt;/li&gt;
&lt;li&gt;Hit &lt;strong&gt;F5&lt;/strong&gt; to run the application&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Output should be:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;		Hero 1 is Ted
		Hero 2 is Ted
		Type is Hero
		Is value type: False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So &lt;em&gt;hero1&lt;/em&gt; and &lt;em&gt;hero2&lt;/em&gt; both point to the same &apos;bucket&apos; now. Changing one will change the other. Because &lt;em&gt;hero2&lt;/em&gt; points at &lt;em&gt;hero1&lt;/em&gt;, when we changed 2, 1 was also changed because they are the same thing actually. This is the essential difference between a reference type and a value type. Hopefully the names make sense now?&lt;/p&gt;
&lt;h3&gt;Using our new found knowledge&lt;/h3&gt;
&lt;p&gt;We have a reference type that represents our hero. Let&apos;s add functionality to the program so we can give our hero a name.
Change the program to match the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
using System;
namespace DeveloperQuest1
{
    class Program
    {
        static void Main(string[] args)
        {
            Hero hero = new Hero();
            hero.Health = 10;
            Console.WriteLine(&quot;So you want to be a C# developer?&quot;);
            Console.WriteLine(&quot;What is your hero&apos;s name?&quot;);
            hero.Name = Console.ReadLine();

            Console.WriteLine(&quot;Your adventure begins &quot; + hero.Name);
			//to pause program
            Console.ReadKey();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So on line 1 we have the &lt;em&gt;using&lt;/em&gt; statement that imports the &lt;em&gt;System&lt;/em&gt; namespace to we can use it throughout our code without explicitly referencing it all the time.
Our program is in the &lt;em&gt;DeveloperQuest1&lt;/em&gt; namespace.
It contains a &lt;strong&gt;Type&lt;/strong&gt; called &lt;strong&gt;Program&lt;/strong&gt; (which uses the &lt;strong&gt;class&lt;/strong&gt; keyword and is such a reference type).
It contains a &lt;em&gt;method&lt;/em&gt; called &lt;strong&gt;Main&lt;/strong&gt; which is run by default by a console application. We will explore the arguments passed in as &lt;strong&gt;args&lt;/strong&gt; in a later tutorial.
The 1st statement in the Main method declares a new &lt;strong&gt;Hero&lt;/strong&gt; using the &lt;strong&gt;new&lt;/strong&gt; keyword.
We then assign a value of 10 to the hero&apos;s &lt;strong&gt;Health&lt;/strong&gt; &lt;em&gt;field&lt;/em&gt;.
We then write to the Console asking for the hero&apos;s name and read it into the &lt;strong&gt;Name&lt;/strong&gt; &lt;em&gt;field&lt;/em&gt; on the hero. This is done using a &lt;em&gt;method&lt;/em&gt; on &lt;strong&gt;Console&lt;/strong&gt; called &lt;em&gt;ReadLine&lt;/em&gt; which reads everything you type in until you hit &lt;em&gt;Enter&lt;/em&gt;.
We then write out to the console the name we stored on the hero.
Lastly we still have the &lt;em&gt;ReadKey&lt;/em&gt; call which pauses the application. Above it I show the use of comments. These are ignored by the program but can be used by you to leave instructional text. Use only when something is unclear.
Hit &lt;strong&gt;F5&lt;/strong&gt; to run it.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this tutorial we explored the Type categories you get in C# and how to create and use them. In the following tutorial we will dive into &lt;em&gt;classes&lt;/em&gt; and the various &lt;em&gt;members&lt;/em&gt; you can have on them.&lt;/p&gt;
&lt;h3&gt;Further Reading and References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;http://msdn.microsoft.com/en-us/library/s1ax56ch.aspx&lt;/li&gt;
&lt;li&gt;http://www.albahari.com/valuevsreftypes.aspx&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/developer-quest-getting-started/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/developer-quest-getting-started/"/>
    <title>Developer Quest I - Getting started with C#</title>
    <updated>2014-10-09T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/developer-quest-getting-started/</uri>
    </author>
    <summary type="html">&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The first thing you are going to need as a developer is an Integrated Development Environment (IDE). Technically this is not necessary, you could use a text editor and the compiler in command line but trust me, you don&apos;t want to go that route.
Head over to http://www.visualstudio.com/downloads/download-visual-studio-vs and download Microsoft Visual Studio Express for Windows Desktop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/quest-for-glory-i-so-you-want-to-be-a-hero-dos-title-73699.jpg&quot; alt=&quot;hero running from monster&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update: &lt;a href=&quot;https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx&quot;&gt;Visual Studio Community 2015&lt;/a&gt; is now available which is still free but much fuller featured.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;Your first application&lt;/h2&gt;
&lt;p&gt;We are going to be building a Console Application initially, since this is probably the easiest to get up and running with.
A console application project is what is used to create .exe programs that you may have seen or used.
Once you have Visual Studio installed, launch it and follow these steps to create the Console Application.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click &lt;strong&gt;File &amp;gt; New Project...&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the left-hand tree structure menu pick Visual C# and select &lt;strong&gt;Console Application&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the name field enter &lt;strong&gt;DeveloperQuest1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/new-project.jpg&quot; alt=&quot;VS New Project Window&quot; /&gt;
Visual Studio will now create a solution for you. A solution can hold many projects. A project can be a console app, a Windows Store app, a desktop application, website, etc. The solution file groups all these together for you in a way that lets you easily create references to related projects. Don&apos;t worry about it too much at the moment. We will come back to it in another tutorial.
You should now have a screen that looks similar to this (may differ slightly based on your setup and theme).
&lt;img src=&quot;/img/posts/2014/ide.jpg&quot; alt=&quot;new console application&quot; /&gt;
The IDE shows 3 main windows above.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Document Editor&lt;/strong&gt; - this is where you edit your program files. Currently it shows the Program.cs source file, which is the starting point for the console application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solution Explorer&lt;/strong&gt; - allows you to browse the contents of your solution, open files and view properties of items in the solution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output Window&lt;/strong&gt; - shows messages of what Visula Studio is doing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you hit the &lt;strong&gt;F5&lt;/strong&gt; key Visual Studio will build and run the application. Building basically means it takes your &lt;strong&gt;.cs&lt;/strong&gt; files in the solution and turns them in instructions that a computer can understand.
So lets make a change to the program and run it. Add the folowing lines within the {} in the &lt;strong&gt;Main&lt;/strong&gt; method of &lt;strong&gt;Program&lt;/strong&gt; so it looks like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
System.Console.WriteLine(&quot;So you want to be a C# developer?&quot;);
System.Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also remove all the &lt;em&gt;using&lt;/em&gt; statements at the top from line 1 - 5.
&lt;img src=&quot;/img/posts/2014/code-change1.jpg&quot; alt=&quot;added console writeline charp code&quot; /&gt;
Now hit &lt;strong&gt;F5&lt;/strong&gt; again to build and run the application. The console application should ask you if this is the path for you. If it is, look out for the following tutorial in this series.&lt;/p&gt;
&lt;h2&gt;Whats Next?&lt;/h2&gt;
&lt;p&gt;Next we will be looking at how you can capture input from the console application so you can interact with it.
If you have any questions or suggestions, please don&apos;t hesitate to leave a comment below. Happy coding!
&lt;a href=&quot;http://devonburriss.me/developer-quest-variables/&quot;&gt;The adventure continues here.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/software-development-is-like-a-piece-of-string/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/software-development-is-like-a-piece-of-string/"/>
    <title>Software development is like a piece of string</title>
    <updated>2014-10-03T00:00:00+00:00</updated>
    <author>
      <name></name>
      <uri>http://devonburriss.me/software-development-is-like-a-piece-of-string/</uri>
    </author>
    <summary type="html">&lt;p&gt;Software like many things in life, is one of those things that the further down a path you go, the harder it is to back out. When I think of a software project I think of a piece of string. The longer the project, the longer the string.
The string is the perfect length to reach the end. Each and every time we make a poor design decision or a bad implementation we effectively add a knot in the string. One or two of these and we might still be able to stretch it to reach the end but most likely if we want to reach the end, we are going to need to unravel the knot we created.
I see it over and over again in projects, both my own knots and the knots of colleagues. We make these knots knowingly, thinking we can come back later, or thinking they can slip by but they always hold things up somewhere.
If they don&apos;t force you to come back and undo them later, they slow the velocity of the project, negating any time you may have saved in implementation time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/yarn-800.jpg&quot; alt=&quot;library&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Bottom line. Don&apos;t take shortcuts. I am not saying it has to always be the very best implementation but it should always be something elegant. Dirty hacks always fester eventually.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/testing-your-data-repositories/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/testing-your-data-repositories/"/>
    <title>Testing your data repositories</title>
    <updated>2014-09-07T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/testing-your-data-repositories/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Avoiding dependency on a data layer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My solution was to use an in-memory H2 database (http://www.h2database.com/html/main.html) which can be created and dropped on a per test basis. To do this I used the Command Pattern (http://en.wikipedia.org/wiki/Command_pattern) to create and then drop the table for each test. In case you are not familiar with the command pattern:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/books-800-medium.jpg&quot; alt=&quot;library&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Command Pattern&lt;/h2&gt;
&lt;p&gt;The command pattern is pretty simple. You define an interface with the method that will be called to execute some functionality.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public interface Command {
	void execute() throws Exception;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;So this is what the end result looks like. How you execute you commands is up to you but in case you are looking for the details I have included them further down in the article.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class CommitteeTableCommandTest {         
	private String connectionString = &quot;jdbc:h2:~/test&quot;;     
	
	@Test    
	public void create_NewCommitteeRecord_PersistsToDb() throws Exception {                 
		try(Database database = new H2DatabaseImpl(connectionString, &quot;&quot;, &quot;&quot;)){
				Command cc = new CreateCommitteeTableCommand(database);          
				cc.execute();                         
				CommitteeEntity entity = new CommitteeEntity();            
				entity.setName(&quot;Test&quot;);    
				entity.setMandate(&quot;Blah Blah&quot;);
                
				CommitteeRepository sut = new CommitteeRepositoryImpl(database);
				sut.create(entity);
				Assert.assertNotNull(sut.getByName(&quot;Test&quot;).get(0));
				Command cd = new DropCommitteeTableCommand(database);
				cd.execute();
		}         
	
		Assert.assertTrue(true);    	
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The Details&lt;/h3&gt;
&lt;p&gt;For the creation and dropping of the table I created a generic abstract base class for each. I am using OrmLite (http://ormlite.com/) (the Java library, not C# one – which is unrelated) for my Object Relational Mapper. This gives me a database agnostic way for handling the mundane database tasks without mixing my Java and SQL. You could quite easily write SQL for this, as long as you take any differences in database providers into consideration. On to the solution…&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Base create command&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public abstract class BaseCreateTableCommand&lt;T&gt; implements Command { 
	
	private Database database;    
	private Class&lt;T&gt; typeOfT;
	
	@SuppressWarnings(&quot;unchecked&quot;)    
	public BaseCreateTableCommand(Database database){        
		this.database = database;
		ParameterizedType genericSuperclass = (ParameterizedType) getClass().getGenericSuperclass();
	    Type type = genericSuperclass.getActualTypeArguments()[0];
	    if (type instanceof Class) {
	      this.typeOfT = (Class&lt;T&gt;) type;
	    } else if (type instanceof ParameterizedType) {
	      this.typeOfT = (Class&lt;T&gt;) ((ParameterizedType)type).getRawType();
	    }
	}

	protected void createTableIfNotExists() throws Exception {        
		ConnectionSource connectionSource = new JdbcConnectionSource(database.getConnectionUri(), database.getUsername(), database.getPassword());  
		TableUtils.createTableIfNotExists(connectionSource, typeOfT);        
		connectionSource.close();    
	}  

	public void execute() throws Exception {                 
		this.createTableIfNotExists();    
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Base drop command&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public abstract class BaseDropTableCommand&lt;T&gt; implements Command {     
	private Database database;    
	private Class&lt;T&gt; typeOfT;         
	
	@SuppressWarnings(&quot;unchecked&quot;)    
	public BaseDropTableCommand(Database database){        
		this.database = database;        
		this.typeOfT = (Class&lt;T&gt;)((ParameterizedType)getClass().getGenericSuperclass()).getActualTypeArguments()[0];
	}

	protected void dropTable(Boolean ignoreErrors) throws Exception {

		ConnectionSource connectionSource = new JdbcConnectionSource(database.getConnectionUri(), database.getUsername(), database.getPassword()); 
		TableUtils.dropTable(connectionSource, typeOfT, ignoreErrors);
		connectionSource.close();
	}     
	
	@Override    
	public void execute() throws Exception {
		this.dropTable(true);    
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we inherit from these two classes to flesh out the create and drop commands.
&lt;em&gt;Create command implementation&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class CreateCommitteeTableCommand extends BaseCreateTableCommand&lt;CommitteeEntity&gt; {     
	public CreateCommitteeTableCommand(Database database) {
		super(database);    
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Drop command implementation&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class DropCommitteeTableCommand extends BaseDropTableCommand&lt;CommitteeEntity&gt; {     
	public DropCommitteeTableCommand(Database database){
		super(database);
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only other piece is the Database abstraction, which I have my doubts about so I would
not recommend copying :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Database abstraction&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public abstract class Database implements AutoCloseable {

	private static final int MAX_CONNECTIONS_PER_PARTITION = 2;

	private static final int MIN_CONNECTIONS_PER_PARTITION = 1;

	private static final int LOGIN_TIMEOUT = 10;

	protected final Logger logger = LoggerFactory.getLogger(getClass());
	
	protected String connectionUri;
	protected String username;
	protected String password;
	
	protected BoneCP connectionPool = null;

	public Database() {
		super();
	}

	public Connection getConnection() throws SQLException {
		logger.trace(&quot;getConnection called.&quot;);
		return getPooledConnection();
	}
	
	public String getConnectionUri(){
		return this.connectionUri;
	}
	
	public String getUsername(){
		return this.username;
	}
	
	public String getPassword(){
		return this.password;
	}

	public abstract String getDriver();

	
	public void close() throws Exception {
		logger.trace(&quot;close called (this is close() on the database...not a single connection).&quot;);
		if(this.connectionPool != null)
			this.connectionPool.shutdown();
		
		this.connectionPool = null;
	}

	protected void setup(String driver, String connectionUri, String username, String password) throws ClassNotFoundException, SQLException {
		logger.trace(&quot;setup called.&quot;);
		try {
			Class.forName(driver);

			this.connectionUri = connectionUri;
			this.username = username;
			this.password = password;
			DriverManager.setLoginTimeout(LOGIN_TIMEOUT);

		} catch (ClassNotFoundException e) {
			logger.error(e.getMessage(), e);
			throw e;
		}
	}

	private Connection getPooledConnection() throws SQLException {
		Connection conn;

		if(connectionPool == null)
			setupConnectionPool(connectionUri, username, password);
		
		conn = connectionPool.getConnection();
		return conn;
	}

	private void setupConnectionPool(String connectionUri, String username,	String password) throws SQLException {
		
		BoneCPConfig config = new BoneCPConfig();
		config.setJdbcUrl(connectionUri);
		config.setUsername(username); 
		config.setPassword(password);
		config.setMinConnectionsPerPartition(MIN_CONNECTIONS_PER_PARTITION);
		config.setMaxConnectionsPerPartition(MAX_CONNECTIONS_PER_PARTITION);
		config.setPartitionCount(1);
		config.setLazyInit(true);
		connectionPool = new BoneCP(config);
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;H2 implementation&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class H2DatabaseImpl extends Database {

	private final String driver = &quot;org.h2.Driver&quot;;
	
	public H2DatabaseImpl(String connectionUri, String username, String password) throws ClassNotFoundException, SQLException{
		super();
		this.setup(driver, connectionUri, username, password);
	}
	
	@Override
	public String getDriver() {
		return driver;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Just for kicks...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I created a command queue, which itself is a command to enumerate through and execute a list of commands. Here just because its useful, not for purposes of this example. You can chain your inserts and then your drops into two commands using this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;
public class CommandQueue implements Command {     
	private List&lt;Command&gt; commands;    
	private Boolean breakOnError = true;         
	
	public CommandQueue(List&lt;Command&gt; commands, Boolean breakOnError){        
		if(commands == null)            
			throw new IllegalArgumentException(&quot;commands&quot;);        
		
		this.commands = commands;                 
		
		if(breakOnError != null)            
			this.breakOnError = breakOnError;    
	}    
	
	@Override    
	public void execute() throws Exception {        
		int pos = 0;        
		try {            
			pos = executeImpl(pos);
		} catch (Exception e) {            
			if(this.breakOnError)                
				throw e;        
		}    
	}    
	
	private int executeImpl(int pos) throws Exception {        
		int size = this.commands.size();        
		
		for (int i = pos; i &lt; size; i++) {            
			try {                
				this.commands.get(pos).execute();                
				pos++;            
			} catch (Exception e) {                
				if(this.breakOnError)                    
					throw e;                
				executeImpl(++pos);            
			}        
		}        
		
		return pos;    
	} 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let me know if you found this useful, or if you have a better way for testing your data persistence...&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/single-respon/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/single-respon/"/>
    <title>Single Responsibility Principle</title>
    <updated>2014-09-05T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/single-respon/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;The &lt;strong&gt;S&lt;/strong&gt; in &lt;strong&gt;SOLID&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I had to pick one principle that had to be enforced strongly on a code base, this would be it. Most techniques for writing elegant code fall by the wayside if this principle is not followed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Layering your application.&lt;/strong&gt; Good luck!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Inversion of Control.&lt;/strong&gt; Constructor injection overload!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Polymorphism.&lt;/strong&gt; I am a concrete implementation of what exactly?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don’t repeat yourself.&lt;/strong&gt; Well this does something slightly different…&lt;/p&gt;
&lt;p&gt;It has been a long time but I do remember a time when I was averse to lots of files in a development project. When I had god classes that contained demi-god functions. I am not sure if it is related but it may have been a side effect of programming in a dynamic language but to blame it on a language would be naïve. Besides, I learned the basics of programming in C++ and Java. I also remember a time when every little change I made in my projects broke a chain of other parts, some expected, and way too many completely unexpected. And it was exactly those circumstances that made me question how I was doing things. Enter SRP.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Definition&lt;/h2&gt;
&lt;p&gt;Since it is a principle, rather than a rule; it doesn’t have one clear definition but as far as I can tell Robert C. Martin (http://www.objectmentor.com/omTeam/martin_r.html) coined the term and so his definition will be used:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;THERE SHOULD NEVER BE MORE THAN ONE REASON FOR A CLASS TO CHANGE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a very simple statement but one that is quite hard to get right in practice. It takes discipline to think carefully about where each piece of code is placed to make sure it belongs there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/train-track-800-slim.jpg&quot; alt=&quot;trainline into the distance&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Class Cohesion&lt;/h2&gt;
&lt;p&gt;A discussion of SRP would not be complete without mention of cohesion (http://en.wikipedia.org/wiki/Cohesion_(computer_science)). Cohesion is the measure of how well the members of a class group together. An easy tell to look for when looking for classes with low cohesion is to look for fields that are used in separate functions. If you find a field that is used in some functions, and another field that is used in others, it is likely that you need 2 classes rather than 1 for the behaviour. We will see an example of this later.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Ok. Enough talk (or writing rather…). Lets look at an example of a class that does not follow SRP and refactor it towards one that does.
The example I use is a service that processes a customer’s order.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class OrderServiceBefore : IDisposable
{
    private const string connection = @&quot;c:\Example.mdf&quot;;
    private readonly DataContext db;
    private SmtpClient emailClient;
    public OrderServiceBefore()
    {
        this.db = new DataContext(connection);
        this.emailClient = new SmtpClient();
    }

    public void Process(Order order)
    {

        //validate order            
        if (order == null)
            throw new ArgumentNullException(&quot;order&quot;);
        if (order.Customer == null)
            throw new ArgumentException(&quot;Customer cannot be null.&quot;);
        if (order.OrderLines.Count &lt; 1)
            throw new InvalidOperationException(&quot;Cannot process an order with no lineitems.&quot;);

        //save order
        db.GetTable&lt;Order&gt;().Attach(order);
        db.SubmitChanges();

        //email order form
        var email = string.Format(&quot;New order {0} place on {1} by {2}.&quot;);
        foreach (var item in order.OrderLines)
        {
            email = email + &quot;\n&quot;;
            email = email + item.Product + &quot; : &quot; + item.Quantity;
        }
        emailClient.Send(new MailMessage(&quot;me@me.com&quot;, &quot;sales@company.com&quot;));
    }

    public void Dispose()
    {
        if (this.db != null)
            this.db.Dispose();
        if (this.emailClient != null)
            this.emailClient.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the code you can see that the Process method does more than 1 thing. It checks the validity of the order, persists it to the database, and then emails sales with the order details.
Lets start refactoring this toward a cleaner implementation…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class OrderServiceIntermediate : IDisposable
    {
        private const string connection = @&quot;c:\Example.mdf&quot;;
        private readonly DataContext db;
        private SmtpClient emailClient;

        public OrderServiceIntermediate()
        {
            this.db = new DataContext(connection);
            this.emailClient = new SmtpClient();
        }

        public void Process(Order order)
        {
            OrderProcessGaurd(order);
            SaveOrder(order);
            EmailOrderToSales(order);
        }

        private void EmailOrderToSales(Order order)
        {
            var email = string.Format(&quot;New order {0} place on {1} by &quot;);
            foreach (var item in order.OrderLines)
            {
                email = email + &quot;\n&quot;;
                email = email + item.Product + &quot; : &quot; + item.Quantity;
            }

            emailClient.Send(new MailMessage(&quot;me@me.com&quot;, &quot;sales@comp&quot;));
        }

        private void SaveOrder(Order order)
        {
            db.GetTable&lt;Order&gt;().Attach(order); db.SubmitChanges();
        }
        private void OrderProcessGaurd(Order order)
        {
            if (order == null)
                throw new ArgumentNullException(&quot;order&quot;);
            if (order.Customer == null)
                throw new ArgumentException(&quot;Customer cannot be null.&quot;);
            if (order.OrderLines.Count &lt; 1)
                throw new InvalidOperationException(&quot;Cannot process an order with no lineitems.&quot;);
        }
        public void Dispose()
        {
            if (this.db != null)
                this.db.Dispose();

            if (this.emailClient != null)
                this.emailClient.Dispose();
        }

    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here all I did was extract the different activities being performed into methods. This does little else other than make the intent of the Process method clearer, which in turn highlights that this class contains implementation details outside of it’s responsibility.
So lets extract these methods into classes that are responsible for the needed functionality. We will interface each of these so we can inject the abstraction in rather than the concrete implementation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class OrderRepository : IOrderRepository
    {
        private const string connection = @&quot;c:\Northwnd.mdf&quot;;
        private readonly DataContext db;
        public OrderRepository()
        {
            this.db = new DataContext(connection);
        }
        public void SaveOrder(Order order)
        {
            db.GetTable&lt;Order&gt;().Attach(order);
            db.SubmitChanges();
        }
        public void Dispose()
        {
            if (this.db != null)
                this.db.Dispose();

        }
    }
    public interface IEmailService : IDisposable 
    { 
        void SendOrderToSales(Order order);    
    }

    public class EmailService : IEmailService { 

        private SmtpClient emailClient; 

        public EmailService() { 
            this.emailClient = new SmtpClient(); 
        } 
        public void SendOrderToSales(Order order)        
        {            
            var email = BuildEmailContent(order);                         
            emailClient.Send(new MailMessage(&quot;me@me.com&quot;, &quot;sales@company.com&quot;));        
        }          
        
        private string BuildEmailContent(Order order)        
        {            
            var email = string.Format(&quot;New order {0} place on {1} by {2}.&quot; );           
            foreach (var item in order.OrderLines)            
            {                
                email = email + &quot;\n&quot;;                
                email = email + item.Product + &quot; : &quot; + item.Quantity;            
            }            
            return email;        
        }          
        public void Dispose() 
        { 
            if (this.emailClient != null)                
                this.emailClient.Dispose(); 
        } 
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these new classes extracted we can now make use of them in our OrderService class.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-csharp&quot;&gt;
public class OrderServiceAfter : IDisposable
    {
        private readonly IOrderRepository orderRepository;
        private readonly IEmailService emailService;
        public OrderServiceAfter(IOrderRepository orderRepository, IEmailService emailService)
        {
            this.orderRepository = orderRepository;
            this.emailService = emailService;
        }
        public void Process(Order order)
        {
            OrderProcessGaurd(order);
            orderRepository.SaveOrder(order);
            emailService.SendOrderToSales(order);
        }
        private void OrderProcessGaurd(Order order)
        {
            if (order == null)
                throw new ArgumentNullException(&quot;order&quot;);
            if (order.Customer == null)
                throw new ArgumentException(&quot;Customer cannot be null.&quot;);
            if (order.OrderLines.Count &lt; 1)
                throw new InvalidOperationException(&quot;Cannot process an order with no lineitems.&quot;);
        }
        public void Dispose()
        {
            if (orderRepository != null)
                orderRepository.Dispose();
            if (emailService != null)
                emailService.Dispose();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;Lets take a quick look at what running code metrics on this in Visual Studio 2013 looks like (Analyze &amp;gt; Calculate Code Metrics for Selected Projects).
&lt;img src=&quot;/img/posts/2014/Code-Metrics-SRP.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maintainability Index&lt;/strong&gt; – Here we see a nice gain just separating out into functions, with a 1 point drop when separating out into classes. I guess Microsoft see it as less maintainable with the logic in different classes. Marginally. The gains on the other criteria more than make up for the 1 point drop though. See: &lt;a href=&quot;http://blogs.msdn.com/b/zainnab/archive/2011/05/26/code-metrics-maintainability-index.aspx&quot;&gt;http://blogs.msdn.com/b/zainnab/archive/2011/05/26/code-metrics-maintainability-index.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;&lt;strong&gt;Cyclomatic Complexity&lt;/strong&gt;&lt;/a&gt; – This basically highlights the paths through the code. It is a good measure of how complex the code is. This dropped so marginally. Typically we can see much better gains here when applying SRP on more complex problems. See: &lt;a href=&quot;http://blogs.msdn.com/b/zainnab/archive/2011/05/17/code-metrics-cyclomatic-complexity.aspx&quot;&gt;http://blogs.msdn.com/b/zainnab/archive/2011/05/17/code-metrics-cyclomatic-complexity.aspx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Depth of Inheritance&lt;/strong&gt; – We are not using inheritance to solve this problem so not going to touch on this. See: [http://blogs.msdn.com/b/zainnab/archive/2011/05/19/code-metrics-depth-of-inheritance-dit.aspx](http://blogs.msdn.com/b/zainnab/archive/2011/05/19/code- metrics-depth-of-inheritance-dit.aspx)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Coupling_(computer_programming)&quot;&gt;&lt;strong&gt;Class Coupling&lt;/strong&gt;&lt;/a&gt; – We dropped the coupling to other classes quite substantially. This is a very good thing. The less dependencies you class has, the less likely that it breaks due to a change elsewhere in the codebase. See: &lt;a href=&quot;http://blogs.msdn.com/b/zainnab/archive/2014/02/22/10168042.aspx&quot;&gt;http://blogs.msdn.com/b/zainnab/archive/2014/02/22/10168042.aspx&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.objectmentor.com/resources/articles/srp.pdf&quot;&gt;http://www.objectmentor.com/resources/articles/srp.pdf&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/estimation/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/estimation/"/>
    <title>Estimation</title>
    <updated>2014-08-07T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/estimation/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Tackling the uncertainty of software estimation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Most developers are horrible at estimation. Period. There are numerous reasons for this. Some of the responsibility falls outside of a developers control but there are still steps that a developer is obligated to take.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Under-estimating the complexity&lt;/h2&gt;
&lt;p&gt;Without actually writing the code a developer can never know every nuance of the problem and possible corresponding solutions. Not to mention the problems spawned from the chosen solutions. This gets better with experience but is not an exact science. Even with UML diagrams and use-cases, the devil is in the details. The best course of action for a developer here is to break the the problem down into such small subtasks that the possible problems start to expose themselves but even this is not a guarantee. Not to mention the time that this actually takes. It falls to management to ensure that developers have the time they need to make these estimates, as well as all the information to do so. It falls to the developers to insist on both of these. Even so. These are only estimates and should be seen as such and not taken by any stake-holders as commitments, unless the developer has committed to these times under no duress.&lt;/p&gt;
&lt;h3&gt;Solution: Break down tasks&lt;/h3&gt;
&lt;p&gt;As mentioned. Breaking down the tasks into easier to estimate chunks will go a long way in refining the schedule, as well as revealing hidden complexity.&lt;/p&gt;
&lt;h2&gt;Over-estimating ability&lt;/h2&gt;
&lt;p&gt;Often a problem seems simple and as a developer you would like to think you could implement a solution in minimal time. This often happens when problems emerge similar to ones we have solved before. Resist the urge to commit. Find out all the information. Break it down. Plan. Estimate. Do not let your ego get you into a position where you are sacrificing your health, family, and friends for a deadline you cannot realistically meet. And DO NOT sacrifice quality. There are no true shortcuts. What you gain in the short term you will lose over the length of the project with interest.&lt;/p&gt;
&lt;h3&gt;Solution: Planning Poker&lt;/h3&gt;
&lt;p&gt;Planning Poker (http://en.wikipedia.org/wiki/Planning_poker) is an estimation technique. The basics are such:
Get some developers into a room.
Discuss a task that needs implementation.
All developers write down an estimate or hold up fingers at the same time with their estimate.
If there are huge discrepancies the task is discussed more. Discussions and estimations are repeated until all developer estimations are similar.&lt;/p&gt;
&lt;p&gt;See: &lt;a href=&quot;http://www.mountaingoatsoftware.com/agile/planning-poker&quot;&gt;http://www.mountaingoatsoftware.com/agile/planning-poker&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Handed down deadlines&lt;/h2&gt;
&lt;p&gt;Sometimes deadlines are given to you from above. As an employee you will feel pressured to accept these deadlines. It is your choice whether you accept them. In The Clean Coder, “Uncle Bob” talks about the responsibilities of developers and managers. CEOs are trying to strategically grow a business, marketing is trying to win customers, project managers are trying to meet deadlines, and as a developer you are tasked with developing a quality product for the customer. By agreeing to unrealistic deadlines, you endanger the project. The earlier problems are identified, the more chance that catastrophe can be avoided.&lt;/p&gt;
&lt;h3&gt;Solution: Team discussion of workable solution&lt;/h3&gt;
&lt;p&gt;If a deadline is immovable, the team (including the customer) need to work together toward a realistic goal. Features can be cut, overtime can be worked (within reason), and additional resources can be allocated (to a point) but the end result should always be a quality solution. Cutting corners just slows down development in the long run. A project becomes a mess. Productivity grinds to a halt. It is a chore to work on and eventually developers leave the company rather than work on the project.&lt;/p&gt;
&lt;h2&gt;PERT&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Program_evaluation_and_review_technique_(PERT)&quot;&gt;Pert&lt;/a&gt; is an estimation technique developed by the U.S Navy for estimating projects. Combining it with planning poker should give a reasonable idea of when you can expect a task to be done. It works as follows.
A developer will give 3 estimates for a work item (use with Planning Poker).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O:&lt;/strong&gt; Optimistic estimate – this is the time to complete a task if the stars align and unicorns come down and help complete the code. In other words, the best case scenario.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P:&lt;/strong&gt; Pessimistic estimate – this is the time to complete a task when you have invoked the wrath of the programming gods. So. The worst case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;M:&lt;/strong&gt; Most likely estimate – this is the time that a developer usually gives.&lt;/p&gt;
&lt;p&gt;Plugging these values in we can get the time estimate for a task.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;T = (O + 4M + P) ÷ 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Banking on this value would be dangerous though. Some buffer time is usually added to estimates. Rather than just thumb-sucking a buffer time, lets calculate the variance and add that to the estimate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;V = (P – O) ÷ 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Estimate = T + V&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Ok. So lets say that your team is asked to add a Quick Contact widget to an existing website. You get 3 developers in the room and ask for times.&lt;/p&gt;
&lt;p&gt;You get the following answers. 1, 3, and 4. In days.&lt;/p&gt;
&lt;p&gt;The 1 came from the developer who is going to be doing the work. 3 from the developer who did most of the existing widgets. 4 from the team lead. Due to the large discrepancies, discussions ensue. It turns out the widget creation process is non trivial but some functionality is inherited from existing widgets. So another round of planning poker gives the following values 3, 3 , and 4. You decide to go with 3.
This was for the most likely time. For the best case you get 1 day and worst case is 7 days.
&lt;strong&gt;T&lt;/strong&gt; = &lt;em&gt;(O + 4M + P) ÷ 6&lt;/em&gt; = &lt;em&gt;(1 + 12 + 7) ÷ 6 = 3.3 V&lt;/em&gt; = &lt;em&gt;(P – O) ÷ 6&lt;/em&gt; = &lt;em&gt;(7 – 1) ÷ 6&lt;/em&gt; = &lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Estimate = T + V = 4.3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So let&apos;s schedule this for a 4.5 days.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So knowing our failings, and bearing in mind the goals of management, we can mitigate potential disaster by using the techniques outlined here. Estimation is never going to be an exact science but we can go a long way in making our estimates more accurate. Hope this helps. Good luck with your next project.&lt;/p&gt;</summary>
  </entry>
  
  <entry>
    <id>http://devonburriss.me/the-way-we-write-code/</id>
    <link type="text/html" rel="alternate" href="http://devonburriss.me/the-way-we-write-code/"/>
    <title>The way we write code…and how we talk about it</title>
    <updated>2014-07-18T00:00:00+00:00</updated>
    <author>
      <name>Devon Burriss</name>
      <uri>http://devonburriss.me/the-way-we-write-code/</uri>
    </author>
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;The true challenge in writing good software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Code takes on a life of its own. As developers we pour our time and intellect into solving problems, and the manifestation of those solutions are found in the lines of code we write. Too often though, the code is controlling us as much as it is controlling the hardware it runs on. We often fail to think about how we write our code, how we structure it, or how others may view or use it. We let one line run to the next, and the code leads us.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/2014/typewriter-800.jpg&quot; alt=&quot;typewriter&quot; /&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;Over the years I became frustrated with the corners that the code led me into. Frustrated with the tangle it became. Frustrated with reading other peoples tangle. So I started down the path of clean code. I researched standards, OOP, clean coding techniques, design patterns, TDD, Agile, DDD, etc. My code got cleaner, maintenance got easier, development velocity didn’t drop as rapidly as the complexity of a project increased. Things were good. There is a problem though. All these methodologies and techniques come with their own dialect. They have terminology and language that describe a complex solution, or a particular design decision in one succinct word. The problem comes in that not every developer is on this path. Many are stuck in fire fighting mode. The overtime hours stack up, any spare minute at work is spent on Facebook trying to find out what was missed while they were working late into the night. Learning new things after all the hours at the office is very low on the their hierarchy of needs. The unfortunate thing is that it is knowledge and experience that gets you out of the fire fight. Testable code, maintainable code. Prioritizing tasks. Understanding deliverables. Managing expectations. Communicating. And slowly I learned that software development is primarily about communication. The larger the project, the more apparent this becomes. Developers, designers, architects, business analysts, project managers, customers. Everybody has a role, and the way they see the project is determined by the lens that that stakeholder dons. Recently I have been leaning more toward methodologies rather than technologies and patterns. These often address the more critical aspects in a project, like communication. I have found though that a lot of my hard won lessons do not garner the immediate appreciation I have for them. The hard learned vocabulary of patterns and methodologies are meaningless when you are working in a team that does not know the terminology nor the benefits of the practices that go with the elitist vocabulary. The vocabulary is important as it allows the succinct identification of a complex idea. It is more important though to be understood by all stakeholders. So while I work on shedding my vocabulary for one with less assumptions, I will try and write about the principles that shape the code I write and the architectural decisions I make. And hopefully I will make elitist snobs out of you who have read this rambling post to the end.&lt;/p&gt;
&lt;h2&gt;Elitist snob training&lt;/h2&gt;
&lt;p&gt;Although the lines tend to blur, I have tried to categorise as best I can.&lt;/p&gt;
&lt;h3&gt;Principles&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Clean code&lt;/li&gt;
&lt;li&gt;SOLID&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Design Patterns&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Repository&lt;/li&gt;
&lt;li&gt;Factory&lt;/li&gt;
&lt;li&gt;Command&lt;/li&gt;
&lt;li&gt;Decorator&lt;/li&gt;
&lt;li&gt;Visitor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TDD&lt;/li&gt;
&lt;li&gt;DDD&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Methodologies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Agile&lt;/li&gt;
&lt;/ul&gt;</summary>
  </entry>
  
</feed>